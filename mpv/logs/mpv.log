[   0.000][v][cplayer] Command line options: 'F:\ori\'
[   0.000][v][cplayer] mpv v0.40.0-279-g07572dc83 Copyright © 2000-2025 mpv/MPlayer/mplayer2 projects
[   0.000][v][cplayer]  built on Aug 16 2025 00:11:47
[   0.000][v][cplayer] libplacebo version: v7.352.0 (v7.351.0-40-gf1cc9dd-dirty)
[   0.000][v][cplayer] FFmpeg version: N-120751-g1d06e8ddc
[   0.000][v][cplayer] FFmpeg library versions:
[   0.000][v][cplayer]    libavcodec      62.12.100
[   0.000][v][cplayer]    libavdevice     62.2.100
[   0.000][v][cplayer]    libavfilter     11.5.100
[   0.000][v][cplayer]    libavformat     62.4.100
[   0.000][v][cplayer]    libavutil       60.9.100
[   0.000][v][cplayer]    libswresample   6.2.100
[   0.000][v][cplayer]    libswscale      9.2.100
[   0.000][v][cplayer] Configuration: -Ddebug=true -Db_ndebug=true -Doptimization=3 -Db_lto=true -Db_lto_mode=thin -Dlibmpv=true -Dpdf-build=enabled -Dlua=enabled -Djavascript=enabled -Dsdl2=enabled -Dlibarchive=enabled -Dlibbluray=enabled -Ddvdnav=enabled -Duchardet=enabled -Drubberband=enabled -Dlcms2=enabled -Dopenal=enabled -Dspirv-cross=enabled -Dvulkan=enabled -Dvapoursynth=enabled -Dgl=enabled -Degl-angle=enabled -Dc_args=-Wno-error=int-conversion -Dprefix=/__w/mpv-winbuild-cmake/mpv-winbuild-cmake/build_x86_64/x86_64-w64-mingw32 -Dlibdir=/__w/mpv-winbuild-cmake/mpv-winbuild-cmake/build_x86_64/x86_64-w64-mingw32/lib -Ddefault_library=shared -Dprefer_static=True --cross-file=/__w/mpv-winbuild-cmake/mpv-winbuild-cmake/build_x86_64/meson_cross.txt
[   0.000][v][cplayer] List of enabled features: build-date cplugins cuda-hwaccel cuda-interop d3d-hwaccel d3d11 d3d9-hwaccel debug direct3d dos-paths dvdnav dxgi-debug-d3d11 egl-angle egl-angle-win32 ffmpeg ffnvcodec gl gl-dxinterop gl-dxinterop-d3d9 gl-win32 glob glob-win32 gpl iconv javascript jpeg lcms2 libarchive libass libavdevice libbluray libplacebo luajit openal rubberband rubberband-3 sdl2 sdl2-audio sdl2-gamepad sdl2-video shaderc spirv-cross uchardet vaapi vaapi-win32 vapoursynth vector vulkan wasapi win32 win32-desktop win32-executable win32-smtc win32-threads zimg zimg-st428 zlib
[   0.000][v][cplayer] Built with NDEBUG.
[   0.000][d][global] home path: '' -> 'C:\Users\feng\AppData\Roaming/mpv'
[   0.000][d][global] user path: '~~home/' -> 'C:\Users\feng\AppData\Roaming/mpv'
[   0.000][d][global] user path: '~~old_home/' -> ''
[   0.000][d][global] config path: 'encoding-profiles.conf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/encoding-profiles.conf'
[   0.000][d][global] config path: 'encoding-profiles.conf' -/-> 'C:/soft/mpv/encoding-profiles.conf'
[   0.000][d][global] config path: 'encoding-profiles.conf' -/-> 'C:/soft/mpv/mpv/encoding-profiles.conf'
[   0.000][d][global] config path: 'mpv.conf' -> 'C:\Users\feng\AppData\Roaming/mpv/mpv.conf'
[   0.000][d][global] config path: 'config' -/-> 'C:\Users\feng\AppData\Roaming/mpv/config'
[   0.000][d][global] config path: 'mpv.conf' -/-> 'C:/soft/mpv/mpv.conf'
[   0.000][d][global] config path: 'config' -/-> 'C:/soft/mpv/config'
[   0.000][d][global] config path: 'mpv.conf' -/-> 'C:/soft/mpv/mpv/mpv.conf'
[   0.000][d][global] config path: 'config' -/-> 'C:/soft/mpv/mpv/config'
[   0.000][v][cplayer] Reading config file C:\Users\feng\AppData\Roaming/mpv/mpv.conf
[   0.000][v][ifo_dvdnav] Opening C:\Users\feng\AppData\Roaming/mpv/mpv.conf
[   0.000][v][bdmv/bluray] Opening C:\Users\feng\AppData\Roaming/mpv/mpv.conf
[   0.000][v][file] Opening C:\Users\feng\AppData\Roaming/mpv/mpv.conf
[   0.000][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.000][d][file] Stream opened successfully.
[   0.000][v][cplayer] Applying profile 'default'...
[   0.000][v][cplayer] Setting option 'vo' = 'gpu-next' (flags = 4)
[   0.000][v][cplayer] Setting option 'gpu-api' = 'd3d11' (flags = 4)
[   0.000][v][cplayer] Setting option 'gpu-context' = 'auto' (flags = 4)
[   0.000][v][cplayer] Setting option 'scale' = 'ewa_lanczossharp' (flags = 4)
[   0.000][v][cplayer] Setting option 'cscale' = 'ewa_lanczossharp' (flags = 4)
[   0.000][v][cplayer] Setting option 'dscale' = 'ewa_lanczossharp' (flags = 4)
[   0.000][v][cplayer] Setting option 'tscale' = 'oversample' (flags = 4)
[   0.000][v][cplayer] Setting option 'sigmoid-upscaling' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'icc-profile-auto' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'hwdec' = 'nvdec-copy' (flags = 4)
[   0.000][v][cplayer] Setting option 'hwdec-codecs' = 'h264,hevc,vp9' (flags = 4)
[   0.000][v][cplayer] Setting option 'deband' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'deband-iterations' = '2' (flags = 4)
[   0.000][v][cplayer] Setting option 'deband-threshold' = '16' (flags = 4)
[   0.000][v][cplayer] Setting option 'deband-range' = '12' (flags = 4)
[   0.000][v][cplayer] Setting option 'deband-grain' = '8' (flags = 4)
[   0.000][v][cplayer] Setting option 'correct-downscaling' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'framedrop' = 'vo' (flags = 4)
[   0.000][v][cplayer] Setting option 'video-sync' = 'display-resample' (flags = 4)
[   0.000][v][cplayer] Setting option 'interpolation' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'dither' = 'fruit' (flags = 4)
[   0.000][v][cplayer] Setting option 'dither-depth' = 'auto' (flags = 4)
[   0.000][v][cplayer] Setting option 'fbo-format' = 'rgba16f' (flags = 4)
[   0.000][v][cplayer] Setting option 'swapchain-depth' = '3' (flags = 4)
[   0.000][v][cplayer] Setting option 'cache' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'demuxer-max-bytes' = '1GiB' (flags = 4)
[   0.000][v][cplayer] Setting option 'cache-secs' = '120' (flags = 4)
[   0.000][v][cplayer] Setting option 'audio-channels' = 'stereo' (flags = 4)
[   0.000][v][cplayer] Setting option 'audio-device' = 'auto' (flags = 4)
[   0.000][v][cplayer] Setting option 'audio-normalize-downmix' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'audio-buffer' = '0.2' (flags = 4)
[   0.000][v][cplayer] Setting option 'volume-max' = '200' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-auto' = 'fuzzy' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-font' = 'Microsoft YaHei' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-font-size' = '32' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-color' = '#FFFFFF' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-border-color' = '#000000' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-border-size' = '2.0' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-shadow-offset' = '1.0' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-blur' = '0' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-outline-size' = '2.0' (flags = 4)
[   0.000][v][cplayer] Setting option 'keepaspect' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'autofit-larger' = '100%x100%' (flags = 4)
[   0.000][v][cplayer] Setting option 'osc' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'border' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'title' = '${media-title}' (flags = 4)
[   0.000][v][cplayer] Setting option 'keep-open' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'idle' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'save-position-on-quit' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'resume-playback' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'watch-later-directory' = '~~/watch_later/' (flags = 4)
[   0.000][v][cplayer] Setting option 'watch-later-options' = 'volume,speed,sub-pos,sub-scale,sub-delay,audio-delay,brightness,contrast,saturation,gamma,hue,start' (flags = 4)
[   0.000][v][cplayer] Setting option 'watch-later-options-remove' = 'pause' (flags = 4)
[   0.000][v][cplayer] Setting option 'alang' = 'en,eng,zh,zh-hans,chs,sc' (flags = 4)
[   0.000][v][cplayer] Setting option 'slang' = 'zh,zh-hans,chs,sc,en,eng' (flags = 4)
[   0.000][v][cplayer] Setting option 'stop-screensaver' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'input-builtin-bindings' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'cursor-autohide' = '500' (flags = 4)
[   0.000][v][cplayer] Setting option 'screenshot-format' = 'png' (flags = 4)
[   0.000][v][cplayer] Setting option 'screenshot-high-bit-depth' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'screenshot-directory' = 'C:\Users\feng\Pictures\mpv' (flags = 4)
[   0.000][v][cplayer] Setting option 'log-file' = '~~/logs/mpv.log' (flags = 4)
[   0.000][v][cplayer] Setting option 'msg-level' = 'all=warn,error=v' (flags = 4)
[   0.000][d][global] config path: 'input.conf' -> 'C:\Users\feng\AppData\Roaming/mpv/input.conf'
[   0.000][d][global] config path: 'input.conf' -/-> 'C:/soft/mpv/input.conf'
[   0.000][d][global] config path: 'input.conf' -/-> 'C:/soft/mpv/mpv/input.conf'
[   0.000][v][ifo_dvdnav] Opening C:\Users\feng\AppData\Roaming/mpv/input.conf
[   0.000][v][bdmv/bluray] Opening C:\Users\feng\AppData\Roaming/mpv/input.conf
[   0.000][v][file] Opening C:\Users\feng\AppData\Roaming/mpv/input.conf
[   0.000][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.000][d][file] Stream opened successfully.
[   0.000][v][input] Parsing input config file C:\Users\feng\AppData\Roaming/mpv/input.conf
[   0.000][v][input] Input config file C:\Users\feng\AppData\Roaming/mpv/input.conf parsed: 70 binds
[   0.000][d][global] config path: 'logs/mpv.log' -> 'C:\Users\feng\AppData\Roaming/mpv/logs/mpv.log'
[   0.000][d][global] user path: '~~/logs/mpv.log' -> 'C:\Users\feng\AppData\Roaming/mpv/logs/mpv.log'
[   0.010][v][cplayer] mpv v0.40.0-279-g07572dc83 Copyright © 2000-2025 mpv/MPlayer/mplayer2 projects
[   0.010][v][cplayer]  built on Aug 16 2025 00:11:47
[   0.010][v][cplayer] libplacebo version: v7.352.0 (v7.351.0-40-gf1cc9dd-dirty)
[   0.010][v][cplayer] FFmpeg version: N-120751-g1d06e8ddc
[   0.010][v][cplayer] FFmpeg library versions:
[   0.010][v][cplayer]    libavcodec      62.12.100
[   0.010][v][cplayer]    libavdevice     62.2.100
[   0.010][v][cplayer]    libavfilter     11.5.100
[   0.010][v][cplayer]    libavformat     62.4.100
[   0.010][v][cplayer]    libavutil       60.9.100
[   0.010][v][cplayer]    libswresample   6.2.100
[   0.010][v][cplayer]    libswscale      9.2.100
[   0.010][v][cplayer] Configuration: -Ddebug=true -Db_ndebug=true -Doptimization=3 -Db_lto=true -Db_lto_mode=thin -Dlibmpv=true -Dpdf-build=enabled -Dlua=enabled -Djavascript=enabled -Dsdl2=enabled -Dlibarchive=enabled -Dlibbluray=enabled -Ddvdnav=enabled -Duchardet=enabled -Drubberband=enabled -Dlcms2=enabled -Dopenal=enabled -Dspirv-cross=enabled -Dvulkan=enabled -Dvapoursynth=enabled -Dgl=enabled -Degl-angle=enabled -Dc_args=-Wno-error=int-conversion -Dprefix=/__w/mpv-winbuild-cmake/mpv-winbuild-cmake/build_x86_64/x86_64-w64-mingw32 -Dlibdir=/__w/mpv-winbuild-cmake/mpv-winbuild-cmake/build_x86_64/x86_64-w64-mingw32/lib -Ddefault_library=shared -Dprefer_static=True --cross-file=/__w/mpv-winbuild-cmake/mpv-winbuild-cmake/build_x86_64/meson_cross.txt
[   0.010][v][cplayer] List of enabled features: build-date cplugins cuda-hwaccel cuda-interop d3d-hwaccel d3d11 d3d9-hwaccel debug direct3d dos-paths dvdnav dxgi-debug-d3d11 egl-angle egl-angle-win32 ffmpeg ffnvcodec gl gl-dxinterop gl-dxinterop-d3d9 gl-win32 glob glob-win32 gpl iconv javascript jpeg lcms2 libarchive libass libavdevice libbluray libplacebo luajit openal rubberband rubberband-3 sdl2 sdl2-audio sdl2-gamepad sdl2-video shaderc spirv-cross uchardet vaapi vaapi-win32 vapoursynth vector vulkan wasapi win32 win32-desktop win32-executable win32-smtc win32-threads zimg zimg-st428 zlib
[   0.010][v][cplayer] Built with NDEBUG.
[   0.010][d][ytdl_hook] Loading lua script @ytdl_hook.lua...
[   0.010][d][stats] Loading lua script @stats.lua...
[   0.010][d][console] Loading lua script @console.lua...
[   0.010][d][auto_profiles] Loading lua script @auto_profiles.lua...
[   0.010][d][select] Loading lua script @select.lua...
[   0.010][d][positioning] Loading lua script @positioning.lua...
[   0.010][d][commands] Loading lua script @commands.lua...
[   0.010][v][clipboard] Initialized win32 clipboard backend.
[   0.010][d][global] config path: 'scripts' -> 'C:\Users\feng\AppData\Roaming/mpv/scripts'
[   0.010][d][global] config path: 'scripts' -/-> 'C:/soft/mpv/scripts'
[   0.010][d][global] config path: 'scripts' -/-> 'C:/soft/mpv/mpv/scripts'
[   0.011][d][console] loading mp.defaults
[   0.011][d][stats] loading mp.defaults
[   0.011][d][auto_profiles] loading mp.defaults
[   0.011][d][ytdl_hook] loading mp.defaults
[   0.011][d][select] loading mp.defaults
[   0.011][d][ytdl_hook] loading @ytdl_hook.lua
[   0.011][d][console] loading @console.lua
[   0.011][d][auto_profiles] loading @auto_profiles.lua
[   0.011][d][select] loading @select.lua
[   0.011][d][positioning] loading mp.defaults
[   0.011][d][playlistmanager] Loading lua script C:\Users\feng\AppData\Roaming/mpv/scripts/playlistmanager.lua...
[   0.011][d][display_time] Loading lua script C:\Users\feng\AppData\Roaming/mpv/scripts/display_time.lua...
[   0.011][d][menu] Loading lua script C:\Users\feng\AppData\Roaming/mpv/scripts/menu.lua...
[   0.011][d][modernz] Loading lua script C:\Users\feng\AppData\Roaming/mpv/scripts/modernz.lua...
[   0.011][v][cplayer] Waiting for scripts...
[   0.012][d][stats] loading @stats.lua
[   0.012][d][positioning] loading @positioning.lua
[   0.012][d][select] reading options for select
[   0.012][d][ytdl_hook] reading options for ytdl_hook
[   0.012][d][positioning] reading options for positioning
[   0.012][d][global] config path: 'script-opts/select.conf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/script-opts/select.conf'
[   0.012][d][global] config path: 'script-opts/select.conf' -/-> 'C:/soft/mpv/script-opts/select.conf'
[   0.012][d][global] config path: 'script-opts/select.conf' -/-> 'C:/soft/mpv/mpv/script-opts/select.conf'
[   0.012][d][select] script-opts/select.conf not found.
[   0.012][d][commands] loading mp.defaults
[   0.012][d][playlistmanager] loading mp.defaults
[   0.012][d][display_time] loading mp.defaults
[   0.012][d][menu] loading mp.defaults
[   0.012][d][commands] loading @commands.lua
[   0.012][d][auto_profiles] Destroying client handle...
[   0.012][d][display_time] loading file C:\Users\feng\AppData\Roaming/mpv/scripts/display_time.lua
[   0.012][d][global] config path: 'script-opts/ytdl_hook.conf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/script-opts/ytdl_hook.conf'
[   0.012][d][global] config path: 'script-opts/ytdl_hook.conf' -/-> 'C:/soft/mpv/script-opts/ytdl_hook.conf'
[   0.012][d][global] config path: 'script-opts/ytdl_hook.conf' -/-> 'C:/soft/mpv/mpv/script-opts/ytdl_hook.conf'
[   0.012][d][ytdl_hook] script-opts/ytdl_hook.conf not found.
[   0.012][d][stats] reading options for stats
[   0.013][d][commands] reading options for commands
[   0.013][d][menu] loading file C:\Users\feng\AppData\Roaming/mpv/scripts/menu.lua
[   0.013][d][global] config path: 'lua-settings/select.conf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/lua-settings/select.conf'
[   0.013][d][global] config path: 'script-opts/positioning.conf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/script-opts/positioning.conf'
[   0.013][d][playlistmanager] loading file C:\Users\feng\AppData\Roaming/mpv/scripts/playlistmanager.lua
[   0.013][d][global] config path: 'lua-settings/select.conf' -/-> 'C:/soft/mpv/lua-settings/select.conf'
[   0.013][d][global] config path: 'lua-settings/ytdl_hook.conf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/lua-settings/ytdl_hook.conf'
[   0.013][d][global] config path: 'script-opts/positioning.conf' -/-> 'C:/soft/mpv/script-opts/positioning.conf'
[   0.013][d][global] config path: 'lua-settings/select.conf' -/-> 'C:/soft/mpv/mpv/lua-settings/select.conf'
[   0.013][d][select] lua-settings/select.conf not found.
[   0.013][d][global] config path: 'script-opts/positioning.conf' -/-> 'C:/soft/mpv/mpv/script-opts/positioning.conf'
[   0.013][d][positioning] script-opts/positioning.conf not found.
[   0.013][d][global] config path: 'lua-settings/ytdl_hook.conf' -/-> 'C:/soft/mpv/lua-settings/ytdl_hook.conf'
[   0.013][d][global] config path: 'script-opts/commands.conf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/script-opts/commands.conf'
[   0.013][d][global] config path: 'lua-settings/ytdl_hook.conf' -/-> 'C:/soft/mpv/mpv/lua-settings/ytdl_hook.conf'
[   0.013][d][ytdl_hook] lua-settings/ytdl_hook.conf not found.
[   0.013][d][global] config path: 'script-opts/commands.conf' -/-> 'C:/soft/mpv/script-opts/commands.conf'
[   0.013][d][global] config path: 'script-opts/commands.conf' -/-> 'C:/soft/mpv/mpv/script-opts/commands.conf'
[   0.013][d][commands] script-opts/commands.conf not found.
[   0.013][d][cplayer] Run command: define-section, flags=64, args=[name="input_select", contents="", flags="default"]
[   0.013][d][cplayer] Run command: enable-section, flags=64, args=[name="input_select", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.013][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_select", contents="", flags="force"]
[   0.013][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_select", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.013][d][global] config path: 'script-opts/stats.conf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/script-opts/stats.conf'
[   0.013][d][console] reading options for console
[   0.013][d][global] config path: 'script-opts/stats.conf' -/-> 'C:/soft/mpv/script-opts/stats.conf'
[   0.013][d][global] config path: 'script-opts/stats.conf' -/-> 'C:/soft/mpv/mpv/script-opts/stats.conf'
[   0.013][d][stats] script-opts/stats.conf not found.
[   0.013][d][global] config path: 'lua-settings/positioning.conf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/lua-settings/positioning.conf'
[   0.013][d][global] config path: 'lua-settings/commands.conf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/lua-settings/commands.conf'
[   0.013][d][global] config path: 'lua-settings/positioning.conf' -/-> 'C:/soft/mpv/lua-settings/positioning.conf'
[   0.013][d][global] config path: 'lua-settings/commands.conf' -/-> 'C:/soft/mpv/lua-settings/commands.conf'
[   0.013][d][global] config path: 'lua-settings/positioning.conf' -/-> 'C:/soft/mpv/mpv/lua-settings/positioning.conf'
[   0.013][d][positioning] lua-settings/positioning.conf not found.
[   0.013][d][global] config path: 'lua-settings/commands.conf' -/-> 'C:/soft/mpv/mpv/lua-settings/commands.conf'
[   0.013][d][commands] lua-settings/commands.conf not found.
[   0.013][d][cplayer] Run command: define-section, flags=64, args=[name="input_commands", contents="", flags="default"]
[   0.013][d][cplayer] Run command: enable-section, flags=64, args=[name="input_commands", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.013][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_commands", contents="", flags="force"]
[   0.013][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_commands", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.013][d][cplayer] Run command: define-section, flags=64, args=[name="input_positioning", contents="", flags="default"]
[   0.013][d][cplayer] Run command: enable-section, flags=64, args=[name="input_positioning", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.013][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_positioning", contents="", flags="force"]
[   0.013][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_positioning", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.013][d][modernz] loading mp.defaults
[   0.013][d][global] config path: 'script-opts/console.conf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/script-opts/console.conf'
[   0.013][d][global] config path: 'lua-settings/stats.conf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/lua-settings/stats.conf'
[   0.013][d][global] config path: 'script-opts/console.conf' -/-> 'C:/soft/mpv/script-opts/console.conf'
[   0.013][d][global] config path: 'lua-settings/stats.conf' -/-> 'C:/soft/mpv/lua-settings/stats.conf'
[   0.013][d][global] config path: 'script-opts/console.conf' -/-> 'C:/soft/mpv/mpv/script-opts/console.conf'
[   0.013][d][console] script-opts/console.conf not found.
[   0.013][d][global] config path: 'lua-settings/stats.conf' -/-> 'C:/soft/mpv/mpv/lua-settings/stats.conf'
[   0.013][d][stats] lua-settings/stats.conf not found.
[   0.014][d][global] config path: 'lua-settings/console.conf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/lua-settings/console.conf'
[   0.014][d][global] config path: 'lua-settings/console.conf' -/-> 'C:/soft/mpv/lua-settings/console.conf'
[   0.014][d][global] config path: 'lua-settings/console.conf' -/-> 'C:/soft/mpv/mpv/lua-settings/console.conf'
[   0.014][d][console] lua-settings/console.conf not found.
[   0.014][d][menu] reading options for menu
[   0.014][d][cplayer] Run command: define-section, flags=64, args=[name="input_stats", contents="", flags="default"]
[   0.014][d][cplayer] Run command: enable-section, flags=64, args=[name="input_stats", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.014][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_stats", contents="", flags="force"]
[   0.014][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_stats", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.014][d][cplayer] Run command: define-section, flags=64, args=[name="input_console", contents="", flags="default"]
[   0.014][d][cplayer] Run command: enable-section, flags=64, args=[name="input_console", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.014][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_console", contents="", flags="force"]
[   0.014][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_console", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.014][d][modernz] loading file C:\Users\feng\AppData\Roaming/mpv/scripts/modernz.lua
[   0.014][d][playlistmanager] reading options for playlistmanager
[   0.014][d][global] config path: 'script-opts/menu.conf' -> 'C:\Users\feng\AppData\Roaming/mpv/script-opts/menu.conf'
[   0.014][v][menu] Opened config file script-opts/menu.conf.
[   0.015][d][global] config path: 'script-opts/playlistmanager.conf' -> 'C:\Users\feng\AppData\Roaming/mpv/script-opts/playlistmanager.conf'
[   0.015][v][playlistmanager] Opened config file script-opts/playlistmanager.conf.
[   0.015][d][global] config path: 'script-opts/menu_data.json' -> 'C:\Users\feng\AppData\Roaming/mpv/script-opts/menu_data.json'
[   0.015][d][global] user path: '~~/script-opts/menu_data.json' -> 'C:\Users\feng\AppData\Roaming/mpv/script-opts/menu_data.json'
[   0.015][d][cplayer] Run command: define-section, flags=64, args=[name="input_menu", contents="MBTN_LEFT nonscalable script-binding menu/execute_menu\nMBTN_RIGHT nonscalable script-binding menu/show_menu\nWHEEL_UP nonscalable script-binding menu/scroll_up\nWHEEL_DOWN nonscalable script-binding menu/scroll_down\nESC nonscalable script-binding menu/hide_menu\n", flags="default"]
[   0.015][d][cplayer] Run command: enable-section, flags=64, args=[name="input_menu", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.015][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_menu", contents="", flags="force"]
[   0.015][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_menu", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.016][i][playlistmanager] auto showamount: 19
[   0.016][v][playlistmanager] updating options
[   0.016][d][cplayer] Run command: define-section, flags=64, args=[name="input_playlistmanager", contents="F6 nonscalable script-binding playlistmanager/showplaylist\n", flags="default"]
[   0.016][d][cplayer] Run command: enable-section, flags=64, args=[name="input_playlistmanager", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.016][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_playlistmanager", contents="", flags="force"]
[   0.016][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_playlistmanager", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.018][d][global] config path: 'script-opts/modernz-locale.json' -> 'C:\Users\feng\AppData\Roaming/mpv/script-opts/modernz-locale.json'
[   0.018][d][global] user path: '~~/script-opts/modernz-locale.json' -> 'C:\Users\feng\AppData\Roaming/mpv/script-opts/modernz-locale.json'
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="showhide", contents="mouse_move script-binding modernz/__keybinding1\nmouse_leave script-binding modernz/__keybinding2\n", flags="force"]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="showhide_wc", contents="mouse_move script-binding modernz/__keybinding3\nmouse_leave script-binding modernz/__keybinding4\n", flags="force"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="showhide", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="showhide_wc", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="input", contents="mbtn_left script-binding modernz/__keybinding5\nshift+mbtn_left script-binding modernz/__keybinding6\nmbtn_right script-binding modernz/__keybinding7\nshift+mbtn_right script-binding modernz/__keybinding8\nmbtn_mid script-binding modernz/__keybinding9\nwheel_up script-binding modernz/__keybinding10\nwheel_down script-binding modernz/__keybinding11\nmbtn_left_dbl ignore\nshift+mbtn_left_dbl ignore\nmbtn_right_dbl ignore\n", flags="force"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="window-controls", contents="mbtn_left script-binding modernz/__keybinding12\n", flags="force"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="window-controls", flags=""]
[   0.019][d][modernz] reading options for modernz
[   0.019][d][global] config path: 'script-opts/modernz.conf' -> 'C:\Users\feng\AppData\Roaming/mpv/script-opts/modernz.conf'
[   0.020][v][modernz] Opened config file script-opts/modernz.conf.
[   0.021][v][cplayer] Set property: user-data/osc/visibility="auto" -> 1
[   0.021][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[   0.021][d][cplayer] Run command: disable-section, flags=64, args=[name="window-controls"]
[   0.021][v][cplayer] Set property: user-data/osc/margins={"r":0,"t":0,"l":0,"b":0} -> 1
[   0.021][v][cplayer] Set property: sub-pos=100 -> 1
[   0.021][v][cplayer] Set property: sub-pos=100 -> 1
[   0.021][v][cplayer] Done loading scripts.
[   0.021][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.021][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.021][v][cplayer] Running hook: auto_profiles/on_before_start_file
[   0.021][v][cplayer] Failed sending hook command auto_profiles/on_before_start_file. Removing hook.
[   0.022][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.022][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.022][v][cplayer] Running hook: auto_profiles/on_load
[   0.022][v][cplayer] Failed sending hook command auto_profiles/on_load. Removing hook.
[   0.022][v][cplayer] Running hook: ytdl_hook/on_load
[   0.022][v][cplayer] Running hook: ytdl_hook/on_load
[   0.022][v][ytdl_hook] playlist hook
[   0.022][v][cplayer] Set property: user-data/osc/visibility="auto" -> 1
[   0.022][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[   0.022][d][cplayer] Run command: disable-section, flags=64, args=[name="window-controls"]
[   0.022][v][cplayer] Set property: user-data/osc/margins={"r":0,"t":0,"l":0,"b":0} -> 1
[   0.022][v][ifo_dvdnav] Opening F:\ori\
[   0.023][v][cplayer] Set property: user-data/osc/margins={"r":0,"t":0,"l":0,"b":0} -> 1
[   0.023][d][modernz] osc_init
[   0.023][v][bdmv/bluray] Opening F:\ori\
[   0.023][v][file] Opening F:\ori\
[   0.023][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.023][d][file] Stream opened successfully.
[   0.023][v][demux] Trying demuxers for level=normal.
[   0.023][d][demux] Trying demuxer: directory (force-level: normal)
[   0.023][v][cplayer] Set property: user-data/osc/margins={"r":0,"t":0,"l":0,"b":0} -> 1
[   0.023][v][directory] demuxer read all data; closing stream
[   0.023][v][demux] Detected file format: directory (Playlist dir)
[   0.023][v][cplayer] Opening done: F:\ori\
[   0.023][d][global] config path: 'fonts' -> 'C:\Users\feng\AppData\Roaming/mpv/fonts'
[   0.023][d][osd/libass] ASS library version: 0x1704000 (runtime 0x1704000)
[   0.023][v][osd/libass] libass API version: 0x1704000
[   0.023][v][osd/libass] libass source: meson, commit: 0.17.4-15-g534a5f8299c5ab3c2782856fcb843bfea47b7afc
[   0.024][v][osd/libass] Shaper: FriBidi 1.0.16 (SIMPLE) HarfBuzz-ng 11.4.1 (COMPLEX)
[   0.024][d][global] config path: 'subfont.ttf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/subfont.ttf'
[   0.024][d][global] config path: 'subfont.ttf' -/-> 'C:/soft/mpv/subfont.ttf'
[   0.024][d][global] config path: 'subfont.ttf' -/-> 'C:/soft/mpv/mpv/subfont.ttf'
[   0.024][d][global] config path: 'fonts.conf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/fonts.conf'
[   0.024][d][global] config path: 'fonts.conf' -/-> 'C:/soft/mpv/fonts.conf'
[   0.024][d][global] config path: 'fonts.conf' -> 'C:/soft/mpv/mpv/fonts.conf'
[   0.024][v][osd/libass] Setting up fonts...
[   0.025][v][osd/libass] Loading font file 'C:\Users\feng\AppData\Roaming/mpv/fonts\fluent-system-icons.ttf'
[   0.026][v][osd/libass] Loading font file 'C:\Users\feng\AppData\Roaming/mpv/fonts\material-design-icons.ttf'
[   0.027][v][osd/libass] Using font provider directwrite (with GDI)
[   0.027][v][osd/libass] Done.
[   0.027][d][cplayer] Run command: define-section, flags=64, args=[name="input_modernz", contents="", flags="default"]
[   0.027][d][cplayer] Run command: enable-section, flags=64, args=[name="input_modernz", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.027][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.027][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.027][v][cplayer] finished playback, success (reason 5)
[   0.027][v][cplayer] Running hook: ytdl_hook/on_after_end_file
[   0.028][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_modernz", contents="", flags="force"]
[   0.028][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_modernz", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.028][d][cplayer] Run command: del, flags=64, args=[name="user-data/mpv/ytdl/json-subprocess-result"]
[   0.028][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.028][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.028][i][cplayer] Resuming playback. This behavior can be disabled with --no-resume-playback.
[   0.028][v][cplayer] Loading config 'C:\Users\feng\AppData\Roaming/mpv/watch_later/24BA7E8E76C3067498BF1287B2F4919A'
[   0.028][v][cplayer] Reading config file C:\Users\feng\AppData\Roaming/mpv/watch_later/24BA7E8E76C3067498BF1287B2F4919A
[   0.028][v][ifo_dvdnav] Opening C:\Users\feng\AppData\Roaming/mpv/watch_later/24BA7E8E76C3067498BF1287B2F4919A
[   0.029][v][bdmv/bluray] Opening C:\Users\feng\AppData\Roaming/mpv/watch_later/24BA7E8E76C3067498BF1287B2F4919A
[   0.029][v][file] Opening C:\Users\feng\AppData\Roaming/mpv/watch_later/24BA7E8E76C3067498BF1287B2F4919A
[   0.029][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.029][d][file] Stream opened successfully.
[   0.029][v][cplayer] Applying profile 'default'...
[   0.029][i][cplayer] Playing: F:\ori\SSIS-586
[   0.029][v][cplayer] Running hook: ytdl_hook/on_load
[   0.029][v][cplayer] Running hook: ytdl_hook/on_load
[   0.029][v][ytdl_hook] playlist hook
[   0.030][v][ifo_dvdnav] Opening F:\ori\SSIS-586
[   0.030][v][bdmv/bluray] Opening F:\ori\SSIS-586
[   0.030][v][file] Opening F:\ori\SSIS-586
[   0.030][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.030][d][file] Stream opened successfully.
[   0.030][v][demux] Trying demuxers for level=normal.
[   0.030][d][demux] Trying demuxer: directory (force-level: normal)
[   0.030][v][directory] demuxer read all data; closing stream
[   0.030][v][demux] Detected file format: directory (Playlist dir)
[   0.030][v][cplayer] Opening done: F:\ori\SSIS-586
[   0.030][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.030][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.031][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.031][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.031][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.031][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.032][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.032][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.032][v][cplayer] finished playback, success (reason 5)
[   0.032][v][cplayer] Running hook: ytdl_hook/on_after_end_file
[   0.032][d][cplayer] Run command: del, flags=64, args=[name="user-data/mpv/ytdl/json-subprocess-result"]
[   0.033][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.033][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.033][i][cplayer] Resuming playback. This behavior can be disabled with --no-resume-playback.
[   0.033][v][cplayer] Loading config 'C:\Users\feng\AppData\Roaming/mpv/watch_later/586C7FE63FC251B11C382EDA4E7C70B5'
[   0.033][v][cplayer] Reading config file C:\Users\feng\AppData\Roaming/mpv/watch_later/586C7FE63FC251B11C382EDA4E7C70B5
[   0.033][v][ifo_dvdnav] Opening C:\Users\feng\AppData\Roaming/mpv/watch_later/586C7FE63FC251B11C382EDA4E7C70B5
[   0.033][v][bdmv/bluray] Opening C:\Users\feng\AppData\Roaming/mpv/watch_later/586C7FE63FC251B11C382EDA4E7C70B5
[   0.033][v][file] Opening C:\Users\feng\AppData\Roaming/mpv/watch_later/586C7FE63FC251B11C382EDA4E7C70B5
[   0.033][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.033][d][file] Stream opened successfully.
[   0.033][v][cplayer] Applying profile 'default'...
[   0.033][v][cplayer] Setting option 'volume' = '28.000000' (flags = 36)
[   0.033][v][cplayer] Setting option 'sub-pos' = '82.000000' (flags = 36)
[   0.033][v][cplayer] Setting option 'start' = '9661.827711' (flags = 36)
[   0.033][i][cplayer] Playing: F:\ori\SSIS-586/ssis-586-4k.mp4
[   0.033][v][cplayer] Running hook: ytdl_hook/on_load
[   0.034][v][cplayer] Running hook: ytdl_hook/on_load
[   0.034][v][ytdl_hook] playlist hook
[   0.034][v][ifo_dvdnav] Opening F:\ori\SSIS-586/ssis-586-4k.mp4
[   0.034][v][bdmv/bluray] Opening F:\ori\SSIS-586/ssis-586-4k.mp4
[   0.034][v][file] Opening F:\ori\SSIS-586/ssis-586-4k.mp4
[   0.034][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.034][d][file] Stream opened successfully.
[   0.034][v][demux] Trying demuxers for level=normal.
[   0.034][d][demux] Trying demuxer: directory (force-level: normal)
[   0.065][d][demux] Trying demuxer: disc (force-level: normal)
[   0.065][d][demux] Trying demuxer: edl (force-level: normal)
[   0.065][d][demux] Trying demuxer: cue (force-level: normal)
[   0.065][d][demux] Trying demuxer: rawaudio (force-level: normal)
[   0.065][d][demux] Trying demuxer: rawvideo (force-level: normal)
[   0.065][d][demux] Trying demuxer: mkv (force-level: normal)
[   0.065][d][demux] Trying demuxer: libarchive (force-level: normal)
[   0.066][d][modernz] osc_init
[   0.066][d][demux] Trying demuxer: lavf (force-level: normal)
[   0.066][v][cplayer] Set property: user-data/osc/margins={"r":0,"t":0,"l":0,"b":0} -> 1
[   0.068][v][lavf] Found 'mov,mp4,m4a,3gp,3g2,mj2' at score=100 size=2048.
[   0.069][v][file] stream level seek from 131072 to 29906583595
[   0.305][v][demux] Detected file format: mov,mp4,m4a,3gp,3g2,mj2 (libavformat)
[   0.305][v][cplayer] Opening done: F:\ori\SSIS-586/ssis-586-4k.mp4
[   0.306][v][find_files] Loading external files in F:\ori\SSIS-586/
[   0.306][d][global] config path: 'sub' -/-> 'C:\Users\feng\AppData\Roaming/mpv/sub'
[   0.306][d][global] config path: 'sub' -/-> 'C:/soft/mpv/sub'
[   0.306][d][global] config path: 'sub' -/-> 'C:/soft/mpv/mpv/sub'
[   0.306][v][ifo_dvdnav] Opening F:\ori\SSIS-586/SSIS-586-4k.srt
[   0.306][d][modernz] osc_init
[   0.306][v][bdmv/bluray] Opening F:\ori\SSIS-586/SSIS-586-4k.srt
[   0.306][v][file] Opening F:\ori\SSIS-586/SSIS-586-4k.srt
[   0.307][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.307][d][file] Stream opened successfully.
[   0.307][v][demux] Trying demuxers for level=normal.
[   0.307][d][demux] Trying demuxer: directory (force-level: normal)
[   0.307][d][demux] Trying demuxer: disc (force-level: normal)
[   0.307][d][demux] Trying demuxer: edl (force-level: normal)
[   0.307][d][demux] Trying demuxer: cue (force-level: normal)
[   0.307][d][demux] Trying demuxer: rawaudio (force-level: normal)
[   0.307][d][demux] Trying demuxer: rawvideo (force-level: normal)
[   0.307][d][demux] Trying demuxer: mkv (force-level: normal)
[   0.307][d][demux] Trying demuxer: libarchive (force-level: normal)
[   0.307][d][demux] Trying demuxer: lavf (force-level: normal)
[   0.307][v][cplayer] Set property: user-data/osc/margins={"r":0,"t":0,"l":0,"b":0} -> 1
[   0.308][v][lavf] Found 'srt' at score=100 size=2048.
[   0.309][v][lavf] Data has a BOM, assuming utf-8 as charset.
[   0.313][v][lavf] avformat_find_stream_info() finished after 67062 bytes.
[   0.313][v][lavf] demuxer read all data; closing stream
[   0.313][v][demux] Detected file format: srt (libavformat)
[   0.313][v][cplayer] Running hook: auto_profiles/on_preloaded
[   0.313][v][cplayer] Failed sending hook command auto_profiles/on_preloaded. Removing hook.
[   0.313][v][cplayer] Running hook: ytdl_hook/on_preloaded
[   0.313][v][lavf] select track 0
[   0.313][v][lavf] select track 1
[   0.313][v][lavf] select track 0
[   0.313][v][lavf] refresh track 0 (sub)
[   0.313][v][lavf] refresh seek to -10.000000
[   0.313][i][cplayer]  ● Video  --vid=1  (h264 3840x2160 59.9402 fps) [default]
[   0.313][i][cplayer]  ● Audio  --aid=1  (aac 2ch 48000 Hz 256 kbps) [default]
[   0.313][i][cplayer]  ● Subs   --sid=1  'SSIS-586-4k.srt' (subrip) [external]
[   0.313][v][vo/gpu-next] Probing for best GPU context.
[   0.313][v][vo/gpu-next/d3d11] Initializing GPU context 'd3d11'
[   0.487][v][vo/gpu-next/d3d11] Using Direct3D 11 feature level 12_1
[   0.487][v][vo/gpu-next/d3d11] Device Name: NVIDIA GeForce GTX 1650
[   0.487][v][vo/gpu-next/d3d11] Device ID: 10de:1f82 (rev a1)
[   0.487][v][vo/gpu-next/d3d11] Subsystem ID: 7377:1501
[   0.487][v][vo/gpu-next/d3d11] LUID: 00000000049682a1
[   0.487][v][vo/gpu-next/d3d11] Initializing SPIR-V compiler 'shaderc'
[   0.487][v][vo/gpu-next/d3d11] Using Direct3D 11.1 runtime
[   0.487][v][vo/gpu-next/d3d11] Maximum Texture2D size: 16384x16384
[   0.488][v][vo/gpu-next/d3d11] D3DCompiler version: 10.0.26100.4946
[   0.501][v][vo/gpu-next/d3d11] Using DXGI 1.2+
[   0.502][v][vo/gpu-next/d3d11] Queried output: \\.\DISPLAY1, 2560x1440 @ 8 bits, colorspace: RGB_FULL_G22_NONE_P709 (0)
[   0.502][v][vo/gpu-next/d3d11] Selected swapchain format R8G8B8A8_UNORM (28), attempting to utilize it.
[   0.504][v][vo/gpu-next/d3d11] Selected swapchain color space RGB_FULL_G22_NONE_P709 (0), attempting to utilize it.
[   0.504][v][vo/gpu-next/d3d11] Swapchain capabilities for color space RGB_FULL_G22_NONE_P709 (0): normal: yes, overlay: yes
[   0.504][v][vo/gpu-next/d3d11] Swapchain successfully configured to color space RGB_FULL_G22_NONE_P709 (0)!
[   0.504][v][vo/gpu-next/d3d11] Using flip-model presentation
[   0.504][v][vo/gpu-next/libplacebo] Initialized libplacebo v7.352.0 (v7.351.0-40-gf1cc9dd-dirty) (API v352)
[   0.504][v][vo/gpu-next/libplacebo] Using DXGI 1.2+
[   0.504][v][vo/gpu-next/libplacebo] Using Direct3D 11 feature level 12_1
[   0.504][v][vo/gpu-next/libplacebo] Direct3D 11 device properties:
[   0.504][v][vo/gpu-next/libplacebo]     Device Name: NVIDIA GeForce GTX 1650
[   0.504][v][vo/gpu-next/libplacebo]     Device ID: 10de:1f82 (rev a1)
[   0.504][v][vo/gpu-next/libplacebo]     Subsystem ID: 7377:1501
[   0.504][v][vo/gpu-next/libplacebo]     LUID: 00000000049682a1
[   0.504][v][vo/gpu-next/libplacebo]     Driver version: 32.0.15.8097
[   0.504][v][vo/gpu-next/libplacebo] shaderc SPIR-V version 1.6 rev 1
[   0.504][v][vo/gpu-next/libplacebo] Initialized SPIR-V compiler 'shaderc'
[   0.504][v][vo/gpu-next/libplacebo] Using Direct3D 11.4 runtime
[   0.504][v][vo/gpu-next/libplacebo] D3DCompiler version: 10.0.26100.4946
[   0.505][v][vo/gpu-next/libplacebo] GPU information:
[   0.505][v][vo/gpu-next/libplacebo]     GLSL version: 450 (vulkan)
[   0.505][v][vo/gpu-next/libplacebo]       max_shmem_size:            32768
[   0.505][v][vo/gpu-next/libplacebo]       max_group_threads:         1024
[   0.505][v][vo/gpu-next/libplacebo]       max_group_size[0]:         1024
[   0.505][v][vo/gpu-next/libplacebo]       max_group_size[1]:         1024
[   0.505][v][vo/gpu-next/libplacebo]       max_group_size[2]:         64
[   0.505][v][vo/gpu-next/libplacebo]       subgroup_size:             0
[   0.505][v][vo/gpu-next/libplacebo]       min_gather_offset:         -32
[   0.505][v][vo/gpu-next/libplacebo]       max_gather_offset:         31
[   0.505][v][vo/gpu-next/libplacebo]     Limits:
[   0.505][v][vo/gpu-next/libplacebo]       thread_safe:               0
[   0.505][v][vo/gpu-next/libplacebo]       callbacks:                 0
[   0.505][v][vo/gpu-next/libplacebo]       max_buf_size:              1031536640
[   0.505][v][vo/gpu-next/libplacebo]       max_ubo_size:              65536
[   0.505][v][vo/gpu-next/libplacebo]       max_ssbo_size:             1031536640
[   0.505][v][vo/gpu-next/libplacebo]       max_vbo_size:              1031536640
[   0.505][v][vo/gpu-next/libplacebo]       max_mapped_size:           0
[   0.505][v][vo/gpu-next/libplacebo]       max_buffer_texels:         134217728
[   0.505][v][vo/gpu-next/libplacebo]       align_host_ptr:            0
[   0.505][v][vo/gpu-next/libplacebo]       host_cached:               0
[   0.505][v][vo/gpu-next/libplacebo]       max_tex_1d_dim:            16384
[   0.505][v][vo/gpu-next/libplacebo]       max_tex_2d_dim:            16384
[   0.505][v][vo/gpu-next/libplacebo]       max_tex_3d_dim:            2048
[   0.505][v][vo/gpu-next/libplacebo]       blittable_1d_3d:           1
[   0.505][v][vo/gpu-next/libplacebo]       buf_transfer:              0
[   0.505][v][vo/gpu-next/libplacebo]       align_tex_xfer_pitch:      1
[   0.505][v][vo/gpu-next/libplacebo]       align_tex_xfer_offset:     32
[   0.505][v][vo/gpu-next/libplacebo]       max_variable_comps:        0
[   0.505][v][vo/gpu-next/libplacebo]       max_constants:             0
[   0.505][v][vo/gpu-next/libplacebo]       max_pushc_size:            0
[   0.505][v][vo/gpu-next/libplacebo]       align_vertex_stride:       1
[   0.505][v][vo/gpu-next/libplacebo]       max_dispatch[0]:           65535
[   0.505][v][vo/gpu-next/libplacebo]       max_dispatch[1]:           65535
[   0.505][v][vo/gpu-next/libplacebo]       max_dispatch[2]:           65535
[   0.505][v][vo/gpu-next/libplacebo]       fragment_queues:           1
[   0.505][v][vo/gpu-next/libplacebo]       compute_queues:            1
[   0.505][d][vo/gpu-next/libplacebo] GPU texture formats:
[   0.505][d][vo/gpu-next/libplacebo]     NAME                 TYPE   SIZE COMP CAPS         EMU DEPTH         HOST_BITS     GLSL_TYPE  GLSL_FMT   FOURCC
[   0.505][d][vo/gpu-next/libplacebo]     r8                   UNORM  1    R    SsLRbBVutHWG n   {8  0  0  0 } {8  0  0  0 } float      r8         R8    
[   0.505][d][vo/gpu-next/libplacebo]     r8s                  SNORM  1    R    SsLRbBVutHWG n   {8  0  0  0 } {8  0  0  0 } float      r8_snorm         
[   0.505][d][vo/gpu-next/libplacebo]     rg8                  UNORM  2    RG   SsLRbBVutHWG n   {8  8  0  0 } {8  8  0  0 } vec2       rg8        GR88  
[   0.505][d][vo/gpu-next/libplacebo]     rg8s                 SNORM  2    RG   SsLRbBVutHWG n   {8  8  0  0 } {8  8  0  0 } vec2       rg8_snorm        
[   0.505][d][vo/gpu-next/libplacebo]     rgba8                UNORM  4    RGBA SsLRbBVutHWG n   {8  8  8  8 } {8  8  8  8 } vec4       rgba8      AB24  
[   0.505][d][vo/gpu-next/libplacebo]     rgba8s               SNORM  4    RGBA SsLRbBVutHWG n   {8  8  8  8 } {8  8  8  8 } vec4       rgba8_snorm       
[   0.505][d][vo/gpu-next/libplacebo]     bgra8                UNORM  4    BGRA SsLRbBVutHWG n   {8  8  8  8 } {8  8  8  8 } vec4       rgba8      AR24  
[   0.505][d][vo/gpu-next/libplacebo]     rgb10a2              UNORM  4    RGBA SsLRbBVutHWG n   {10 10 10 2 } {10 10 10 2 } vec4       rgb10_a2   AB30  
[   0.505][d][vo/gpu-next/libplacebo]     rg11b10f             FLOAT  4    RGB  SsLRbBVutHWG n   {11 11 10 0 } {11 11 10 0 } vec3       r11f_g11f_b10f       
[   0.505][d][vo/gpu-next/libplacebo]     r16                  UNORM  2    R    SsLRbBVutHWG n   {16 0  0  0 } {16 0  0  0 } float      r16        R16   
[   0.505][d][vo/gpu-next/libplacebo]     r16hf                FLOAT  2    R    SsLRbBVutHWG n   {16 0  0  0 } {16 0  0  0 } float      r16f             
[   0.505][d][vo/gpu-next/libplacebo]     r16s                 SNORM  2    R    SsLRbBVutHWG n   {16 0  0  0 } {16 0  0  0 } float      r16_snorm        
[   0.505][d][vo/gpu-next/libplacebo]     rg16                 UNORM  4    RG   SsLRbBVutHWG n   {16 16 0  0 } {16 16 0  0 } vec2       rg16       GR32  
[   0.505][d][vo/gpu-next/libplacebo]     rg16hf               FLOAT  4    RG   SsLRbBVutHWG n   {16 16 0  0 } {16 16 0  0 } vec2       rg16f            
[   0.505][d][vo/gpu-next/libplacebo]     rg16s                SNORM  4    RG   SsLRbBVutHWG n   {16 16 0  0 } {16 16 0  0 } vec2       rg16_snorm       
[   0.505][d][vo/gpu-next/libplacebo]     rgba16               UNORM  8    RGBA SsLRbBVutHWG n   {16 16 16 16} {16 16 16 16} vec4       rgba16     AB48  
[   0.505][d][vo/gpu-next/libplacebo]     rgba16hf             FLOAT  8    RGBA SsLRbBVutHWG n   {16 16 16 16} {16 16 16 16} vec4       rgba16f    AB4H  
[   0.505][d][vo/gpu-next/libplacebo]     rgba16s              SNORM  8    RGBA SsLRbBVutHWG n   {16 16 16 16} {16 16 16 16} vec4       rgba16_snorm       
[   0.505][d][vo/gpu-next/libplacebo]     r32f                 FLOAT  4    R    SsLRbBVutHWG n   {32 0  0  0 } {32 0  0  0 } float      r32f             
[   0.505][d][vo/gpu-next/libplacebo]     rg32f                FLOAT  8    RG   SsLRbBVutHWG n   {32 32 0  0 } {32 32 0  0 } vec2       rg32f            
[   0.505][d][vo/gpu-next/libplacebo]     rgba32f              FLOAT  16   RGBA SsLRbBVutHWG n   {32 32 32 32} {32 32 32 32} vec4       rgba32f          
[   0.505][d][vo/gpu-next/libplacebo]     bgr5a1               UNORM  2    BGRA S-LRb----H-G n   {5  5  5  1 } {5  5  5  1 }                       AR15  
[   0.505][d][vo/gpu-next/libplacebo]     bgr565               UNORM  2    BGR  S-LRb----H-G n   {5  6  5  0 } {5  6  5  0 }                       RG16  
[   0.505][d][vo/gpu-next/libplacebo]     bgrx8                UNORM  4    BGR  S-LRb-Vu-H-G n   {8  8  8  0 } {8  8  8  0 } vec3                        
[   0.505][d][vo/gpu-next/libplacebo]     r8i                  SINT   1    R    -s-R-BVutHW- n   {8  0  0  0 } {8  0  0  0 } int        r8i              
[   0.505][d][vo/gpu-next/libplacebo]     r8u                  UINT   1    R    -s-R-BVutHW- n   {8  0  0  0 } {8  0  0  0 } uint       r8ui             
[   0.505][d][vo/gpu-next/libplacebo]     rg8i                 SINT   2    RG   -s-R-BVutHW- n   {8  8  0  0 } {8  8  0  0 } ivec2      rg8i             
[   0.505][d][vo/gpu-next/libplacebo]     rg8u                 UINT   2    RG   -s-R-BVutHW- n   {8  8  0  0 } {8  8  0  0 } uvec2      rg8ui            
[   0.505][d][vo/gpu-next/libplacebo]     rgba8i               SINT   4    RGBA -s-R-BVutHW- n   {8  8  8  8 } {8  8  8  8 } ivec4      rgba8i           
[   0.505][d][vo/gpu-next/libplacebo]     rgba8u               UINT   4    RGBA -s-R-BVutHW- n   {8  8  8  8 } {8  8  8  8 } uvec4      rgba8ui          
[   0.505][d][vo/gpu-next/libplacebo]     rgb10a2u             UINT   4    RGBA -s-R-BVutHW- n   {10 10 10 2 } {10 10 10 2 } uvec4      rgb10_a2ui       
[   0.505][d][vo/gpu-next/libplacebo]     r16i                 SINT   2    R    -s-R-BVutHW- n   {16 0  0  0 } {16 0  0  0 } int        r16i             
[   0.505][d][vo/gpu-next/libplacebo]     r16u                 UINT   2    R    -s-R-BVutHW- n   {16 0  0  0 } {16 0  0  0 } uint       r16ui            
[   0.505][d][vo/gpu-next/libplacebo]     rg16i                SINT   4    RG   -s-R-BVutHW- n   {16 16 0  0 } {16 16 0  0 } ivec2      rg16i            
[   0.505][d][vo/gpu-next/libplacebo]     rg16u                UINT   4    RG   -s-R-BVutHW- n   {16 16 0  0 } {16 16 0  0 } uvec2      rg16ui           
[   0.505][d][vo/gpu-next/libplacebo]     rgba16i              SINT   8    RGBA -s-R-BVutHW- n   {16 16 16 16} {16 16 16 16} ivec4      rgba16i          
[   0.505][d][vo/gpu-next/libplacebo]     rgba16u              UINT   8    RGBA -s-R-BVutHW- n   {16 16 16 16} {16 16 16 16} uvec4      rgba16ui         
[   0.505][d][vo/gpu-next/libplacebo]     r32i                 SINT   4    R    -s-R-BVutHW- n   {32 0  0  0 } {32 0  0  0 } int        r32i             
[   0.505][d][vo/gpu-next/libplacebo]     r32u                 UINT   4    R    -s-R-BVutHW- n   {32 0  0  0 } {32 0  0  0 } uint       r32ui            
[   0.505][d][vo/gpu-next/libplacebo]     rg32i                SINT   8    RG   -s-R-BVutHW- n   {32 32 0  0 } {32 32 0  0 } ivec2      rg32i            
[   0.505][d][vo/gpu-next/libplacebo]     rg32u                UINT   8    RG   -s-R-BVutHW- n   {32 32 0  0 } {32 32 0  0 } uvec2      rg32ui           
[   0.505][d][vo/gpu-next/libplacebo]     rgba32i              SINT   16   RGBA -s-R-BVutHW- n   {32 32 32 32} {32 32 32 32} ivec4      rgba32i          
[   0.505][d][vo/gpu-next/libplacebo]     rgba32u              UINT   16   RGBA -s-R-BVutHW- n   {32 32 32 32} {32 32 32 32} uvec4      rgba32ui         
[   0.505][d][vo/gpu-next/libplacebo]     bgra4                UNORM  2    BGRA S-L------H-G n   {4  4  4  4 } {4  4  4  4 }                       AR12  
[   0.505][d][vo/gpu-next/libplacebo]     rgb32f               FLOAT  12   RGB  S-----Vu-H-- n   {32 32 32 0 } {32 32 32 0 } vec3                        
[   0.505][d][vo/gpu-next/libplacebo]     rgb32i               SINT   12   RGB  ------Vu-H-- n   {32 32 32 0 } {32 32 32 0 } ivec3                       
[   0.505][d][vo/gpu-next/libplacebo]     rgb32u               UINT   12   RGB  ------Vu-H-- n   {32 32 32 0 } {32 32 32 0 } uvec3                       
[   0.505][d][vo/gpu-next/libplacebo]     rgb8                 UNORM  3    RGB  SsLRbBVutHWG y   {8  8  8  0 } {8  8  8  0 } vec3                  BG24  
[   0.505][d][vo/gpu-next/libplacebo]     rgb16                UNORM  6    RGB  SsLRbBVutHWG y   {16 16 16 0 } {16 16 16 0 } vec3                        
[   0.505][d][vo/gpu-next/libplacebo]     rgb16hf              FLOAT  6    RGB  SsLRbBVutHWG y   {16 16 16 0 } {16 16 16 0 } vec3                        
[   0.505][d][vo/gpu-next/libplacebo]     r16f                 FLOAT  4    R    SsLRbBVutHWG y   {16 0  0  0 } {32 0  0  0 } float      r16f             
[   0.505][d][vo/gpu-next/libplacebo]     rg16f                FLOAT  8    RG   SsLRbBVutHWG y   {16 16 0  0 } {32 32 0  0 } vec2       rg16f            
[   0.505][d][vo/gpu-next/libplacebo]     rgb16f               FLOAT  12   RGB  SsLRbBVutHWG y   {16 16 16 0 } {32 32 32 0 } vec3                        
[   0.505][d][vo/gpu-next/libplacebo]     rgba16f              FLOAT  16   RGBA SsLRbBVutHWG y   {16 16 16 16} {32 32 32 32} vec4       rgba16f          
[   0.505][v][vo/gpu-next/libplacebo] Using flip-model presentation
[   0.505][v][vo/gpu-next/libplacebo] Initial swap chain configuration: format: R10G10B10A2_UNORM, color space: RGB_FULL_G22_NONE_P709.
[   0.505][d][global] cache path: '' -> 'C:\Users\feng\AppData\Local/mpv/cache'
[   0.505][d][global] cache path: '' -> 'C:\Users\feng\AppData\Local/mpv/cache'
[   0.505][d][vo/gpu-next] Render options updated, resetting render state.
[   0.506][v][vo/gpu-next/win32] DPI detected from the new API: 144
[   0.506][v][vo/gpu-next/win32] display-fps: 59.951000
[   0.507][v][vo/gpu-next/win32] color-profile: C:\WINDOWS\system32\spool\drivers\color\sRGB Color Space Profile.icm
[   0.507][v][vo/gpu-next] Assuming 59.951000 FPS for display sync.
[   0.508][v][vd] Container reported FPS: 59.940212
[   0.508][v][vd] Codec list:
[   0.508][v][vd]     h264 - H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
[   0.508][v][vd]     h264_qsv (h264) - H264 video (Intel Quick Sync Video acceleration)
[   0.508][v][vd]     h264_amf (h264) - H264 AMD AMF video decoder
[   0.508][v][vd]     h264_cuvid (h264) - Nvidia CUVID H264 decoder
[   0.508][v][vd] Opening decoder h264
[   0.508][v][vd] Looking at hwdec h264-nvdec-copy...
[   0.560][v][vd] Trying hardware decoding via h264-nvdec-copy.
[   0.561][v][vd] Requesting 4 threads for decoding.
[   0.561][v][vd] Selected decoder: h264 - H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
[   0.561][v][vf] User filter list:
[   0.561][v][vf]   (empty)
[   0.561][v][ad] Codec list:
[   0.561][v][ad]     aac - AAC (Advanced Audio Coding)
[   0.561][v][ad]     aac_fixed (aac) - AAC (Advanced Audio Coding)
[   0.561][v][ad] Opening decoder aac
[   0.562][v][ad] Requesting 1 threads for decoding.
[   0.562][v][ad] Selected decoder: aac - AAC (Advanced Audio Coding)
[   0.562][v][af] User filter list:
[   0.562][v][af]   (empty)
[   0.562][v][sub/ass] Using subtitle decoder srt
[   0.563][d][global] config path: 'fonts' -> 'C:\Users\feng\AppData\Roaming/mpv/fonts'
[   0.563][d][sub/ass] ASS library version: 0x1704000 (runtime 0x1704000)
[   0.563][v][sub/ass] libass API version: 0x1704000
[   0.563][v][sub/ass] libass source: meson, commit: 0.17.4-15-g534a5f8299c5ab3c2782856fcb843bfea47b7afc
[   0.563][v][sub/ass] Shaper: FriBidi 1.0.16 (SIMPLE) HarfBuzz-ng 11.4.1 (COMPLEX)
[   0.563][d][global] config path: 'subfont.ttf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/subfont.ttf'
[   0.563][d][global] config path: 'subfont.ttf' -/-> 'C:/soft/mpv/subfont.ttf'
[   0.563][d][global] config path: 'subfont.ttf' -/-> 'C:/soft/mpv/mpv/subfont.ttf'
[   0.563][d][global] config path: 'fonts.conf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/fonts.conf'
[   0.563][d][global] config path: 'fonts.conf' -/-> 'C:/soft/mpv/fonts.conf'
[   0.563][d][global] config path: 'fonts.conf' -> 'C:/soft/mpv/mpv/fonts.conf'
[   0.563][v][sub/ass] Setting up fonts...
[   0.564][v][sub/ass] Loading font file 'C:\Users\feng\AppData\Roaming/mpv/fonts\fluent-system-icons.ttf'
[   0.565][v][sub/ass] Loading font file 'C:\Users\feng\AppData\Roaming/mpv/fonts\material-design-icons.ttf'
[   0.566][v][sub/ass] Using font provider directwrite (with GDI)
[   0.566][v][sub/ass] Done.
[   0.566][v][cplayer] Starting playback...
[   0.566][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.566][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.566][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.566][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.567][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.567][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.567][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.567][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[   0.567][v][lavf] queuing seek to 9661.827711
[   0.567][v][lavf] queuing seek to 9661.827711 (cascade)
[   0.567][v][lavf] execute seek (to 9661.827711 flags 0)
[   0.567][v][lavf] seek done
[   0.567][v][lavf] execute seek (to 9661.827711 flags 32)
[   0.567][v][cplayer] hr-seek, skipping to 9661.827711
[   0.567][v][lavf] queuing seek to -0.000000
[   0.567][v][lavf] execute seek (to -0.000000 flags 0)
[   0.567][v][lavf] seek done
[   0.567][d][lavf] stream 0: resize index to 128
[   0.568][d][lavf] stream 0: resize index to 256
[   0.568][d][lavf] stream 0: resize index to 512
[   0.569][v][lavf] seek done
[   0.569][v][file] stream level seek from 29930445047 to 28155564348
[   0.569][d][lavf] stream 0: resize index to 1024
[   0.570][d][lavf] stream 0: resize index to 2048
[   0.571][v][lavf] EOF reached.
[   0.572][d][modernz] osc_init
[   0.572][d][global] config path: 'fonts' -> 'C:\Users\feng\AppData\Roaming/mpv/fonts'
[   0.572][d][osd/libass] ASS library version: 0x1704000 (runtime 0x1704000)
[   0.572][v][osd/libass] libass API version: 0x1704000
[   0.572][v][osd/libass] libass source: meson, commit: 0.17.4-15-g534a5f8299c5ab3c2782856fcb843bfea47b7afc
[   0.572][v][osd/libass] Shaper: FriBidi 1.0.16 (SIMPLE) HarfBuzz-ng 11.4.1 (COMPLEX)
[   0.573][d][global] config path: 'subfont.ttf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/subfont.ttf'
[   0.573][d][global] config path: 'subfont.ttf' -/-> 'C:/soft/mpv/subfont.ttf'
[   0.573][d][global] config path: 'subfont.ttf' -/-> 'C:/soft/mpv/mpv/subfont.ttf'
[   0.573][d][global] config path: 'fonts.conf' -/-> 'C:\Users\feng\AppData\Roaming/mpv/fonts.conf'
[   0.573][d][global] config path: 'fonts.conf' -/-> 'C:/soft/mpv/fonts.conf'
[   0.573][d][global] config path: 'fonts.conf' -> 'C:/soft/mpv/mpv/fonts.conf'
[   0.573][v][osd/libass] Setting up fonts...
[   0.573][v][osd/libass] Loading font file 'C:\Users\feng\AppData\Roaming/mpv/fonts\fluent-system-icons.ttf'
[   0.574][v][osd/libass] Loading font file 'C:\Users\feng\AppData\Roaming/mpv/fonts\material-design-icons.ttf'
[   0.575][v][osd/libass] Using font provider directwrite (with GDI)
[   0.575][v][osd/libass] Done.
[   0.576][v][af] [in] 48000Hz stereo 2ch floatp
[   0.576][v][af] [userspeed] 48000Hz stereo 2ch floatp
[   0.576][v][af] [userspeed] (disabled)
[   0.576][v][af] [convert] 48000Hz stereo 2ch floatp
[   0.576][v][ao] Trying audio driver 'wasapi'
[   0.576][v][ao/wasapi] requested format: 48000 Hz, stereo channels, floatp
[   0.576][d][ao/wasapi] Init wasapi
[   0.576][d][ao/wasapi] Find device ''
[   0.578][d][lavf] stream 1: resize index to 128
[   0.578][v][ao/wasapi] No device specified. Selecting default.
[   0.579][v][ao/wasapi] Selecting device '{87e9e401-1ab9-4941-8d30-7db3f0ec007b}' (扬声器 (Realtek(R) Audio))
[   0.579][v][ao/wasapi] Monitoring changes in device {0.0.0.00000000}.{87e9e401-1ab9-4941-8d30-7db3f0ec007b}
[   0.580][d][ao/wasapi] Init wasapi thread
[   0.581][d][ao/wasapi] Activating pAudioClient interface
[   0.583][d][ao/wasapi] Probing formats
[   0.589][v][ao/wasapi] Trying stereo float (32/32 bits) @ 48000hz (shared) -> ok
[   0.589][v][ao/wasapi] Accepted as stereo float @ 48000hz -> stereo float (32/32 bits) @ 48000hz (shared)
[   0.589][d][ao/wasapi] Fixing format
[   0.589][d][ao/wasapi] IAudioClient::GetDevicePeriod
[   0.590][v][ao/wasapi] Device period: default 10000 us, minimum 3000 us
[   0.590][d][ao/wasapi] IAudioClient::Initialize
[   0.601][d][lavf] stream 0: resize index to 128
[   0.616][d][ao/wasapi] IAudioClient::Initialize pRenderClient
[   0.616][d][ao/wasapi] IAudioClient::Initialize IAudioClient_SetEventHandle
[   0.616][d][ao/wasapi] IAudioClient::Initialize IAudioClient_GetBufferSize
[   0.616][v][ao/wasapi] Buffer frame count: 1056 (22000 us)
[   0.616][v][ao/wasapi] IAudioClock::GetFrequency gave a frequency of 384000.
[   0.616][d][ao/wasapi] IAudioClient::Initialize pAudioVolume
[   0.616][d][ao/wasapi] Entering dispatch loop
[   0.616][d][ao/wasapi] Init wasapi done
[   0.616][v][ao/wasapi] device buffer: 1056 samples.
[   0.616][v][ao/wasapi] using soft-buffer of 9600 samples.
[   0.616][i][cplayer] AO: [wasapi] 48000Hz stereo 2ch float
[   0.616][v][cplayer] AO: Description: Windows WASAPI audio output (event mode)
[   0.617][v][autoconvert] inserting resampler
[   0.617][v][swresample] format change, reinitializing resampler
[   0.617][v][swresample] 48000Hz stereo floatp -> 48000Hz stereo float
[   0.617][v][af] [out] 48000Hz stereo 2ch float
[   0.617][v][vd] Pixel formats supported by decoder: vulkan cuda dxva2_vld d3d11va_vld d3d11 d3d12 vaapi yuv420p
[   0.617][v][vd] Codec profile: Main (0x4d)
[   0.617][v][vd] Requesting pixfmt 'cuda' from decoder.
[   0.620][d][ffmpeg/video] h264: NVDEC capabilities:
[   0.620][d][ffmpeg/video] h264: format supported: yes, max_mb_count: 65536
[   0.620][d][ffmpeg/video] h264: min_width: 48, max_width: 4096
[   0.620][d][ffmpeg/video] h264: min_height: 16, max_height: 4096
[   0.657][d][ffmpeg/video] h264: Reinit context to 3840x2160, pix_fmt: cuda
[   0.679][i][vd] Using hardware decoding (nvdec-copy).
[   0.679][v][vd] Decoder format: 3840x2160 nv12 bt.709/bt.709/bt.1886/limited/auto CL=mpeg2/4/h264 crop=3840x2160+0+0 A=none
[   0.679][v][vd] Using container aspect ratio.
[   0.679][v][vf] [in] 3840x2160 nv12 bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=3840x2160+0+0 A=none
[   0.679][v][vf] [userdeint] 3840x2160 nv12 bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=3840x2160+0+0 A=none
[   0.679][v][vf] [userdeint] (disabled)
[   0.679][v][vf] [autovflip] 3840x2160 nv12 bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=3840x2160+0+0 A=none
[   0.679][v][vf] [autovflip] (disabled)
[   0.679][v][vf] [autorotate] 3840x2160 nv12 bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=3840x2160+0+0 A=none
[   0.679][v][vf] [autorotate] (disabled)
[   0.679][v][vf] [convert] 3840x2160 nv12 bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=3840x2160+0+0 A=none
[   0.679][v][vf] [convert] (disabled)
[   0.679][v][vf] [out] 3840x2160 nv12 bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=3840x2160+0+0 A=none
[   0.679][v][cplayer] Set property: user-data/osc/margins={"r":0,"t":0,"l":0,"b":0} -> 1
[   0.712][d][modernz] osc_init
[   0.746][v][cplayer] Set property: user-data/osc/margins={"r":0,"t":0,"l":0,"b":0} -> 1
[   0.748][i][cplayer] VO: [gpu-next] 3840x2160 nv12
[   0.748][v][cplayer] VO: Description: Video output based on libplacebo
[   0.748][v][vo/gpu-next] reconfig to 3840x2160 nv12 bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=3840x2160+0+0 A=none
[   0.748][d][vo/gpu-next] max content size: 2538x1312
[   0.748][d][vo/gpu-next] monitor size: 2560x1440
[   0.748][v][vo/gpu-next/win32] reset window bounds: 114:45:2332:1312
[   0.748][v][vo/gpu-next/win32] resize window: 2332:1312
[   0.761][v][vo/gpu-next/win32] resize window: 2332:1312
[   0.765][v][vo/gpu-next] Window size: 2332x1312 (Borders: l=0 t=0 r=0 b=0)
[   0.765][v][vo/gpu-next] Video source: 3840x2160 (1:1)
[   0.765][v][vo/gpu-next] Video display: (0, 0) 3840x2160 -> (0, 0) 2332x1312
[   0.765][v][vo/gpu-next] Video scale: 0.607292/0.607407
[   0.765][v][vo/gpu-next] OSD borders: l=0 t=0 r=0 b=0
[   0.765][v][vo/gpu-next] Video borders: l=0 t=0 r=0 b=0
[   0.765][v][vo/gpu-next/libplacebo] Attempting to reconfigure swap chain format: R8G8B8A8_UNORM -> R10G10B10A2_UNORM
[   0.773][v][vo/gpu-next] Window size: 2332x1312 (Borders: l=0 t=0 r=0 b=0)
[   0.773][v][vo/gpu-next] Video source: 3840x2160 (1:1)
[   0.773][v][vo/gpu-next] Video display: (0, 0) 3840x2160 -> (0, 0) 2332x1312
[   0.773][v][vo/gpu-next] Video scale: 0.607292/0.607407
[   0.773][v][vo/gpu-next] OSD borders: l=0 t=0 r=0 b=0
[   0.773][v][vo/gpu-next] Video borders: l=0 t=0 r=0 b=0
[   0.773][d][vo/gpu-next/libplacebo] First frame received with non-zero PTS 9661.827711
[   0.776][d][vo/gpu-next/libplacebo] (Re)creating 3840x2160x0 texture with format r8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   0.778][d][vo/gpu-next/libplacebo] (Re)creating 1920x1080x0 texture with format rg8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   0.780][d][vo/gpu-next/libplacebo] (Re)creating 1920x1080x0 texture with format rg16hf: src/renderer.c:1830
[   0.780][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.780][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.780][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.780][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.780][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _8002;
[   0.780][d][vo/gpu-next/libplacebo] [  5] layout(std140, binding=1) uniform _8010 {
[   0.780][d][vo/gpu-next/libplacebo] [  6]     layout(offset=0) vec2 _8004;
[   0.780][d][vo/gpu-next/libplacebo] [  7]     layout(offset=8) uint _8007;
[   0.780][d][vo/gpu-next/libplacebo] [  8] };
[   0.780][d][vo/gpu-next/libplacebo] [  9] layout(location=0) in vec2 _8011;
[   0.780][d][vo/gpu-next/libplacebo] [ 10] layout(location=0) out vec2 _8003;
[   0.780][d][vo/gpu-next/libplacebo] [ 11] layout(location=1) in vec2 _8012;
[   0.780][d][vo/gpu-next/libplacebo] [ 12] void main() {
[   0.780][d][vo/gpu-next/libplacebo] [ 13] _8003 = _8011;
[   0.780][d][vo/gpu-next/libplacebo] [ 14] vec2 va_pos = _8012; 
[   0.780][d][vo/gpu-next/libplacebo] [ 15] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.780][d][vo/gpu-next/libplacebo] [ 16] }
[   0.780][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.780][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.780][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.780][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.780][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _8002;
[   0.780][d][vo/gpu-next/libplacebo] [  5] layout(std140, binding=1) uniform _8010 {
[   0.780][d][vo/gpu-next/libplacebo] [  6]     layout(offset=0) vec2 _8004;
[   0.780][d][vo/gpu-next/libplacebo] [  7]     layout(offset=8) uint _8007;
[   0.780][d][vo/gpu-next/libplacebo] [  8] };
[   0.780][d][vo/gpu-next/libplacebo] [  9] layout(location=0) in vec2 _8003;
[   0.780][d][vo/gpu-next/libplacebo] [ 10] layout(location=0) out vec4 out_color;
[   0.780][d][vo/gpu-next/libplacebo] [ 11] #define prng_t uvec3
[   0.780][d][vo/gpu-next/libplacebo] [ 12] 
[   0.780][d][vo/gpu-next/libplacebo] [ 13] vec3 _8005(inout uvec3 s) {                    
[   0.780][d][vo/gpu-next/libplacebo] [ 14]     s = 1664525u * s + uvec3(1013904223u);   
[   0.780][d][vo/gpu-next/libplacebo] [ 15]     s.x += s.y * s.z;                        
[   0.780][d][vo/gpu-next/libplacebo] [ 16]     s.y += s.z * s.x;                        
[   0.780][d][vo/gpu-next/libplacebo] [ 17]     s.z += s.x * s.y;                        
[   0.780][d][vo/gpu-next/libplacebo] [ 18]     s ^= s >> 16u;                           
[   0.780][d][vo/gpu-next/libplacebo] [ 19]     s.x += s.y * s.z;                        
[   0.780][d][vo/gpu-next/libplacebo] [ 20]     s.y += s.z * s.x;                        
[   0.780][d][vo/gpu-next/libplacebo] [ 21]     s.z += s.x * s.y;                        
[   0.780][d][vo/gpu-next/libplacebo] [ 22]     return vec3(s) * 1.0/float(0xFFFFFFFFu); 
[   0.780][d][vo/gpu-next/libplacebo] [ 23] }                                            
[   0.780][d][vo/gpu-next/libplacebo] [ 24] #define _8008 (_8005(_8006))
[   0.780][d][vo/gpu-next/libplacebo] [ 25] const float _8009 = float(12); 
[   0.780][d][vo/gpu-next/libplacebo] [ 26] const float _800a = float(0.0009765625); 
[   0.780][d][vo/gpu-next/libplacebo] [ 27] const float _800b = float(0.501960813999176); 
[   0.780][d][vo/gpu-next/libplacebo] [ 28] const float _800c = float(0.501960813999176); 
[   0.780][d][vo/gpu-next/libplacebo] [ 29] const float _800d = float(0.0009765625); 
[   0.780][d][vo/gpu-next/libplacebo] [ 30] const float _800e = float(1); 
[   0.780][d][vo/gpu-next/libplacebo] [ 31] vec4 _8001() {
[   0.780][d][vo/gpu-next/libplacebo] [ 32] vec4 color;                       
[   0.780][d][vo/gpu-next/libplacebo] [ 33] // pl_shader_deband               
[   0.780][d][vo/gpu-next/libplacebo] [ 34] {                                 
[   0.780][d][vo/gpu-next/libplacebo] [ 35] vec2 pos = _8003, pt = _8004;         
[   0.780][d][vo/gpu-next/libplacebo] [ 36] color = textureLod(_8002, pos, 0.0);
[   0.780][d][vo/gpu-next/libplacebo] [ 37] #define GET(X, Y)                                   \
[   0.780][d][vo/gpu-next/libplacebo] [ 38]     (textureLod(_8002, pos + pt * vec2(X, Y), 0.0).rg)  
[   0.780][d][vo/gpu-next/libplacebo] [ 39] #define T vec2                                          
[   0.780][d][vo/gpu-next/libplacebo] [ 40] uvec3 _8006 = uvec3(gl_FragCoord.xy, _8007); 
[   0.780][d][vo/gpu-next/libplacebo] [ 41] T avg, diff, bound;   
[   0.780][d][vo/gpu-next/libplacebo] [ 42] T res = color.rg;     
[   0.780][d][vo/gpu-next/libplacebo] [ 43] vec2 d;               
[   0.780][d][vo/gpu-next/libplacebo] [ 44] d = _8008.xy * vec2(1.0 * _8009, 6.283185307179586);    
[   0.780][d][vo/gpu-next/libplacebo] [ 45] d = d.x * vec2(cos(d.y), sin(d.y));   
[   0.780][d][vo/gpu-next/libplacebo] [ 46] avg = T(0.0);                         
[   0.780][d][vo/gpu-next/libplacebo] [ 47] avg += GET(+d.x, +d.y);               
[   0.780][d][vo/gpu-next/libplacebo] [ 48] avg += GET(-d.x, +d.y);               
[   0.780][d][vo/gpu-next/libplacebo] [ 49] avg += GET(-d.x, -d.y);               
[   0.780][d][vo/gpu-next/libplacebo] [ 50] avg += GET(+d.x, -d.y);               
[   0.780][d][vo/gpu-next/libplacebo] [ 51] avg *= 0.25;                          
[   0.780][d][vo/gpu-next/libplacebo] [ 52] diff = abs(res - avg);                
[   0.780][d][vo/gpu-next/libplacebo] [ 53] bound = T(_800a / 1.0);                
[   0.780][d][vo/gpu-next/libplacebo] [ 54] res = mix(avg, res, greaterThan(diff, bound)); 
[   0.780][d][vo/gpu-next/libplacebo] [ 55] d = _8008.xy * vec2(2.0 * _8009, 6.283185307179586);    
[   0.780][d][vo/gpu-next/libplacebo] [ 56] d = d.x * vec2(cos(d.y), sin(d.y));   
[   0.780][d][vo/gpu-next/libplacebo] [ 57] avg = T(0.0);                         
[   0.780][d][vo/gpu-next/libplacebo] [ 58] avg += GET(+d.x, +d.y);               
[   0.780][d][vo/gpu-next/libplacebo] [ 59] avg += GET(-d.x, +d.y);               
[   0.780][d][vo/gpu-next/libplacebo] [ 60] avg += GET(-d.x, -d.y);               
[   0.780][d][vo/gpu-next/libplacebo] [ 61] avg += GET(+d.x, -d.y);               
[   0.781][d][vo/gpu-next/libplacebo] [ 62] avg *= 0.25;                          
[   0.781][d][vo/gpu-next/libplacebo] [ 63] diff = abs(res - avg);                
[   0.781][d][vo/gpu-next/libplacebo] [ 64] bound = T(_800a / 2.0);                
[   0.781][d][vo/gpu-next/libplacebo] [ 65] res = mix(avg, res, greaterThan(diff, bound)); 
[   0.781][d][vo/gpu-next/libplacebo] [ 66] bound = T(
[   0.781][d][vo/gpu-next/libplacebo] [ 67]  _800b,_800c);                                        
[   0.781][d][vo/gpu-next/libplacebo] [ 68] T strength = min(abs(res - bound), _800d);  
[   0.781][d][vo/gpu-next/libplacebo] [ 69] res += strength * (T(_8008) - T(0.5));      
[   0.781][d][vo/gpu-next/libplacebo] [ 70] color.rg = res;   
[   0.781][d][vo/gpu-next/libplacebo] [ 71] color *= _800e;     
[   0.781][d][vo/gpu-next/libplacebo] [ 72] #undef T          
[   0.781][d][vo/gpu-next/libplacebo] [ 73] #undef GET        
[   0.781][d][vo/gpu-next/libplacebo] [ 74] }                 
[   0.781][d][vo/gpu-next/libplacebo] [ 75] return color;
[   0.781][d][vo/gpu-next/libplacebo] [ 76] }
[   0.781][d][vo/gpu-next/libplacebo] [ 77] 
[   0.781][d][vo/gpu-next/libplacebo] [ 78] void main() {
[   0.781][d][vo/gpu-next/libplacebo] [ 79] out_color = _8001();
[   0.781][d][vo/gpu-next/libplacebo] [ 80] }
[   0.781][d][vo/gpu-next] cache_load_obj: key(53889f2bd5f8f00e), size(4449), load time(0.196 ms)
[   0.781][d][vo/gpu-next/libplacebo] Using cached DXBC shaders
[   0.781][d][vo/gpu-next] cache_save_obj: key(53889f2bd5f8f00e), size(4449)
[   0.782][d][vo/gpu-next/libplacebo] LUT invalidated, regenerating..
[   0.782][d][vo/gpu-next/libplacebo] Spent 0.002 ms generating shader LUT
[   0.783][d][vo/gpu-next/libplacebo] (Re)creating 3840x2160x0 texture with format rgb16hf: src/renderer.c:2029
[   0.784][d][vo/gpu-next/libplacebo] compute shader source:
[   0.784][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.784][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_compute_shader : enable
[   0.784][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_shader_image_load_store : enable
[   0.784][d][vo/gpu-next/libplacebo] [  4] #extension GL_ARB_uniform_buffer_object : enable
[   0.784][d][vo/gpu-next/libplacebo] [  5] #extension GL_EXT_shader_image_load_formatted : enable
[   0.784][d][vo/gpu-next/libplacebo] [  6] #extension GL_ARB_texture_gather : enable
[   0.784][d][vo/gpu-next/libplacebo] [  7] layout(binding=0) uniform  sampler2D _2;
[   0.784][d][vo/gpu-next/libplacebo] [  8] layout(binding=1) uniform  sampler2D _c002;
[   0.784][d][vo/gpu-next/libplacebo] [  9] layout(binding=2) uniform  sampler1D _c007;
[   0.784][d][vo/gpu-next/libplacebo] [ 10] layout(binding=3) writeonly restrict uniform image2D _4013;
[   0.784][d][vo/gpu-next/libplacebo] [ 11] layout(std140, binding=4) uniform _4015 {
[   0.784][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=0) vec2 _4;
[   0.784][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=8) uint _7;
[   0.784][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=16) vec2 _c004;
[   0.784][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=32) mat3 _4006;
[   0.784][d][vo/gpu-next/libplacebo] [ 16]     layout(offset=80) vec3 _4007;
[   0.784][d][vo/gpu-next/libplacebo] [ 17]     layout(offset=96) vec2 _400a;
[   0.784][d][vo/gpu-next/libplacebo] [ 18]     layout(offset=104) vec2 _400b;
[   0.784][d][vo/gpu-next/libplacebo] [ 19]     layout(offset=112) vec2 _400c;
[   0.784][d][vo/gpu-next/libplacebo] [ 20]     layout(offset=120) vec2 _400d;
[   0.784][d][vo/gpu-next/libplacebo] [ 21]     layout(offset=128) vec2 _400e;
[   0.784][d][vo/gpu-next/libplacebo] [ 22]     layout(offset=136) vec2 _400f;
[   0.784][d][vo/gpu-next/libplacebo] [ 23]     layout(offset=144) vec2 _4010;
[   0.784][d][vo/gpu-next/libplacebo] [ 24]     layout(offset=152) vec2 _4011;
[   0.784][d][vo/gpu-next/libplacebo] [ 25]     layout(offset=160) vec2 _4012;
[   0.784][d][vo/gpu-next/libplacebo] [ 26]     layout(offset=168) ivec2 _4014;
[   0.784][d][vo/gpu-next/libplacebo] [ 27] };
[   0.784][d][vo/gpu-next/libplacebo] [ 28] layout (local_size_x = 32, local_size_y = 32) in;
[   0.784][d][vo/gpu-next/libplacebo] [ 29] #define prng_t uvec3
[   0.784][d][vo/gpu-next/libplacebo] [ 30] #define frag_pos(id) (vec2(id) + vec2(0.5))  
[   0.784][d][vo/gpu-next/libplacebo] [ 31] #define frag_map(id) (_400a * frag_pos(id))    
[   0.784][d][vo/gpu-next/libplacebo] [ 32] #define gl_FragCoord vec4(frag_pos(gl_GlobalInvocationID), 0.0, 1.0) 
[   0.784][d][vo/gpu-next/libplacebo] [ 33] #define _3_map(id) (mix(mix(_400b, _400c, frag_map(id).x),      mix(_400d, _400e, frag_map(id).x), frag_map(id).y)) 
[   0.784][d][vo/gpu-next/libplacebo] [ 34] #define _3 (_3_map(gl_GlobalInvocationID)) 
[   0.784][d][vo/gpu-next/libplacebo] [ 35] #define _c003_map(id) (mix(mix(_400f, _4010, frag_map(id).x),      mix(_4011, _4012, frag_map(id).x), frag_map(id).y)) 
[   0.784][d][vo/gpu-next/libplacebo] [ 36] #define _c003 (_c003_map(gl_GlobalInvocationID)) 
[   0.784][d][vo/gpu-next/libplacebo] [ 37] 
[   0.784][d][vo/gpu-next/libplacebo] [ 38] const float _4002 = float(0.062745101749897); 
[   0.784][d][vo/gpu-next/libplacebo] [ 39] const float _4003 = float(0.501960813999176); 
[   0.784][d][vo/gpu-next/libplacebo] [ 40] vec3 _5(inout uvec3 s) {                    
[   0.784][d][vo/gpu-next/libplacebo] [ 41]     s = 1664525u * s + uvec3(1013904223u);   
[   0.784][d][vo/gpu-next/libplacebo] [ 42]     s.x += s.y * s.z;                        
[   0.784][d][vo/gpu-next/libplacebo] [ 43]     s.y += s.z * s.x;                        
[   0.784][d][vo/gpu-next/libplacebo] [ 44]     s.z += s.x * s.y;                        
[   0.784][d][vo/gpu-next/libplacebo] [ 45]     s ^= s >> 16u;                           
[   0.784][d][vo/gpu-next/libplacebo] [ 46]     s.x += s.y * s.z;                        
[   0.784][d][vo/gpu-next/libplacebo] [ 47]     s.y += s.z * s.x;                        
[   0.784][d][vo/gpu-next/libplacebo] [ 48]     s.z += s.x * s.y;                        
[   0.784][d][vo/gpu-next/libplacebo] [ 49]     return vec3(s) * 1.0/float(0xFFFFFFFFu); 
[   0.784][d][vo/gpu-next/libplacebo] [ 50] }                                            
[   0.784][d][vo/gpu-next/libplacebo] [ 51] #define _8 (_5(_6))
[   0.784][d][vo/gpu-next/libplacebo] [ 52] const float _9 = float(12); 
[   0.784][d][vo/gpu-next/libplacebo] [ 53] const float _a = float(0.0009765625); 
[   0.784][d][vo/gpu-next/libplacebo] [ 54] const float _b = float(0.062745101749897); 
[   0.784][d][vo/gpu-next/libplacebo] [ 55] const float _c = float(0.0009765625); 
[   0.784][d][vo/gpu-next/libplacebo] [ 56] const float _d = float(1); 
[   0.784][d][vo/gpu-next/libplacebo] [ 57] vec4 _1() {
[   0.784][d][vo/gpu-next/libplacebo] [ 58] vec4 color;                       
[   0.784][d][vo/gpu-next/libplacebo] [ 59] // pl_shader_deband               
[   0.784][d][vo/gpu-next/libplacebo] [ 60] {                                 
[   0.784][d][vo/gpu-next/libplacebo] [ 61] vec2 pos = _3, pt = _4;         
[   0.784][d][vo/gpu-next/libplacebo] [ 62] color = textureLod(_2, pos, 0.0);
[   0.784][d][vo/gpu-next/libplacebo] [ 63] #define GET(X, Y)                                   \
[   0.784][d][vo/gpu-next/libplacebo] [ 64]     (textureLod(_2, pos + pt * vec2(X, Y), 0.0).r)  
[   0.784][d][vo/gpu-next/libplacebo] [ 65] #define T float                                          
[   0.784][d][vo/gpu-next/libplacebo] [ 66] uvec3 _6 = uvec3(gl_FragCoord.xy, _7); 
[   0.784][d][vo/gpu-next/libplacebo] [ 67] T avg, diff, bound;   
[   0.784][d][vo/gpu-next/libplacebo] [ 68] T res = color.r;     
[   0.784][d][vo/gpu-next/libplacebo] [ 69] vec2 d;               
[   0.784][d][vo/gpu-next/libplacebo] [ 70] d = _8.xy * vec2(1.0 * _9, 6.283185307179586);    
[   0.784][d][vo/gpu-next/libplacebo] [ 71] d = d.x * vec2(cos(d.y), sin(d.y));   
[   0.784][d][vo/gpu-next/libplacebo] [ 72] avg = T(0.0);                         
[   0.784][d][vo/gpu-next/libplacebo] [ 73] avg += GET(+d.x, +d.y);               
[   0.784][d][vo/gpu-next/libplacebo] [ 74] avg += GET(-d.x, +d.y);               
[   0.784][d][vo/gpu-next/libplacebo] [ 75] avg += GET(-d.x, -d.y);               
[   0.784][d][vo/gpu-next/libplacebo] [ 76] avg += GET(+d.x, -d.y);               
[   0.784][d][vo/gpu-next/libplacebo] [ 77] avg *= 0.25;                          
[   0.784][d][vo/gpu-next/libplacebo] [ 78] diff = abs(res - avg);                
[   0.784][d][vo/gpu-next/libplacebo] [ 79] bound = T(_a / 1.0);                
[   0.784][d][vo/gpu-next/libplacebo] [ 80] res = mix(avg, res, diff > bound); 
[   0.784][d][vo/gpu-next/libplacebo] [ 81] d = _8.xy * vec2(2.0 * _9, 6.283185307179586);    
[   0.784][d][vo/gpu-next/libplacebo] [ 82] d = d.x * vec2(cos(d.y), sin(d.y));   
[   0.784][d][vo/gpu-next/libplacebo] [ 83] avg = T(0.0);                         
[   0.784][d][vo/gpu-next/libplacebo] [ 84] avg += GET(+d.x, +d.y);               
[   0.784][d][vo/gpu-next/libplacebo] [ 85] avg += GET(-d.x, +d.y);               
[   0.784][d][vo/gpu-next/libplacebo] [ 86] avg += GET(-d.x, -d.y);               
[   0.784][d][vo/gpu-next/libplacebo] [ 87] avg += GET(+d.x, -d.y);               
[   0.784][d][vo/gpu-next/libplacebo] [ 88] avg *= 0.25;                          
[   0.784][d][vo/gpu-next/libplacebo] [ 89] diff = abs(res - avg);                
[   0.784][d][vo/gpu-next/libplacebo] [ 90] bound = T(_a / 2.0);                
[   0.784][d][vo/gpu-next/libplacebo] [ 91] res = mix(avg, res, diff > bound); 
[   0.784][d][vo/gpu-next/libplacebo] [ 92] bound = T(
[   0.784][d][vo/gpu-next/libplacebo] [ 93]  _b);                                        
[   0.784][d][vo/gpu-next/libplacebo] [ 94] T strength = min(abs(res - bound), _c);  
[   0.784][d][vo/gpu-next/libplacebo] [ 95] res += strength * (T(_8) - T(0.5));      
[   0.784][d][vo/gpu-next/libplacebo] [ 96] color.r = res;   
[   0.784][d][vo/gpu-next/libplacebo] [ 97] color *= _d;     
[   0.784][d][vo/gpu-next/libplacebo] [ 98] #undef T          
[   0.784][d][vo/gpu-next/libplacebo] [ 99] #undef GET        
[   0.785][d][vo/gpu-next/libplacebo] [100] }                 
[   0.785][d][vo/gpu-next/libplacebo] [101] return color;
[   0.785][d][vo/gpu-next/libplacebo] [102] }
[   0.785][d][vo/gpu-next/libplacebo] [103] 
[   0.785][d][vo/gpu-next/libplacebo] [104] const float _4004 = float(1); 
[   0.785][d][vo/gpu-next/libplacebo] [105] const float _c005 = float(1); 
[   0.785][d][vo/gpu-next/libplacebo] [106] const float _c009 = float(0.99609375); 
[   0.785][d][vo/gpu-next/libplacebo] [107] const float _c00a = float(0.001953125); 
[   0.785][d][vo/gpu-next/libplacebo] [108] #define _c008(x) (_c009 * (x) + _c00a) 
[   0.785][d][vo/gpu-next/libplacebo] [109] #define _c006(pos) (textureLod(_c007, float(\
[   0.785][d][vo/gpu-next/libplacebo] [110]     _c008(float(pos))\
[   0.785][d][vo/gpu-next/libplacebo] [111]   ), 0.0).x)
[   0.785][d][vo/gpu-next/libplacebo] [112] const float _c00b = float(3.099147319793701); 
[   0.785][d][vo/gpu-next/libplacebo] [113] shared vec2 _c00c_base; 
[   0.785][d][vo/gpu-next/libplacebo] [114] const int _c00d = 24; 
[   0.785][d][vo/gpu-next/libplacebo] [115] const int _c00e = 24; 
[   0.785][d][vo/gpu-next/libplacebo] [116] const int _c00f = 24; 
[   0.785][d][vo/gpu-next/libplacebo] [117] const int _c010 = 24; 
[   0.785][d][vo/gpu-next/libplacebo] [118] shared float _c00c_0[_c00e * _c00d]; 
[   0.785][d][vo/gpu-next/libplacebo] [119] shared float _c00c_1[_c00e * _c00d]; 
[   0.785][d][vo/gpu-next/libplacebo] [120] const float _c011 = float(0); 
[   0.785][d][vo/gpu-next/libplacebo] [121] vec4 _c001() {
[   0.785][d][vo/gpu-next/libplacebo] [122] // pl_shader_sample_polar                     
[   0.785][d][vo/gpu-next/libplacebo] [123] vec4 color = vec4(0.0);                       
[   0.785][d][vo/gpu-next/libplacebo] [124] {                                             
[   0.785][d][vo/gpu-next/libplacebo] [125] vec2 pos = _c003, pt = _c004;                     
[   0.785][d][vo/gpu-next/libplacebo] [126] vec2 size = vec2(textureSize(_c002, 0));        
[   0.785][d][vo/gpu-next/libplacebo] [127] vec2 fcoord = fract(pos * size - vec2(0.5));  
[   0.785][d][vo/gpu-next/libplacebo] [128] vec2 base = pos - pt * fcoord;                
[   0.785][d][vo/gpu-next/libplacebo] [129] vec2 center = base + pt * vec2(0.5);          
[   0.785][d][vo/gpu-next/libplacebo] [130] ivec2 offset;                                 
[   0.785][d][vo/gpu-next/libplacebo] [131] float w, d, wsum = 0.0;                       
[   0.785][d][vo/gpu-next/libplacebo] [132] int idx;                                      
[   0.785][d][vo/gpu-next/libplacebo] [133] vec4 c;                                       
[   0.785][d][vo/gpu-next/libplacebo] [134] uvec2 base_id = uvec2(0u); 
[   0.785][d][vo/gpu-next/libplacebo] [135] if (gl_LocalInvocationID.xy == base_id)               
[   0.785][d][vo/gpu-next/libplacebo] [136]     _c00c_base = base;                                  
[   0.785][d][vo/gpu-next/libplacebo] [137] barrier();                                            
[   0.785][d][vo/gpu-next/libplacebo] [138] ivec2 rel = ivec2(round((base - _c00c_base) * size));   
[   0.785][d][vo/gpu-next/libplacebo] [139] for (int y = int(gl_LocalInvocationID.y); y < _c010; y += 32) {     
[   0.785][d][vo/gpu-next/libplacebo] [140] for (int x = int(gl_LocalInvocationID.x); x < _c00f; x += 32) {     
[   0.785][d][vo/gpu-next/libplacebo] [141] c = textureLod(_c002, _c00c_base + pt * vec2(x - 3, y - 3), 0.0);   
[   0.785][d][vo/gpu-next/libplacebo] [142] _c00c_0[_c00d * y + x] = c[0]; 
[   0.785][d][vo/gpu-next/libplacebo] [143] _c00c_1[_c00d * y + x] = c[1]; 
[   0.785][d][vo/gpu-next/libplacebo] [144] }}                     
[   0.785][d][vo/gpu-next/libplacebo] [145] barrier();             
[   0.785][d][vo/gpu-next/libplacebo] [146] idx = _c00d * rel.y + rel.x + _c00d * 0 + 0; 
[   0.785][d][vo/gpu-next/libplacebo] [147] idx = _c00d * rel.y + rel.x + _c00d * 0 + 1; 
[   0.785][d][vo/gpu-next/libplacebo] [148] idx = _c00d * rel.y + rel.x + _c00d * 0 + 2; 
[   0.785][d][vo/gpu-next/libplacebo] [149] idx = _c00d * rel.y + rel.x + _c00d * 0 + 3; 
[   0.785][d][vo/gpu-next/libplacebo] [150] offset = ivec2(0, -3);
[   0.785][d][vo/gpu-next/libplacebo] [151] d = length(vec2(offset) - fcoord);
[   0.785][d][vo/gpu-next/libplacebo] [152]     if (d < /*radius*/_c00b) {
[   0.785][d][vo/gpu-next/libplacebo] [153] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.785][d][vo/gpu-next/libplacebo] [154] wsum += w;
[   0.785][d][vo/gpu-next/libplacebo] [155]         c[0] = /*in*/_c00c_0[idx];
[   0.785][d][vo/gpu-next/libplacebo] [156]         c[1] = /*in*/_c00c_1[idx];
[   0.785][d][vo/gpu-next/libplacebo] [157]     color[0] += w * c[0];
[   0.785][d][vo/gpu-next/libplacebo] [158]     color[1] += w * c[1];
[   0.785][d][vo/gpu-next/libplacebo] [159]     }
[   0.785][d][vo/gpu-next/libplacebo] [160] idx = _c00d * rel.y + rel.x + _c00d * 0 + 4; 
[   0.785][d][vo/gpu-next/libplacebo] [161] offset = ivec2(1, -3);
[   0.785][d][vo/gpu-next/libplacebo] [162] d = length(vec2(offset) - fcoord);
[   0.785][d][vo/gpu-next/libplacebo] [163]     if (d < /*radius*/_c00b) {
[   0.785][d][vo/gpu-next/libplacebo] [164] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.785][d][vo/gpu-next/libplacebo] [165] wsum += w;
[   0.785][d][vo/gpu-next/libplacebo] [166]         c[0] = /*in*/_c00c_0[idx];
[   0.785][d][vo/gpu-next/libplacebo] [167]         c[1] = /*in*/_c00c_1[idx];
[   0.785][d][vo/gpu-next/libplacebo] [168]     color[0] += w * c[0];
[   0.785][d][vo/gpu-next/libplacebo] [169]     color[1] += w * c[1];
[   0.785][d][vo/gpu-next/libplacebo] [170]     }
[   0.785][d][vo/gpu-next/libplacebo] [171] idx = _c00d * rel.y + rel.x + _c00d * 0 + 5; 
[   0.785][d][vo/gpu-next/libplacebo] [172] idx = _c00d * rel.y + rel.x + _c00d * 0 + 6; 
[   0.785][d][vo/gpu-next/libplacebo] [173] idx = _c00d * rel.y + rel.x + _c00d * 0 + 7; 
[   0.785][d][vo/gpu-next/libplacebo] [174] idx = _c00d * rel.y + rel.x + _c00d * 1 + 0; 
[   0.785][d][vo/gpu-next/libplacebo] [175] idx = _c00d * rel.y + rel.x + _c00d * 1 + 1; 
[   0.785][d][vo/gpu-next/libplacebo] [176] offset = ivec2(-2, -2);
[   0.785][d][vo/gpu-next/libplacebo] [177] d = length(vec2(offset) - fcoord);
[   0.785][d][vo/gpu-next/libplacebo] [178]     if (d < /*radius*/_c00b) {
[   0.785][d][vo/gpu-next/libplacebo] [179] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.785][d][vo/gpu-next/libplacebo] [180] wsum += w;
[   0.785][d][vo/gpu-next/libplacebo] [181]         c[0] = /*in*/_c00c_0[idx];
[   0.785][d][vo/gpu-next/libplacebo] [182]         c[1] = /*in*/_c00c_1[idx];
[   0.785][d][vo/gpu-next/libplacebo] [183]     color[0] += w * c[0];
[   0.785][d][vo/gpu-next/libplacebo] [184]     color[1] += w * c[1];
[   0.785][d][vo/gpu-next/libplacebo] [185]     }
[   0.785][d][vo/gpu-next/libplacebo] [186] idx = _c00d * rel.y + rel.x + _c00d * 1 + 2; 
[   0.785][d][vo/gpu-next/libplacebo] [187] offset = ivec2(-1, -2);
[   0.785][d][vo/gpu-next/libplacebo] [188] d = length(vec2(offset) - fcoord);
[   0.785][d][vo/gpu-next/libplacebo] [189]     if (d < /*radius*/_c00b) {
[   0.785][d][vo/gpu-next/libplacebo] [190] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.785][d][vo/gpu-next/libplacebo] [191] wsum += w;
[   0.785][d][vo/gpu-next/libplacebo] [192]         c[0] = /*in*/_c00c_0[idx];
[   0.785][d][vo/gpu-next/libplacebo] [193]         c[1] = /*in*/_c00c_1[idx];
[   0.785][d][vo/gpu-next/libplacebo] [194]     color[0] += w * c[0];
[   0.785][d][vo/gpu-next/libplacebo] [195]     color[1] += w * c[1];
[   0.785][d][vo/gpu-next/libplacebo] [196]     }
[   0.785][d][vo/gpu-next/libplacebo] [197] idx = _c00d * rel.y + rel.x + _c00d * 1 + 3; 
[   0.785][d][vo/gpu-next/libplacebo] [198] offset = ivec2(0, -2);
[   0.785][d][vo/gpu-next/libplacebo] [199] d = length(vec2(offset) - fcoord);
[   0.785][d][vo/gpu-next/libplacebo] [200]     if (d < /*radius*/_c00b) {
[   0.785][d][vo/gpu-next/libplacebo] [201] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.785][d][vo/gpu-next/libplacebo] [202] wsum += w;
[   0.785][d][vo/gpu-next/libplacebo] [203]         c[0] = /*in*/_c00c_0[idx];
[   0.785][d][vo/gpu-next/libplacebo] [204]         c[1] = /*in*/_c00c_1[idx];
[   0.785][d][vo/gpu-next/libplacebo] [205]     color[0] += w * c[0];
[   0.785][d][vo/gpu-next/libplacebo] [206]     color[1] += w * c[1];
[   0.785][d][vo/gpu-next/libplacebo] [207]     }
[   0.785][d][vo/gpu-next/libplacebo] [208] idx = _c00d * rel.y + rel.x + _c00d * 1 + 4; 
[   0.785][d][vo/gpu-next/libplacebo] [209] offset = ivec2(1, -2);
[   0.785][d][vo/gpu-next/libplacebo] [210] d = length(vec2(offset) - fcoord);
[   0.785][d][vo/gpu-next/libplacebo] [211]     if (d < /*radius*/_c00b) {
[   0.785][d][vo/gpu-next/libplacebo] [212] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.785][d][vo/gpu-next/libplacebo] [213] wsum += w;
[   0.785][d][vo/gpu-next/libplacebo] [214]         c[0] = /*in*/_c00c_0[idx];
[   0.785][d][vo/gpu-next/libplacebo] [215]         c[1] = /*in*/_c00c_1[idx];
[   0.785][d][vo/gpu-next/libplacebo] [216]     color[0] += w * c[0];
[   0.785][d][vo/gpu-next/libplacebo] [217]     color[1] += w * c[1];
[   0.785][d][vo/gpu-next/libplacebo] [218]     }
[   0.785][d][vo/gpu-next/libplacebo] [219] idx = _c00d * rel.y + rel.x + _c00d * 1 + 5; 
[   0.785][d][vo/gpu-next/libplacebo] [220] offset = ivec2(2, -2);
[   0.785][d][vo/gpu-next/libplacebo] [221] d = length(vec2(offset) - fcoord);
[   0.785][d][vo/gpu-next/libplacebo] [222]     if (d < /*radius*/_c00b) {
[   0.785][d][vo/gpu-next/libplacebo] [223] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.785][d][vo/gpu-next/libplacebo] [224] wsum += w;
[   0.785][d][vo/gpu-next/libplacebo] [225]         c[0] = /*in*/_c00c_0[idx];
[   0.785][d][vo/gpu-next/libplacebo] [226]         c[1] = /*in*/_c00c_1[idx];
[   0.785][d][vo/gpu-next/libplacebo] [227]     color[0] += w * c[0];
[   0.785][d][vo/gpu-next/libplacebo] [228]     color[1] += w * c[1];
[   0.785][d][vo/gpu-next/libplacebo] [229]     }
[   0.785][d][vo/gpu-next/libplacebo] [230] idx = _c00d * rel.y + rel.x + _c00d * 1 + 6; 
[   0.785][d][vo/gpu-next/libplacebo] [231] offset = ivec2(3, -2);
[   0.785][d][vo/gpu-next/libplacebo] [232] d = length(vec2(offset) - fcoord);
[   0.785][d][vo/gpu-next/libplacebo] [233]     if (d < /*radius*/_c00b) {
[   0.785][d][vo/gpu-next/libplacebo] [234] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.785][d][vo/gpu-next/libplacebo] [235] wsum += w;
[   0.785][d][vo/gpu-next/libplacebo] [236]         c[0] = /*in*/_c00c_0[idx];
[   0.785][d][vo/gpu-next/libplacebo] [237]         c[1] = /*in*/_c00c_1[idx];
[   0.785][d][vo/gpu-next/libplacebo] [238]     color[0] += w * c[0];
[   0.785][d][vo/gpu-next/libplacebo] [239]     color[1] += w * c[1];
[   0.785][d][vo/gpu-next/libplacebo] [240]     }
[   0.785][d][vo/gpu-next/libplacebo] [241] idx = _c00d * rel.y + rel.x + _c00d * 1 + 7; 
[   0.785][d][vo/gpu-next/libplacebo] [242] idx = _c00d * rel.y + rel.x + _c00d * 2 + 0; 
[   0.785][d][vo/gpu-next/libplacebo] [243] idx = _c00d * rel.y + rel.x + _c00d * 2 + 1; 
[   0.785][d][vo/gpu-next/libplacebo] [244] offset = ivec2(-2, -1);
[   0.785][d][vo/gpu-next/libplacebo] [245] d = length(vec2(offset) - fcoord);
[   0.785][d][vo/gpu-next/libplacebo] [246]     if (d < /*radius*/_c00b) {
[   0.785][d][vo/gpu-next/libplacebo] [247] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.785][d][vo/gpu-next/libplacebo] [248] wsum += w;
[   0.785][d][vo/gpu-next/libplacebo] [249]         c[0] = /*in*/_c00c_0[idx];
[   0.785][d][vo/gpu-next/libplacebo] [250]         c[1] = /*in*/_c00c_1[idx];
[   0.785][d][vo/gpu-next/libplacebo] [251]     color[0] += w * c[0];
[   0.785][d][vo/gpu-next/libplacebo] [252]     color[1] += w * c[1];
[   0.785][d][vo/gpu-next/libplacebo] [253]     }
[   0.785][d][vo/gpu-next/libplacebo] [254] idx = _c00d * rel.y + rel.x + _c00d * 2 + 2; 
[   0.785][d][vo/gpu-next/libplacebo] [255] offset = ivec2(-1, -1);
[   0.785][d][vo/gpu-next/libplacebo] [256] d = length(vec2(offset) - fcoord);
[   0.785][d][vo/gpu-next/libplacebo] [257] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.785][d][vo/gpu-next/libplacebo] [258] wsum += w;
[   0.785][d][vo/gpu-next/libplacebo] [259]         c[0] = /*in*/_c00c_0[idx];
[   0.785][d][vo/gpu-next/libplacebo] [260]         c[1] = /*in*/_c00c_1[idx];
[   0.785][d][vo/gpu-next/libplacebo] [261]     color[0] += w * c[0];
[   0.785][d][vo/gpu-next/libplacebo] [262]     color[1] += w * c[1];
[   0.785][d][vo/gpu-next/libplacebo] [263] idx = _c00d * rel.y + rel.x + _c00d * 2 + 3; 
[   0.786][d][vo/gpu-next/libplacebo] [264] offset = ivec2(0, -1);
[   0.786][d][vo/gpu-next/libplacebo] [265] d = length(vec2(offset) - fcoord);
[   0.786][d][vo/gpu-next/libplacebo] [266] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.786][d][vo/gpu-next/libplacebo] [267] wsum += w;
[   0.786][d][vo/gpu-next/libplacebo] [268]         c[0] = /*in*/_c00c_0[idx];
[   0.786][d][vo/gpu-next/libplacebo] [269]         c[1] = /*in*/_c00c_1[idx];
[   0.786][d][vo/gpu-next/libplacebo] [270]     color[0] += w * c[0];
[   0.786][d][vo/gpu-next/libplacebo] [271]     color[1] += w * c[1];
[   0.786][d][vo/gpu-next/libplacebo] [272] idx = _c00d * rel.y + rel.x + _c00d * 2 + 4; 
[   0.786][d][vo/gpu-next/libplacebo] [273] offset = ivec2(1, -1);
[   0.786][d][vo/gpu-next/libplacebo] [274] d = length(vec2(offset) - fcoord);
[   0.786][d][vo/gpu-next/libplacebo] [275] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.786][d][vo/gpu-next/libplacebo] [276] wsum += w;
[   0.786][d][vo/gpu-next/libplacebo] [277]         c[0] = /*in*/_c00c_0[idx];
[   0.786][d][vo/gpu-next/libplacebo] [278]         c[1] = /*in*/_c00c_1[idx];
[   0.786][d][vo/gpu-next/libplacebo] [279]     color[0] += w * c[0];
[   0.786][d][vo/gpu-next/libplacebo] [280]     color[1] += w * c[1];
[   0.786][d][vo/gpu-next/libplacebo] [281] idx = _c00d * rel.y + rel.x + _c00d * 2 + 5; 
[   0.786][d][vo/gpu-next/libplacebo] [282] offset = ivec2(2, -1);
[   0.786][d][vo/gpu-next/libplacebo] [283] d = length(vec2(offset) - fcoord);
[   0.786][d][vo/gpu-next/libplacebo] [284] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.786][d][vo/gpu-next/libplacebo] [285] wsum += w;
[   0.786][d][vo/gpu-next/libplacebo] [286]         c[0] = /*in*/_c00c_0[idx];
[   0.786][d][vo/gpu-next/libplacebo] [287]         c[1] = /*in*/_c00c_1[idx];
[   0.786][d][vo/gpu-next/libplacebo] [288]     color[0] += w * c[0];
[   0.786][d][vo/gpu-next/libplacebo] [289]     color[1] += w * c[1];
[   0.786][d][vo/gpu-next/libplacebo] [290] idx = _c00d * rel.y + rel.x + _c00d * 2 + 6; 
[   0.786][d][vo/gpu-next/libplacebo] [291] offset = ivec2(3, -1);
[   0.786][d][vo/gpu-next/libplacebo] [292] d = length(vec2(offset) - fcoord);
[   0.786][d][vo/gpu-next/libplacebo] [293]     if (d < /*radius*/_c00b) {
[   0.786][d][vo/gpu-next/libplacebo] [294] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.786][d][vo/gpu-next/libplacebo] [295] wsum += w;
[   0.786][d][vo/gpu-next/libplacebo] [296]         c[0] = /*in*/_c00c_0[idx];
[   0.786][d][vo/gpu-next/libplacebo] [297]         c[1] = /*in*/_c00c_1[idx];
[   0.786][d][vo/gpu-next/libplacebo] [298]     color[0] += w * c[0];
[   0.786][d][vo/gpu-next/libplacebo] [299]     color[1] += w * c[1];
[   0.786][d][vo/gpu-next/libplacebo] [300]     }
[   0.786][d][vo/gpu-next/libplacebo] [301] idx = _c00d * rel.y + rel.x + _c00d * 2 + 7; 
[   0.786][d][vo/gpu-next/libplacebo] [302] idx = _c00d * rel.y + rel.x + _c00d * 3 + 0; 
[   0.786][d][vo/gpu-next/libplacebo] [303] offset = ivec2(-3, 0);
[   0.786][d][vo/gpu-next/libplacebo] [304] d = length(vec2(offset) - fcoord);
[   0.786][d][vo/gpu-next/libplacebo] [305]     if (d < /*radius*/_c00b) {
[   0.786][d][vo/gpu-next/libplacebo] [306] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.786][d][vo/gpu-next/libplacebo] [307] wsum += w;
[   0.786][d][vo/gpu-next/libplacebo] [308]         c[0] = /*in*/_c00c_0[idx];
[   0.786][d][vo/gpu-next/libplacebo] [309]         c[1] = /*in*/_c00c_1[idx];
[   0.786][d][vo/gpu-next/libplacebo] [310]     color[0] += w * c[0];
[   0.786][d][vo/gpu-next/libplacebo] [311]     color[1] += w * c[1];
[   0.786][d][vo/gpu-next/libplacebo] [312]     }
[   0.786][d][vo/gpu-next/libplacebo] [313] idx = _c00d * rel.y + rel.x + _c00d * 3 + 1; 
[   0.786][d][vo/gpu-next/libplacebo] [314] offset = ivec2(-2, 0);
[   0.786][d][vo/gpu-next/libplacebo] [315] d = length(vec2(offset) - fcoord);
[   0.786][d][vo/gpu-next/libplacebo] [316]     if (d < /*radius*/_c00b) {
[   0.786][d][vo/gpu-next/libplacebo] [317] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.786][d][vo/gpu-next/libplacebo] [318] wsum += w;
[   0.786][d][vo/gpu-next/libplacebo] [319]         c[0] = /*in*/_c00c_0[idx];
[   0.786][d][vo/gpu-next/libplacebo] [320]         c[1] = /*in*/_c00c_1[idx];
[   0.786][d][vo/gpu-next/libplacebo] [321]     color[0] += w * c[0];
[   0.786][d][vo/gpu-next/libplacebo] [322]     color[1] += w * c[1];
[   0.786][d][vo/gpu-next/libplacebo] [323]     }
[   0.786][d][vo/gpu-next/libplacebo] [324] idx = _c00d * rel.y + rel.x + _c00d * 3 + 2; 
[   0.786][d][vo/gpu-next/libplacebo] [325] offset = ivec2(-1, 0);
[   0.786][d][vo/gpu-next/libplacebo] [326] d = length(vec2(offset) - fcoord);
[   0.786][d][vo/gpu-next/libplacebo] [327] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.786][d][vo/gpu-next/libplacebo] [328] wsum += w;
[   0.786][d][vo/gpu-next/libplacebo] [329]         c[0] = /*in*/_c00c_0[idx];
[   0.786][d][vo/gpu-next/libplacebo] [330]         c[1] = /*in*/_c00c_1[idx];
[   0.786][d][vo/gpu-next/libplacebo] [331]     color[0] += w * c[0];
[   0.786][d][vo/gpu-next/libplacebo] [332]     color[1] += w * c[1];
[   0.786][d][vo/gpu-next/libplacebo] [333] idx = _c00d * rel.y + rel.x + _c00d * 3 + 3; 
[   0.786][d][vo/gpu-next/libplacebo] [334] offset = ivec2(0, 0);
[   0.786][d][vo/gpu-next/libplacebo] [335] d = length(vec2(offset) - fcoord);
[   0.786][d][vo/gpu-next/libplacebo] [336] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.786][d][vo/gpu-next/libplacebo] [337] wsum += w;
[   0.786][d][vo/gpu-next/libplacebo] [338]         c[0] = /*in*/_c00c_0[idx];
[   0.786][d][vo/gpu-next/libplacebo] [339]         c[1] = /*in*/_c00c_1[idx];
[   0.786][d][vo/gpu-next/libplacebo] [340]     color[0] += w * c[0];
[   0.786][d][vo/gpu-next/libplacebo] [341]     color[1] += w * c[1];
[   0.786][d][vo/gpu-next/libplacebo] [342] idx = _c00d * rel.y + rel.x + _c00d * 3 + 4; 
[   0.786][d][vo/gpu-next/libplacebo] [343] offset = ivec2(1, 0);
[   0.786][d][vo/gpu-next/libplacebo] [344] d = length(vec2(offset) - fcoord);
[   0.786][d][vo/gpu-next/libplacebo] [345] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.786][d][vo/gpu-next/libplacebo] [346] wsum += w;
[   0.786][d][vo/gpu-next/libplacebo] [347]         c[0] = /*in*/_c00c_0[idx];
[   0.786][d][vo/gpu-next/libplacebo] [348]         c[1] = /*in*/_c00c_1[idx];
[   0.786][d][vo/gpu-next/libplacebo] [349]     color[0] += w * c[0];
[   0.786][d][vo/gpu-next/libplacebo] [350]     color[1] += w * c[1];
[   0.786][d][vo/gpu-next/libplacebo] [351] idx = _c00d * rel.y + rel.x + _c00d * 3 + 5; 
[   0.786][d][vo/gpu-next/libplacebo] [352] offset = ivec2(2, 0);
[   0.786][d][vo/gpu-next/libplacebo] [353] d = length(vec2(offset) - fcoord);
[   0.786][d][vo/gpu-next/libplacebo] [354] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.786][d][vo/gpu-next/libplacebo] [355] wsum += w;
[   0.786][d][vo/gpu-next/libplacebo] [356]         c[0] = /*in*/_c00c_0[idx];
[   0.786][d][vo/gpu-next/libplacebo] [357]         c[1] = /*in*/_c00c_1[idx];
[   0.786][d][vo/gpu-next/libplacebo] [358]     color[0] += w * c[0];
[   0.786][d][vo/gpu-next/libplacebo] [359]     color[1] += w * c[1];
[   0.786][d][vo/gpu-next/libplacebo] [360] idx = _c00d * rel.y + rel.x + _c00d * 3 + 6; 
[   0.787][d][vo/gpu-next/libplacebo] [361] offset = ivec2(3, 0);
[   0.787][d][vo/gpu-next/libplacebo] [362] d = length(vec2(offset) - fcoord);
[   0.787][d][vo/gpu-next/libplacebo] [363]     if (d < /*radius*/_c00b) {
[   0.787][d][vo/gpu-next/libplacebo] [364] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.787][d][vo/gpu-next/libplacebo] [365] wsum += w;
[   0.787][d][vo/gpu-next/libplacebo] [366]         c[0] = /*in*/_c00c_0[idx];
[   0.787][d][vo/gpu-next/libplacebo] [367]         c[1] = /*in*/_c00c_1[idx];
[   0.787][d][vo/gpu-next/libplacebo] [368]     color[0] += w * c[0];
[   0.787][d][vo/gpu-next/libplacebo] [369]     color[1] += w * c[1];
[   0.787][d][vo/gpu-next/libplacebo] [370]     }
[   0.787][d][vo/gpu-next/libplacebo] [371] idx = _c00d * rel.y + rel.x + _c00d * 3 + 7; 
[   0.787][d][vo/gpu-next/libplacebo] [372] offset = ivec2(4, 0);
[   0.787][d][vo/gpu-next/libplacebo] [373] d = length(vec2(offset) - fcoord);
[   0.787][d][vo/gpu-next/libplacebo] [374]     if (d < /*radius*/_c00b) {
[   0.787][d][vo/gpu-next/libplacebo] [375] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.787][d][vo/gpu-next/libplacebo] [376] wsum += w;
[   0.787][d][vo/gpu-next/libplacebo] [377]         c[0] = /*in*/_c00c_0[idx];
[   0.787][d][vo/gpu-next/libplacebo] [378]         c[1] = /*in*/_c00c_1[idx];
[   0.787][d][vo/gpu-next/libplacebo] [379]     color[0] += w * c[0];
[   0.787][d][vo/gpu-next/libplacebo] [380]     color[1] += w * c[1];
[   0.787][d][vo/gpu-next/libplacebo] [381]     }
[   0.787][d][vo/gpu-next/libplacebo] [382] idx = _c00d * rel.y + rel.x + _c00d * 4 + 0; 
[   0.787][d][vo/gpu-next/libplacebo] [383] offset = ivec2(-3, 1);
[   0.787][d][vo/gpu-next/libplacebo] [384] d = length(vec2(offset) - fcoord);
[   0.787][d][vo/gpu-next/libplacebo] [385]     if (d < /*radius*/_c00b) {
[   0.787][d][vo/gpu-next/libplacebo] [386] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.787][d][vo/gpu-next/libplacebo] [387] wsum += w;
[   0.787][d][vo/gpu-next/libplacebo] [388]         c[0] = /*in*/_c00c_0[idx];
[   0.787][d][vo/gpu-next/libplacebo] [389]         c[1] = /*in*/_c00c_1[idx];
[   0.787][d][vo/gpu-next/libplacebo] [390]     color[0] += w * c[0];
[   0.787][d][vo/gpu-next/libplacebo] [391]     color[1] += w * c[1];
[   0.787][d][vo/gpu-next/libplacebo] [392]     }
[   0.787][d][vo/gpu-next/libplacebo] [393] idx = _c00d * rel.y + rel.x + _c00d * 4 + 1; 
[   0.787][d][vo/gpu-next/libplacebo] [394] offset = ivec2(-2, 1);
[   0.787][d][vo/gpu-next/libplacebo] [395] d = length(vec2(offset) - fcoord);
[   0.787][d][vo/gpu-next/libplacebo] [396]     if (d < /*radius*/_c00b) {
[   0.787][d][vo/gpu-next/libplacebo] [397] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.787][d][vo/gpu-next/libplacebo] [398] wsum += w;
[   0.787][d][vo/gpu-next/libplacebo] [399]         c[0] = /*in*/_c00c_0[idx];
[   0.787][d][vo/gpu-next/libplacebo] [400]         c[1] = /*in*/_c00c_1[idx];
[   0.787][d][vo/gpu-next/libplacebo] [401]     color[0] += w * c[0];
[   0.787][d][vo/gpu-next/libplacebo] [402]     color[1] += w * c[1];
[   0.787][d][vo/gpu-next/libplacebo] [403]     }
[   0.787][d][vo/gpu-next/libplacebo] [404] idx = _c00d * rel.y + rel.x + _c00d * 4 + 2; 
[   0.787][d][vo/gpu-next/libplacebo] [405] offset = ivec2(-1, 1);
[   0.787][d][vo/gpu-next/libplacebo] [406] d = length(vec2(offset) - fcoord);
[   0.787][d][vo/gpu-next/libplacebo] [407] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.787][d][vo/gpu-next/libplacebo] [408] wsum += w;
[   0.787][d][vo/gpu-next/libplacebo] [409]         c[0] = /*in*/_c00c_0[idx];
[   0.787][d][vo/gpu-next/libplacebo] [410]         c[1] = /*in*/_c00c_1[idx];
[   0.787][d][vo/gpu-next/libplacebo] [411]     color[0] += w * c[0];
[   0.787][d][vo/gpu-next/libplacebo] [412]     color[1] += w * c[1];
[   0.787][d][vo/gpu-next/libplacebo] [413] idx = _c00d * rel.y + rel.x + _c00d * 4 + 3; 
[   0.787][d][vo/gpu-next/libplacebo] [414] offset = ivec2(0, 1);
[   0.787][d][vo/gpu-next/libplacebo] [415] d = length(vec2(offset) - fcoord);
[   0.787][d][vo/gpu-next/libplacebo] [416] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.787][d][vo/gpu-next/libplacebo] [417] wsum += w;
[   0.787][d][vo/gpu-next/libplacebo] [418]         c[0] = /*in*/_c00c_0[idx];
[   0.787][d][vo/gpu-next/libplacebo] [419]         c[1] = /*in*/_c00c_1[idx];
[   0.787][d][vo/gpu-next/libplacebo] [420]     color[0] += w * c[0];
[   0.787][d][vo/gpu-next/libplacebo] [421]     color[1] += w * c[1];
[   0.787][d][vo/gpu-next/libplacebo] [422] idx = _c00d * rel.y + rel.x + _c00d * 4 + 4; 
[   0.787][d][vo/gpu-next/libplacebo] [423] offset = ivec2(1, 1);
[   0.787][d][vo/gpu-next/libplacebo] [424] d = length(vec2(offset) - fcoord);
[   0.787][d][vo/gpu-next/libplacebo] [425] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.787][d][vo/gpu-next/libplacebo] [426] wsum += w;
[   0.787][d][vo/gpu-next/libplacebo] [427]         c[0] = /*in*/_c00c_0[idx];
[   0.787][d][vo/gpu-next/libplacebo] [428]         c[1] = /*in*/_c00c_1[idx];
[   0.787][d][vo/gpu-next/libplacebo] [429]     color[0] += w * c[0];
[   0.787][d][vo/gpu-next/libplacebo] [430]     color[1] += w * c[1];
[   0.787][d][vo/gpu-next/libplacebo] [431] idx = _c00d * rel.y + rel.x + _c00d * 4 + 5; 
[   0.787][d][vo/gpu-next/libplacebo] [432] offset = ivec2(2, 1);
[   0.787][d][vo/gpu-next/libplacebo] [433] d = length(vec2(offset) - fcoord);
[   0.787][d][vo/gpu-next/libplacebo] [434] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.787][d][vo/gpu-next/libplacebo] [435] wsum += w;
[   0.787][d][vo/gpu-next/libplacebo] [436]         c[0] = /*in*/_c00c_0[idx];
[   0.787][d][vo/gpu-next/libplacebo] [437]         c[1] = /*in*/_c00c_1[idx];
[   0.787][d][vo/gpu-next/libplacebo] [438]     color[0] += w * c[0];
[   0.787][d][vo/gpu-next/libplacebo] [439]     color[1] += w * c[1];
[   0.787][d][vo/gpu-next/libplacebo] [440] idx = _c00d * rel.y + rel.x + _c00d * 4 + 6; 
[   0.787][d][vo/gpu-next/libplacebo] [441] offset = ivec2(3, 1);
[   0.787][d][vo/gpu-next/libplacebo] [442] d = length(vec2(offset) - fcoord);
[   0.787][d][vo/gpu-next/libplacebo] [443]     if (d < /*radius*/_c00b) {
[   0.787][d][vo/gpu-next/libplacebo] [444] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.787][d][vo/gpu-next/libplacebo] [445] wsum += w;
[   0.787][d][vo/gpu-next/libplacebo] [446]         c[0] = /*in*/_c00c_0[idx];
[   0.787][d][vo/gpu-next/libplacebo] [447]         c[1] = /*in*/_c00c_1[idx];
[   0.787][d][vo/gpu-next/libplacebo] [448]     color[0] += w * c[0];
[   0.787][d][vo/gpu-next/libplacebo] [449]     color[1] += w * c[1];
[   0.787][d][vo/gpu-next/libplacebo] [450]     }
[   0.787][d][vo/gpu-next/libplacebo] [451] idx = _c00d * rel.y + rel.x + _c00d * 4 + 7; 
[   0.787][d][vo/gpu-next/libplacebo] [452] offset = ivec2(4, 1);
[   0.787][d][vo/gpu-next/libplacebo] [453] d = length(vec2(offset) - fcoord);
[   0.787][d][vo/gpu-next/libplacebo] [454]     if (d < /*radius*/_c00b) {
[   0.787][d][vo/gpu-next/libplacebo] [455] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.787][d][vo/gpu-next/libplacebo] [456] wsum += w;
[   0.787][d][vo/gpu-next/libplacebo] [457]         c[0] = /*in*/_c00c_0[idx];
[   0.787][d][vo/gpu-next/libplacebo] [458]         c[1] = /*in*/_c00c_1[idx];
[   0.787][d][vo/gpu-next/libplacebo] [459]     color[0] += w * c[0];
[   0.787][d][vo/gpu-next/libplacebo] [460]     color[1] += w * c[1];
[   0.787][d][vo/gpu-next/libplacebo] [461]     }
[   0.787][d][vo/gpu-next/libplacebo] [462] idx = _c00d * rel.y + rel.x + _c00d * 5 + 0; 
[   0.787][d][vo/gpu-next/libplacebo] [463] idx = _c00d * rel.y + rel.x + _c00d * 5 + 1; 
[   0.787][d][vo/gpu-next/libplacebo] [464] offset = ivec2(-2, 2);
[   0.787][d][vo/gpu-next/libplacebo] [465] d = length(vec2(offset) - fcoord);
[   0.788][d][vo/gpu-next/libplacebo] [466]     if (d < /*radius*/_c00b) {
[   0.788][d][vo/gpu-next/libplacebo] [467] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.788][d][vo/gpu-next/libplacebo] [468] wsum += w;
[   0.788][d][vo/gpu-next/libplacebo] [469]         c[0] = /*in*/_c00c_0[idx];
[   0.788][d][vo/gpu-next/libplacebo] [470]         c[1] = /*in*/_c00c_1[idx];
[   0.788][d][vo/gpu-next/libplacebo] [471]     color[0] += w * c[0];
[   0.788][d][vo/gpu-next/libplacebo] [472]     color[1] += w * c[1];
[   0.788][d][vo/gpu-next/libplacebo] [473]     }
[   0.788][d][vo/gpu-next/libplacebo] [474] idx = _c00d * rel.y + rel.x + _c00d * 5 + 2; 
[   0.788][d][vo/gpu-next/libplacebo] [475] offset = ivec2(-1, 2);
[   0.788][d][vo/gpu-next/libplacebo] [476] d = length(vec2(offset) - fcoord);
[   0.788][d][vo/gpu-next/libplacebo] [477] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.788][d][vo/gpu-next/libplacebo] [478] wsum += w;
[   0.788][d][vo/gpu-next/libplacebo] [479]         c[0] = /*in*/_c00c_0[idx];
[   0.788][d][vo/gpu-next/libplacebo] [480]         c[1] = /*in*/_c00c_1[idx];
[   0.788][d][vo/gpu-next/libplacebo] [481]     color[0] += w * c[0];
[   0.788][d][vo/gpu-next/libplacebo] [482]     color[1] += w * c[1];
[   0.788][d][vo/gpu-next/libplacebo] [483] idx = _c00d * rel.y + rel.x + _c00d * 5 + 3; 
[   0.788][d][vo/gpu-next/libplacebo] [484] offset = ivec2(0, 2);
[   0.788][d][vo/gpu-next/libplacebo] [485] d = length(vec2(offset) - fcoord);
[   0.788][d][vo/gpu-next/libplacebo] [486] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.788][d][vo/gpu-next/libplacebo] [487] wsum += w;
[   0.788][d][vo/gpu-next/libplacebo] [488]         c[0] = /*in*/_c00c_0[idx];
[   0.788][d][vo/gpu-next/libplacebo] [489]         c[1] = /*in*/_c00c_1[idx];
[   0.788][d][vo/gpu-next/libplacebo] [490]     color[0] += w * c[0];
[   0.788][d][vo/gpu-next/libplacebo] [491]     color[1] += w * c[1];
[   0.788][d][vo/gpu-next/libplacebo] [492] idx = _c00d * rel.y + rel.x + _c00d * 5 + 4; 
[   0.788][d][vo/gpu-next/libplacebo] [493] offset = ivec2(1, 2);
[   0.788][d][vo/gpu-next/libplacebo] [494] d = length(vec2(offset) - fcoord);
[   0.788][d][vo/gpu-next/libplacebo] [495] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.788][d][vo/gpu-next/libplacebo] [496] wsum += w;
[   0.788][d][vo/gpu-next/libplacebo] [497]         c[0] = /*in*/_c00c_0[idx];
[   0.788][d][vo/gpu-next/libplacebo] [498]         c[1] = /*in*/_c00c_1[idx];
[   0.788][d][vo/gpu-next/libplacebo] [499]     color[0] += w * c[0];
[   0.788][d][vo/gpu-next/libplacebo] [500]     color[1] += w * c[1];
[   0.788][d][vo/gpu-next/libplacebo] [501] idx = _c00d * rel.y + rel.x + _c00d * 5 + 5; 
[   0.788][d][vo/gpu-next/libplacebo] [502] offset = ivec2(2, 2);
[   0.788][d][vo/gpu-next/libplacebo] [503] d = length(vec2(offset) - fcoord);
[   0.788][d][vo/gpu-next/libplacebo] [504] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.788][d][vo/gpu-next/libplacebo] [505] wsum += w;
[   0.788][d][vo/gpu-next/libplacebo] [506]         c[0] = /*in*/_c00c_0[idx];
[   0.788][d][vo/gpu-next/libplacebo] [507]         c[1] = /*in*/_c00c_1[idx];
[   0.788][d][vo/gpu-next/libplacebo] [508]     color[0] += w * c[0];
[   0.788][d][vo/gpu-next/libplacebo] [509]     color[1] += w * c[1];
[   0.788][d][vo/gpu-next/libplacebo] [510] idx = _c00d * rel.y + rel.x + _c00d * 5 + 6; 
[   0.788][d][vo/gpu-next/libplacebo] [511] offset = ivec2(3, 2);
[   0.788][d][vo/gpu-next/libplacebo] [512] d = length(vec2(offset) - fcoord);
[   0.788][d][vo/gpu-next/libplacebo] [513]     if (d < /*radius*/_c00b) {
[   0.788][d][vo/gpu-next/libplacebo] [514] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.788][d][vo/gpu-next/libplacebo] [515] wsum += w;
[   0.788][d][vo/gpu-next/libplacebo] [516]         c[0] = /*in*/_c00c_0[idx];
[   0.788][d][vo/gpu-next/libplacebo] [517]         c[1] = /*in*/_c00c_1[idx];
[   0.788][d][vo/gpu-next/libplacebo] [518]     color[0] += w * c[0];
[   0.788][d][vo/gpu-next/libplacebo] [519]     color[1] += w * c[1];
[   0.788][d][vo/gpu-next/libplacebo] [520]     }
[   0.788][d][vo/gpu-next/libplacebo] [521] idx = _c00d * rel.y + rel.x + _c00d * 5 + 7; 
[   0.788][d][vo/gpu-next/libplacebo] [522] idx = _c00d * rel.y + rel.x + _c00d * 6 + 0; 
[   0.788][d][vo/gpu-next/libplacebo] [523] idx = _c00d * rel.y + rel.x + _c00d * 6 + 1; 
[   0.788][d][vo/gpu-next/libplacebo] [524] offset = ivec2(-2, 3);
[   0.788][d][vo/gpu-next/libplacebo] [525] d = length(vec2(offset) - fcoord);
[   0.788][d][vo/gpu-next/libplacebo] [526]     if (d < /*radius*/_c00b) {
[   0.788][d][vo/gpu-next/libplacebo] [527] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.788][d][vo/gpu-next/libplacebo] [528] wsum += w;
[   0.788][d][vo/gpu-next/libplacebo] [529]         c[0] = /*in*/_c00c_0[idx];
[   0.788][d][vo/gpu-next/libplacebo] [530]         c[1] = /*in*/_c00c_1[idx];
[   0.788][d][vo/gpu-next/libplacebo] [531]     color[0] += w * c[0];
[   0.788][d][vo/gpu-next/libplacebo] [532]     color[1] += w * c[1];
[   0.788][d][vo/gpu-next/libplacebo] [533]     }
[   0.788][d][vo/gpu-next/libplacebo] [534] idx = _c00d * rel.y + rel.x + _c00d * 6 + 2; 
[   0.788][d][vo/gpu-next/libplacebo] [535] offset = ivec2(-1, 3);
[   0.788][d][vo/gpu-next/libplacebo] [536] d = length(vec2(offset) - fcoord);
[   0.788][d][vo/gpu-next/libplacebo] [537]     if (d < /*radius*/_c00b) {
[   0.788][d][vo/gpu-next/libplacebo] [538] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.788][d][vo/gpu-next/libplacebo] [539] wsum += w;
[   0.788][d][vo/gpu-next/libplacebo] [540]         c[0] = /*in*/_c00c_0[idx];
[   0.788][d][vo/gpu-next/libplacebo] [541]         c[1] = /*in*/_c00c_1[idx];
[   0.788][d][vo/gpu-next/libplacebo] [542]     color[0] += w * c[0];
[   0.788][d][vo/gpu-next/libplacebo] [543]     color[1] += w * c[1];
[   0.788][d][vo/gpu-next/libplacebo] [544]     }
[   0.788][d][vo/gpu-next/libplacebo] [545] idx = _c00d * rel.y + rel.x + _c00d * 6 + 3; 
[   0.788][d][vo/gpu-next/libplacebo] [546] offset = ivec2(0, 3);
[   0.788][d][vo/gpu-next/libplacebo] [547] d = length(vec2(offset) - fcoord);
[   0.788][d][vo/gpu-next/libplacebo] [548]     if (d < /*radius*/_c00b) {
[   0.788][d][vo/gpu-next/libplacebo] [549] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.788][d][vo/gpu-next/libplacebo] [550] wsum += w;
[   0.788][d][vo/gpu-next/libplacebo] [551]         c[0] = /*in*/_c00c_0[idx];
[   0.788][d][vo/gpu-next/libplacebo] [552]         c[1] = /*in*/_c00c_1[idx];
[   0.788][d][vo/gpu-next/libplacebo] [553]     color[0] += w * c[0];
[   0.788][d][vo/gpu-next/libplacebo] [554]     color[1] += w * c[1];
[   0.788][d][vo/gpu-next/libplacebo] [555]     }
[   0.788][d][vo/gpu-next/libplacebo] [556] idx = _c00d * rel.y + rel.x + _c00d * 6 + 4; 
[   0.788][d][vo/gpu-next/libplacebo] [557] offset = ivec2(1, 3);
[   0.788][d][vo/gpu-next/libplacebo] [558] d = length(vec2(offset) - fcoord);
[   0.788][d][vo/gpu-next/libplacebo] [559]     if (d < /*radius*/_c00b) {
[   0.788][d][vo/gpu-next/libplacebo] [560] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.788][d][vo/gpu-next/libplacebo] [561] wsum += w;
[   0.788][d][vo/gpu-next/libplacebo] [562]         c[0] = /*in*/_c00c_0[idx];
[   0.788][d][vo/gpu-next/libplacebo] [563]         c[1] = /*in*/_c00c_1[idx];
[   0.788][d][vo/gpu-next/libplacebo] [564]     color[0] += w * c[0];
[   0.788][d][vo/gpu-next/libplacebo] [565]     color[1] += w * c[1];
[   0.788][d][vo/gpu-next/libplacebo] [566]     }
[   0.788][d][vo/gpu-next/libplacebo] [567] idx = _c00d * rel.y + rel.x + _c00d * 6 + 5; 
[   0.788][d][vo/gpu-next/libplacebo] [568] offset = ivec2(2, 3);
[   0.788][d][vo/gpu-next/libplacebo] [569] d = length(vec2(offset) - fcoord);
[   0.788][d][vo/gpu-next/libplacebo] [570]     if (d < /*radius*/_c00b) {
[   0.788][d][vo/gpu-next/libplacebo] [571] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.788][d][vo/gpu-next/libplacebo] [572] wsum += w;
[   0.788][d][vo/gpu-next/libplacebo] [573]         c[0] = /*in*/_c00c_0[idx];
[   0.788][d][vo/gpu-next/libplacebo] [574]         c[1] = /*in*/_c00c_1[idx];
[   0.788][d][vo/gpu-next/libplacebo] [575]     color[0] += w * c[0];
[   0.788][d][vo/gpu-next/libplacebo] [576]     color[1] += w * c[1];
[   0.788][d][vo/gpu-next/libplacebo] [577]     }
[   0.788][d][vo/gpu-next/libplacebo] [578] idx = _c00d * rel.y + rel.x + _c00d * 6 + 6; 
[   0.788][d][vo/gpu-next/libplacebo] [579] offset = ivec2(3, 3);
[   0.788][d][vo/gpu-next/libplacebo] [580] d = length(vec2(offset) - fcoord);
[   0.788][d][vo/gpu-next/libplacebo] [581]     if (d < /*radius*/_c00b) {
[   0.788][d][vo/gpu-next/libplacebo] [582] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.788][d][vo/gpu-next/libplacebo] [583] wsum += w;
[   0.788][d][vo/gpu-next/libplacebo] [584]         c[0] = /*in*/_c00c_0[idx];
[   0.788][d][vo/gpu-next/libplacebo] [585]         c[1] = /*in*/_c00c_1[idx];
[   0.788][d][vo/gpu-next/libplacebo] [586]     color[0] += w * c[0];
[   0.788][d][vo/gpu-next/libplacebo] [587]     color[1] += w * c[1];
[   0.788][d][vo/gpu-next/libplacebo] [588]     }
[   0.788][d][vo/gpu-next/libplacebo] [589] idx = _c00d * rel.y + rel.x + _c00d * 6 + 7; 
[   0.788][d][vo/gpu-next/libplacebo] [590] idx = _c00d * rel.y + rel.x + _c00d * 7 + 0; 
[   0.788][d][vo/gpu-next/libplacebo] [591] idx = _c00d * rel.y + rel.x + _c00d * 7 + 1; 
[   0.788][d][vo/gpu-next/libplacebo] [592] idx = _c00d * rel.y + rel.x + _c00d * 7 + 2; 
[   0.788][d][vo/gpu-next/libplacebo] [593] idx = _c00d * rel.y + rel.x + _c00d * 7 + 3; 
[   0.788][d][vo/gpu-next/libplacebo] [594] offset = ivec2(0, 4);
[   0.788][d][vo/gpu-next/libplacebo] [595] d = length(vec2(offset) - fcoord);
[   0.788][d][vo/gpu-next/libplacebo] [596]     if (d < /*radius*/_c00b) {
[   0.788][d][vo/gpu-next/libplacebo] [597] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.788][d][vo/gpu-next/libplacebo] [598] wsum += w;
[   0.788][d][vo/gpu-next/libplacebo] [599]         c[0] = /*in*/_c00c_0[idx];
[   0.788][d][vo/gpu-next/libplacebo] [600]         c[1] = /*in*/_c00c_1[idx];
[   0.788][d][vo/gpu-next/libplacebo] [601]     color[0] += w * c[0];
[   0.788][d][vo/gpu-next/libplacebo] [602]     color[1] += w * c[1];
[   0.788][d][vo/gpu-next/libplacebo] [603]     }
[   0.788][d][vo/gpu-next/libplacebo] [604] idx = _c00d * rel.y + rel.x + _c00d * 7 + 4; 
[   0.788][d][vo/gpu-next/libplacebo] [605] offset = ivec2(1, 4);
[   0.788][d][vo/gpu-next/libplacebo] [606] d = length(vec2(offset) - fcoord);
[   0.788][d][vo/gpu-next/libplacebo] [607]     if (d < /*radius*/_c00b) {
[   0.788][d][vo/gpu-next/libplacebo] [608] w = /*lut*/_c006(d * 1.0 / /*radius*/_c00b);
[   0.788][d][vo/gpu-next/libplacebo] [609] wsum += w;
[   0.788][d][vo/gpu-next/libplacebo] [610]         c[0] = /*in*/_c00c_0[idx];
[   0.788][d][vo/gpu-next/libplacebo] [611]         c[1] = /*in*/_c00c_1[idx];
[   0.788][d][vo/gpu-next/libplacebo] [612]     color[0] += w * c[0];
[   0.788][d][vo/gpu-next/libplacebo] [613]     color[1] += w * c[1];
[   0.788][d][vo/gpu-next/libplacebo] [614]     }
[   0.788][d][vo/gpu-next/libplacebo] [615] idx = _c00d * rel.y + rel.x + _c00d * 7 + 5; 
[   0.788][d][vo/gpu-next/libplacebo] [616] idx = _c00d * rel.y + rel.x + _c00d * 7 + 6; 
[   0.788][d][vo/gpu-next/libplacebo] [617] idx = _c00d * rel.y + rel.x + _c00d * 7 + 7; 
[   0.788][d][vo/gpu-next/libplacebo] [618] color = /*scale*/_c005 / wsum * color;
[   0.788][d][vo/gpu-next/libplacebo] [619]     color.a = 1.0;
[   0.788][d][vo/gpu-next/libplacebo] [620] }
[   0.788][d][vo/gpu-next/libplacebo] [621] return color;
[   0.788][d][vo/gpu-next/libplacebo] [622] }
[   0.788][d][vo/gpu-next/libplacebo] [623] 
[   0.788][d][vo/gpu-next/libplacebo] [624] const float _4005 = float(1); 
[   0.788][d][vo/gpu-next/libplacebo] [625] const float _4008 = float(0.8703105449676514); 
[   0.788][d][vo/gpu-next/libplacebo] [626] const float _4009 = float(0.0595848374068737); 
[   0.788][d][vo/gpu-next/libplacebo] [627] void _4001() {
[   0.788][d][vo/gpu-next/libplacebo] [628] vec4 color = vec4(_4002, vec2(_4003), 1.0);   
[   0.788][d][vo/gpu-next/libplacebo] [629] // pass_read_image                        
[   0.788][d][vo/gpu-next/libplacebo] [630] {                                         
[   0.788][d][vo/gpu-next/libplacebo] [631] vec4 tmp;                                 
[   0.788][d][vo/gpu-next/libplacebo] [632] tmp = vec4(_4004) * _1(); 
[   0.788][d][vo/gpu-next/libplacebo] [633] color[0] = tmp[0];
[   0.788][d][vo/gpu-next/libplacebo] [634] tmp = vec4(_4005) * _c001(); 
[   0.788][d][vo/gpu-next/libplacebo] [635] color[1] = tmp[0];
[   0.788][d][vo/gpu-next/libplacebo] [636] color[2] = tmp[1];
[   0.789][d][vo/gpu-next/libplacebo] [637] }
[   0.789][d][vo/gpu-next/libplacebo] [638] // pl_shader_decode_color 
[   0.789][d][vo/gpu-next/libplacebo] [639] { 
[   0.789][d][vo/gpu-next/libplacebo] [640] color.rgb = _4006 * color.rgb + _4007; 
[   0.789][d][vo/gpu-next/libplacebo] [641] }
[   0.789][d][vo/gpu-next/libplacebo] [642] // pl_shader_linearize           
[   0.789][d][vo/gpu-next/libplacebo] [643] color.rgb = max(color.rgb, 0.0); 
[   0.789][d][vo/gpu-next/libplacebo] [644] color.rgb = _4008 * pow(color.rgb + vec3(_4009), vec3(2.4)); 
[   0.789][d][vo/gpu-next/libplacebo] [645] ivec2 dir = ivec2(1, 1);
[   0.789][d][vo/gpu-next/libplacebo] [646] ivec2 pos = _4014 + dir * ivec2(gl_GlobalInvocationID).xy;
[   0.789][d][vo/gpu-next/libplacebo] [647] vec2 fpos = _400a * vec2(gl_GlobalInvocationID);
[   0.789][d][vo/gpu-next/libplacebo] [648] if (fpos.x < 1.0 && fpos.y < 1.0) {
[   0.789][d][vo/gpu-next/libplacebo] [649] imageStore(_4013, pos, color);
[   0.789][d][vo/gpu-next/libplacebo] [650] }
[   0.789][d][vo/gpu-next/libplacebo] [651] 
[   0.789][d][vo/gpu-next/libplacebo] [652] }
[   0.789][d][vo/gpu-next/libplacebo] [653] 
[   0.789][d][vo/gpu-next/libplacebo] [654] void main() {
[   0.789][d][vo/gpu-next/libplacebo] [655] _4001();
[   0.789][d][vo/gpu-next/libplacebo] [656] }
[   0.789][d][vo/gpu-next] cache_load_obj: key(8de3d01de06a1d89), size(23401), load time(0.210 ms)
[   0.789][d][vo/gpu-next/libplacebo] Using cached DXBC shader
[   0.789][d][vo/gpu-next] cache_save_obj: key(8de3d01de06a1d89), size(23401)
[   0.789][d][vo/gpu-next/libplacebo] LUT invalidated, regenerating..
[   0.789][d][vo/gpu-next/libplacebo] Spent 0.000 ms generating shader LUT
[   0.789][d][vo/gpu-next] cache_load_obj: key(d95b62e641a2e006), size(16384), load time(0.117 ms)
[   0.789][d][vo/gpu-next/libplacebo] Re-using cached LUT (0xd95b62e641a2e006) with size 16384
[   0.789][d][vo/gpu-next] cache_save_obj: key(d95b62e641a2e006), size(16384)
[   0.789][v][vo/gpu-next/libplacebo] Dithering to 8 bit depth
[   0.790][d][vo/gpu-next/libplacebo] compute shader source:
[   0.790][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.790][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_compute_shader : enable
[   0.790][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_shader_image_load_store : enable
[   0.790][d][vo/gpu-next/libplacebo] [  4] #extension GL_ARB_uniform_buffer_object : enable
[   0.790][d][vo/gpu-next/libplacebo] [  5] #extension GL_ARB_texture_gather : enable
[   0.790][d][vo/gpu-next/libplacebo] [  6] layout(binding=0) uniform  sampler2D _2002;
[   0.790][d][vo/gpu-next/libplacebo] [  7] layout(binding=1) uniform  sampler1D _2007;
[   0.790][d][vo/gpu-next/libplacebo] [  8] layout(binding=2) uniform  sampler2D _2015;
[   0.790][d][vo/gpu-next/libplacebo] [  9] layout(binding=3, rgb10_a2) writeonly restrict uniform image2D _201f;
[   0.790][d][vo/gpu-next/libplacebo] [ 10] layout(std140, binding=4) uniform _2021 {
[   0.790][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec2 _2004;
[   0.790][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=8) vec2 _201a;
[   0.790][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=16) vec2 _201b;
[   0.790][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=24) vec2 _201c;
[   0.790][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=32) vec2 _201d;
[   0.790][d][vo/gpu-next/libplacebo] [ 16]     layout(offset=40) vec2 _201e;
[   0.790][d][vo/gpu-next/libplacebo] [ 17]     layout(offset=48) ivec2 _2020;
[   0.790][d][vo/gpu-next/libplacebo] [ 18] };
[   0.790][d][vo/gpu-next/libplacebo] [ 19] layout (local_size_x = 32, local_size_y = 8) in;
[   0.790][d][vo/gpu-next/libplacebo] [ 20] #define frag_pos(id) (vec2(id) + vec2(0.5))  
[   0.790][d][vo/gpu-next/libplacebo] [ 21] #define frag_map(id) (_201a * frag_pos(id))    
[   0.790][d][vo/gpu-next/libplacebo] [ 22] #define gl_FragCoord vec4(frag_pos(gl_GlobalInvocationID), 0.0, 1.0) 
[   0.790][d][vo/gpu-next/libplacebo] [ 23] #define _2003_map(id) (mix(mix(_201b, _201c, frag_map(id).x),      mix(_201d, _201e, frag_map(id).x), frag_map(id).y)) 
[   0.790][d][vo/gpu-next/libplacebo] [ 24] #define _2003 (_2003_map(gl_GlobalInvocationID)) 
[   0.790][d][vo/gpu-next/libplacebo] [ 25] 
[   0.790][d][vo/gpu-next/libplacebo] [ 26] const float _2005 = float(1); 
[   0.790][d][vo/gpu-next/libplacebo] [ 27] const float _2009 = float(0.99609375); 
[   0.790][d][vo/gpu-next/libplacebo] [ 28] const float _200a = float(0.001953125); 
[   0.790][d][vo/gpu-next/libplacebo] [ 29] #define _2008(x) (_2009 * (x) + _200a) 
[   0.790][d][vo/gpu-next/libplacebo] [ 30] #define _2006(pos) (textureLod(_2007, float(\
[   0.790][d][vo/gpu-next/libplacebo] [ 31]     _2008(float(pos))\
[   0.790][d][vo/gpu-next/libplacebo] [ 32]   ), 0.0).x)
[   0.790][d][vo/gpu-next/libplacebo] [ 33] const float _200b = float(5.105119228363037); 
[   0.790][d][vo/gpu-next/libplacebo] [ 34] shared vec2 _200c_base; 
[   0.790][d][vo/gpu-next/libplacebo] [ 35] const int _200d = 72; 
[   0.790][d][vo/gpu-next/libplacebo] [ 36] const int _200e = 32; 
[   0.790][d][vo/gpu-next/libplacebo] [ 37] const int _200f = 65; 
[   0.790][d][vo/gpu-next/libplacebo] [ 38] const int _2010 = 26; 
[   0.790][d][vo/gpu-next/libplacebo] [ 39] shared float _200c_0[_200e * _200d]; 
[   0.790][d][vo/gpu-next/libplacebo] [ 40] shared float _200c_1[_200e * _200d]; 
[   0.790][d][vo/gpu-next/libplacebo] [ 41] shared float _200c_2[_200e * _200d]; 
[   0.790][d][vo/gpu-next/libplacebo] [ 42] const float _2011 = float(0); 
[   0.790][d][vo/gpu-next/libplacebo] [ 43] const float _2012 = float(1.149015188217163); 
[   0.790][d][vo/gpu-next/libplacebo] [ 44] const float _2013 = float(0.0595848374068737); 
[   0.790][d][vo/gpu-next/libplacebo] [ 45] #define _2014(pos) (texelFetch(_2015, ivec2(pos), 0).x)
[   0.790][d][vo/gpu-next/libplacebo] [ 46] const float _2016 = float(64); 
[   0.790][d][vo/gpu-next/libplacebo] [ 47] const float _2017 = float(64); 
[   0.790][d][vo/gpu-next/libplacebo] [ 48] const float _2018 = float(1); 
[   0.790][d][vo/gpu-next/libplacebo] [ 49] void _2001() {
[   0.790][d][vo/gpu-next/libplacebo] [ 50] // pl_shader_sample_polar                     
[   0.790][d][vo/gpu-next/libplacebo] [ 51] vec4 color = vec4(0.0);                       
[   0.790][d][vo/gpu-next/libplacebo] [ 52] {                                             
[   0.790][d][vo/gpu-next/libplacebo] [ 53] vec2 pos = _2003, pt = _2004;                     
[   0.790][d][vo/gpu-next/libplacebo] [ 54] vec2 size = vec2(textureSize(_2002, 0));        
[   0.790][d][vo/gpu-next/libplacebo] [ 55] vec2 fcoord = fract(pos * size - vec2(0.5));  
[   0.790][d][vo/gpu-next/libplacebo] [ 56] vec2 base = pos - pt * fcoord;                
[   0.790][d][vo/gpu-next/libplacebo] [ 57] vec2 center = base + pt * vec2(0.5);          
[   0.790][d][vo/gpu-next/libplacebo] [ 58] ivec2 offset;                                 
[   0.790][d][vo/gpu-next/libplacebo] [ 59] float w, d, wsum = 0.0;                       
[   0.790][d][vo/gpu-next/libplacebo] [ 60] int idx;                                      
[   0.790][d][vo/gpu-next/libplacebo] [ 61] vec4 c;                                       
[   0.790][d][vo/gpu-next/libplacebo] [ 62] uvec2 base_id = uvec2(0u); 
[   0.790][d][vo/gpu-next/libplacebo] [ 63] if (gl_LocalInvocationID.xy == base_id)               
[   0.790][d][vo/gpu-next/libplacebo] [ 64]     _200c_base = base;                                  
[   0.790][d][vo/gpu-next/libplacebo] [ 65] barrier();                                            
[   0.790][d][vo/gpu-next/libplacebo] [ 66] ivec2 rel = ivec2(round((base - _200c_base) * size));   
[   0.790][d][vo/gpu-next/libplacebo] [ 67] for (int y = int(gl_LocalInvocationID.y); y < _2010; y += 8) {     
[   0.790][d][vo/gpu-next/libplacebo] [ 68] for (int x = int(gl_LocalInvocationID.x); x < _200f; x += 32) {     
[   0.790][d][vo/gpu-next/libplacebo] [ 69] c = textureLod(_2002, _200c_base + pt * vec2(x - 5, y - 5), 0.0);   
[   0.790][d][vo/gpu-next/libplacebo] [ 70] _200c_0[_200d * y + x] = c[0]; 
[   0.790][d][vo/gpu-next/libplacebo] [ 71] _200c_1[_200d * y + x] = c[1]; 
[   0.790][d][vo/gpu-next/libplacebo] [ 72] _200c_2[_200d * y + x] = c[2]; 
[   0.790][d][vo/gpu-next/libplacebo] [ 73] }}                     
[   0.790][d][vo/gpu-next/libplacebo] [ 74] barrier();             
[   0.790][d][vo/gpu-next/libplacebo] [ 75] idx = _200d * rel.y + rel.x + _200d * 0 + 0; 
[   0.790][d][vo/gpu-next/libplacebo] [ 76] idx = _200d * rel.y + rel.x + _200d * 0 + 1; 
[   0.790][d][vo/gpu-next/libplacebo] [ 77] idx = _200d * rel.y + rel.x + _200d * 0 + 2; 
[   0.790][d][vo/gpu-next/libplacebo] [ 78] idx = _200d * rel.y + rel.x + _200d * 0 + 3; 
[   0.790][d][vo/gpu-next/libplacebo] [ 79] idx = _200d * rel.y + rel.x + _200d * 0 + 4; 
[   0.790][d][vo/gpu-next/libplacebo] [ 80] offset = ivec2(-1, -5);
[   0.790][d][vo/gpu-next/libplacebo] [ 81] d = length(vec2(offset) - fcoord);
[   0.790][d][vo/gpu-next/libplacebo] [ 82]     if (d < /*radius*/_200b) {
[   0.790][d][vo/gpu-next/libplacebo] [ 83] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.790][d][vo/gpu-next/libplacebo] [ 84] wsum += w;
[   0.790][d][vo/gpu-next/libplacebo] [ 85]         c[0] = /*in*/_200c_0[idx];
[   0.790][d][vo/gpu-next/libplacebo] [ 86]         c[1] = /*in*/_200c_1[idx];
[   0.790][d][vo/gpu-next/libplacebo] [ 87]         c[2] = /*in*/_200c_2[idx];
[   0.790][d][vo/gpu-next/libplacebo] [ 88]     color[0] += w * c[0];
[   0.790][d][vo/gpu-next/libplacebo] [ 89]     color[1] += w * c[1];
[   0.790][d][vo/gpu-next/libplacebo] [ 90]     color[2] += w * c[2];
[   0.790][d][vo/gpu-next/libplacebo] [ 91]     }
[   0.790][d][vo/gpu-next/libplacebo] [ 92] idx = _200d * rel.y + rel.x + _200d * 0 + 5; 
[   0.790][d][vo/gpu-next/libplacebo] [ 93] offset = ivec2(0, -5);
[   0.790][d][vo/gpu-next/libplacebo] [ 94] d = length(vec2(offset) - fcoord);
[   0.790][d][vo/gpu-next/libplacebo] [ 95]     if (d < /*radius*/_200b) {
[   0.790][d][vo/gpu-next/libplacebo] [ 96] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.790][d][vo/gpu-next/libplacebo] [ 97] wsum += w;
[   0.790][d][vo/gpu-next/libplacebo] [ 98]         c[0] = /*in*/_200c_0[idx];
[   0.790][d][vo/gpu-next/libplacebo] [ 99]         c[1] = /*in*/_200c_1[idx];
[   0.790][d][vo/gpu-next/libplacebo] [100]         c[2] = /*in*/_200c_2[idx];
[   0.790][d][vo/gpu-next/libplacebo] [101]     color[0] += w * c[0];
[   0.790][d][vo/gpu-next/libplacebo] [102]     color[1] += w * c[1];
[   0.790][d][vo/gpu-next/libplacebo] [103]     color[2] += w * c[2];
[   0.790][d][vo/gpu-next/libplacebo] [104]     }
[   0.790][d][vo/gpu-next/libplacebo] [105] idx = _200d * rel.y + rel.x + _200d * 0 + 6; 
[   0.790][d][vo/gpu-next/libplacebo] [106] offset = ivec2(1, -5);
[   0.790][d][vo/gpu-next/libplacebo] [107] d = length(vec2(offset) - fcoord);
[   0.790][d][vo/gpu-next/libplacebo] [108]     if (d < /*radius*/_200b) {
[   0.790][d][vo/gpu-next/libplacebo] [109] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.790][d][vo/gpu-next/libplacebo] [110] wsum += w;
[   0.790][d][vo/gpu-next/libplacebo] [111]         c[0] = /*in*/_200c_0[idx];
[   0.790][d][vo/gpu-next/libplacebo] [112]         c[1] = /*in*/_200c_1[idx];
[   0.790][d][vo/gpu-next/libplacebo] [113]         c[2] = /*in*/_200c_2[idx];
[   0.790][d][vo/gpu-next/libplacebo] [114]     color[0] += w * c[0];
[   0.790][d][vo/gpu-next/libplacebo] [115]     color[1] += w * c[1];
[   0.790][d][vo/gpu-next/libplacebo] [116]     color[2] += w * c[2];
[   0.790][d][vo/gpu-next/libplacebo] [117]     }
[   0.790][d][vo/gpu-next/libplacebo] [118] idx = _200d * rel.y + rel.x + _200d * 0 + 7; 
[   0.790][d][vo/gpu-next/libplacebo] [119] offset = ivec2(2, -5);
[   0.790][d][vo/gpu-next/libplacebo] [120] d = length(vec2(offset) - fcoord);
[   0.790][d][vo/gpu-next/libplacebo] [121]     if (d < /*radius*/_200b) {
[   0.790][d][vo/gpu-next/libplacebo] [122] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.790][d][vo/gpu-next/libplacebo] [123] wsum += w;
[   0.791][d][vo/gpu-next/libplacebo] [124]         c[0] = /*in*/_200c_0[idx];
[   0.791][d][vo/gpu-next/libplacebo] [125]         c[1] = /*in*/_200c_1[idx];
[   0.791][d][vo/gpu-next/libplacebo] [126]         c[2] = /*in*/_200c_2[idx];
[   0.791][d][vo/gpu-next/libplacebo] [127]     color[0] += w * c[0];
[   0.791][d][vo/gpu-next/libplacebo] [128]     color[1] += w * c[1];
[   0.791][d][vo/gpu-next/libplacebo] [129]     color[2] += w * c[2];
[   0.791][d][vo/gpu-next/libplacebo] [130]     }
[   0.791][d][vo/gpu-next/libplacebo] [131] idx = _200d * rel.y + rel.x + _200d * 0 + 8; 
[   0.791][d][vo/gpu-next/libplacebo] [132] idx = _200d * rel.y + rel.x + _200d * 0 + 9; 
[   0.791][d][vo/gpu-next/libplacebo] [133] idx = _200d * rel.y + rel.x + _200d * 0 + 10; 
[   0.791][d][vo/gpu-next/libplacebo] [134] idx = _200d * rel.y + rel.x + _200d * 0 + 11; 
[   0.791][d][vo/gpu-next/libplacebo] [135] idx = _200d * rel.y + rel.x + _200d * 1 + 0; 
[   0.791][d][vo/gpu-next/libplacebo] [136] idx = _200d * rel.y + rel.x + _200d * 1 + 1; 
[   0.791][d][vo/gpu-next/libplacebo] [137] idx = _200d * rel.y + rel.x + _200d * 1 + 2; 
[   0.791][d][vo/gpu-next/libplacebo] [138] offset = ivec2(-3, -4);
[   0.791][d][vo/gpu-next/libplacebo] [139] d = length(vec2(offset) - fcoord);
[   0.791][d][vo/gpu-next/libplacebo] [140]     if (d < /*radius*/_200b) {
[   0.791][d][vo/gpu-next/libplacebo] [141] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.791][d][vo/gpu-next/libplacebo] [142] wsum += w;
[   0.791][d][vo/gpu-next/libplacebo] [143]         c[0] = /*in*/_200c_0[idx];
[   0.791][d][vo/gpu-next/libplacebo] [144]         c[1] = /*in*/_200c_1[idx];
[   0.791][d][vo/gpu-next/libplacebo] [145]         c[2] = /*in*/_200c_2[idx];
[   0.791][d][vo/gpu-next/libplacebo] [146]     color[0] += w * c[0];
[   0.791][d][vo/gpu-next/libplacebo] [147]     color[1] += w * c[1];
[   0.791][d][vo/gpu-next/libplacebo] [148]     color[2] += w * c[2];
[   0.791][d][vo/gpu-next/libplacebo] [149]     }
[   0.791][d][vo/gpu-next/libplacebo] [150] idx = _200d * rel.y + rel.x + _200d * 1 + 3; 
[   0.791][d][vo/gpu-next/libplacebo] [151] offset = ivec2(-2, -4);
[   0.791][d][vo/gpu-next/libplacebo] [152] d = length(vec2(offset) - fcoord);
[   0.791][d][vo/gpu-next/libplacebo] [153]     if (d < /*radius*/_200b) {
[   0.791][d][vo/gpu-next/libplacebo] [154] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.791][d][vo/gpu-next/libplacebo] [155] wsum += w;
[   0.791][d][vo/gpu-next/libplacebo] [156]         c[0] = /*in*/_200c_0[idx];
[   0.791][d][vo/gpu-next/libplacebo] [157]         c[1] = /*in*/_200c_1[idx];
[   0.791][d][vo/gpu-next/libplacebo] [158]         c[2] = /*in*/_200c_2[idx];
[   0.791][d][vo/gpu-next/libplacebo] [159]     color[0] += w * c[0];
[   0.791][d][vo/gpu-next/libplacebo] [160]     color[1] += w * c[1];
[   0.791][d][vo/gpu-next/libplacebo] [161]     color[2] += w * c[2];
[   0.791][d][vo/gpu-next/libplacebo] [162]     }
[   0.791][d][vo/gpu-next/libplacebo] [163] idx = _200d * rel.y + rel.x + _200d * 1 + 4; 
[   0.791][d][vo/gpu-next/libplacebo] [164] offset = ivec2(-1, -4);
[   0.791][d][vo/gpu-next/libplacebo] [165] d = length(vec2(offset) - fcoord);
[   0.791][d][vo/gpu-next/libplacebo] [166]     if (d < /*radius*/_200b) {
[   0.791][d][vo/gpu-next/libplacebo] [167] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.791][d][vo/gpu-next/libplacebo] [168] wsum += w;
[   0.791][d][vo/gpu-next/libplacebo] [169]         c[0] = /*in*/_200c_0[idx];
[   0.791][d][vo/gpu-next/libplacebo] [170]         c[1] = /*in*/_200c_1[idx];
[   0.791][d][vo/gpu-next/libplacebo] [171]         c[2] = /*in*/_200c_2[idx];
[   0.791][d][vo/gpu-next/libplacebo] [172]     color[0] += w * c[0];
[   0.791][d][vo/gpu-next/libplacebo] [173]     color[1] += w * c[1];
[   0.791][d][vo/gpu-next/libplacebo] [174]     color[2] += w * c[2];
[   0.791][d][vo/gpu-next/libplacebo] [175]     }
[   0.791][d][vo/gpu-next/libplacebo] [176] idx = _200d * rel.y + rel.x + _200d * 1 + 5; 
[   0.791][d][vo/gpu-next/libplacebo] [177] offset = ivec2(0, -4);
[   0.791][d][vo/gpu-next/libplacebo] [178] d = length(vec2(offset) - fcoord);
[   0.791][d][vo/gpu-next/libplacebo] [179]     if (d < /*radius*/_200b) {
[   0.791][d][vo/gpu-next/libplacebo] [180] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.791][d][vo/gpu-next/libplacebo] [181] wsum += w;
[   0.791][d][vo/gpu-next/libplacebo] [182]         c[0] = /*in*/_200c_0[idx];
[   0.791][d][vo/gpu-next/libplacebo] [183]         c[1] = /*in*/_200c_1[idx];
[   0.791][d][vo/gpu-next/libplacebo] [184]         c[2] = /*in*/_200c_2[idx];
[   0.791][d][vo/gpu-next/libplacebo] [185]     color[0] += w * c[0];
[   0.791][d][vo/gpu-next/libplacebo] [186]     color[1] += w * c[1];
[   0.791][d][vo/gpu-next/libplacebo] [187]     color[2] += w * c[2];
[   0.791][d][vo/gpu-next/libplacebo] [188]     }
[   0.791][d][vo/gpu-next/libplacebo] [189] idx = _200d * rel.y + rel.x + _200d * 1 + 6; 
[   0.791][d][vo/gpu-next/libplacebo] [190] offset = ivec2(1, -4);
[   0.791][d][vo/gpu-next/libplacebo] [191] d = length(vec2(offset) - fcoord);
[   0.791][d][vo/gpu-next/libplacebo] [192]     if (d < /*radius*/_200b) {
[   0.791][d][vo/gpu-next/libplacebo] [193] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.791][d][vo/gpu-next/libplacebo] [194] wsum += w;
[   0.791][d][vo/gpu-next/libplacebo] [195]         c[0] = /*in*/_200c_0[idx];
[   0.791][d][vo/gpu-next/libplacebo] [196]         c[1] = /*in*/_200c_1[idx];
[   0.791][d][vo/gpu-next/libplacebo] [197]         c[2] = /*in*/_200c_2[idx];
[   0.791][d][vo/gpu-next/libplacebo] [198]     color[0] += w * c[0];
[   0.791][d][vo/gpu-next/libplacebo] [199]     color[1] += w * c[1];
[   0.791][d][vo/gpu-next/libplacebo] [200]     color[2] += w * c[2];
[   0.791][d][vo/gpu-next/libplacebo] [201]     }
[   0.791][d][vo/gpu-next/libplacebo] [202] idx = _200d * rel.y + rel.x + _200d * 1 + 7; 
[   0.791][d][vo/gpu-next/libplacebo] [203] offset = ivec2(2, -4);
[   0.791][d][vo/gpu-next/libplacebo] [204] d = length(vec2(offset) - fcoord);
[   0.791][d][vo/gpu-next/libplacebo] [205]     if (d < /*radius*/_200b) {
[   0.791][d][vo/gpu-next/libplacebo] [206] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.791][d][vo/gpu-next/libplacebo] [207] wsum += w;
[   0.791][d][vo/gpu-next/libplacebo] [208]         c[0] = /*in*/_200c_0[idx];
[   0.791][d][vo/gpu-next/libplacebo] [209]         c[1] = /*in*/_200c_1[idx];
[   0.791][d][vo/gpu-next/libplacebo] [210]         c[2] = /*in*/_200c_2[idx];
[   0.791][d][vo/gpu-next/libplacebo] [211]     color[0] += w * c[0];
[   0.791][d][vo/gpu-next/libplacebo] [212]     color[1] += w * c[1];
[   0.791][d][vo/gpu-next/libplacebo] [213]     color[2] += w * c[2];
[   0.791][d][vo/gpu-next/libplacebo] [214]     }
[   0.791][d][vo/gpu-next/libplacebo] [215] idx = _200d * rel.y + rel.x + _200d * 1 + 8; 
[   0.791][d][vo/gpu-next/libplacebo] [216] offset = ivec2(3, -4);
[   0.791][d][vo/gpu-next/libplacebo] [217] d = length(vec2(offset) - fcoord);
[   0.791][d][vo/gpu-next/libplacebo] [218]     if (d < /*radius*/_200b) {
[   0.791][d][vo/gpu-next/libplacebo] [219] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.791][d][vo/gpu-next/libplacebo] [220] wsum += w;
[   0.791][d][vo/gpu-next/libplacebo] [221]         c[0] = /*in*/_200c_0[idx];
[   0.791][d][vo/gpu-next/libplacebo] [222]         c[1] = /*in*/_200c_1[idx];
[   0.791][d][vo/gpu-next/libplacebo] [223]         c[2] = /*in*/_200c_2[idx];
[   0.791][d][vo/gpu-next/libplacebo] [224]     color[0] += w * c[0];
[   0.791][d][vo/gpu-next/libplacebo] [225]     color[1] += w * c[1];
[   0.791][d][vo/gpu-next/libplacebo] [226]     color[2] += w * c[2];
[   0.791][d][vo/gpu-next/libplacebo] [227]     }
[   0.791][d][vo/gpu-next/libplacebo] [228] idx = _200d * rel.y + rel.x + _200d * 1 + 9; 
[   0.791][d][vo/gpu-next/libplacebo] [229] offset = ivec2(4, -4);
[   0.791][d][vo/gpu-next/libplacebo] [230] d = length(vec2(offset) - fcoord);
[   0.791][d][vo/gpu-next/libplacebo] [231]     if (d < /*radius*/_200b) {
[   0.791][d][vo/gpu-next/libplacebo] [232] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.791][d][vo/gpu-next/libplacebo] [233] wsum += w;
[   0.791][d][vo/gpu-next/libplacebo] [234]         c[0] = /*in*/_200c_0[idx];
[   0.791][d][vo/gpu-next/libplacebo] [235]         c[1] = /*in*/_200c_1[idx];
[   0.791][d][vo/gpu-next/libplacebo] [236]         c[2] = /*in*/_200c_2[idx];
[   0.791][d][vo/gpu-next/libplacebo] [237]     color[0] += w * c[0];
[   0.791][d][vo/gpu-next/libplacebo] [238]     color[1] += w * c[1];
[   0.791][d][vo/gpu-next/libplacebo] [239]     color[2] += w * c[2];
[   0.791][d][vo/gpu-next/libplacebo] [240]     }
[   0.791][d][vo/gpu-next/libplacebo] [241] idx = _200d * rel.y + rel.x + _200d * 1 + 10; 
[   0.791][d][vo/gpu-next/libplacebo] [242] idx = _200d * rel.y + rel.x + _200d * 1 + 11; 
[   0.791][d][vo/gpu-next/libplacebo] [243] idx = _200d * rel.y + rel.x + _200d * 2 + 0; 
[   0.791][d][vo/gpu-next/libplacebo] [244] idx = _200d * rel.y + rel.x + _200d * 2 + 1; 
[   0.791][d][vo/gpu-next/libplacebo] [245] offset = ivec2(-4, -3);
[   0.791][d][vo/gpu-next/libplacebo] [246] d = length(vec2(offset) - fcoord);
[   0.791][d][vo/gpu-next/libplacebo] [247]     if (d < /*radius*/_200b) {
[   0.791][d][vo/gpu-next/libplacebo] [248] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.791][d][vo/gpu-next/libplacebo] [249] wsum += w;
[   0.791][d][vo/gpu-next/libplacebo] [250]         c[0] = /*in*/_200c_0[idx];
[   0.791][d][vo/gpu-next/libplacebo] [251]         c[1] = /*in*/_200c_1[idx];
[   0.791][d][vo/gpu-next/libplacebo] [252]         c[2] = /*in*/_200c_2[idx];
[   0.791][d][vo/gpu-next/libplacebo] [253]     color[0] += w * c[0];
[   0.791][d][vo/gpu-next/libplacebo] [254]     color[1] += w * c[1];
[   0.791][d][vo/gpu-next/libplacebo] [255]     color[2] += w * c[2];
[   0.791][d][vo/gpu-next/libplacebo] [256]     }
[   0.791][d][vo/gpu-next/libplacebo] [257] idx = _200d * rel.y + rel.x + _200d * 2 + 2; 
[   0.791][d][vo/gpu-next/libplacebo] [258] offset = ivec2(-3, -3);
[   0.791][d][vo/gpu-next/libplacebo] [259] d = length(vec2(offset) - fcoord);
[   0.791][d][vo/gpu-next/libplacebo] [260]     if (d < /*radius*/_200b) {
[   0.791][d][vo/gpu-next/libplacebo] [261] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.791][d][vo/gpu-next/libplacebo] [262] wsum += w;
[   0.791][d][vo/gpu-next/libplacebo] [263]         c[0] = /*in*/_200c_0[idx];
[   0.791][d][vo/gpu-next/libplacebo] [264]         c[1] = /*in*/_200c_1[idx];
[   0.791][d][vo/gpu-next/libplacebo] [265]         c[2] = /*in*/_200c_2[idx];
[   0.791][d][vo/gpu-next/libplacebo] [266]     color[0] += w * c[0];
[   0.791][d][vo/gpu-next/libplacebo] [267]     color[1] += w * c[1];
[   0.791][d][vo/gpu-next/libplacebo] [268]     color[2] += w * c[2];
[   0.791][d][vo/gpu-next/libplacebo] [269]     }
[   0.791][d][vo/gpu-next/libplacebo] [270] idx = _200d * rel.y + rel.x + _200d * 2 + 3; 
[   0.791][d][vo/gpu-next/libplacebo] [271] offset = ivec2(-2, -3);
[   0.791][d][vo/gpu-next/libplacebo] [272] d = length(vec2(offset) - fcoord);
[   0.791][d][vo/gpu-next/libplacebo] [273] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.791][d][vo/gpu-next/libplacebo] [274] wsum += w;
[   0.791][d][vo/gpu-next/libplacebo] [275]         c[0] = /*in*/_200c_0[idx];
[   0.791][d][vo/gpu-next/libplacebo] [276]         c[1] = /*in*/_200c_1[idx];
[   0.791][d][vo/gpu-next/libplacebo] [277]         c[2] = /*in*/_200c_2[idx];
[   0.791][d][vo/gpu-next/libplacebo] [278]     color[0] += w * c[0];
[   0.791][d][vo/gpu-next/libplacebo] [279]     color[1] += w * c[1];
[   0.791][d][vo/gpu-next/libplacebo] [280]     color[2] += w * c[2];
[   0.791][d][vo/gpu-next/libplacebo] [281] idx = _200d * rel.y + rel.x + _200d * 2 + 4; 
[   0.792][d][vo/gpu-next/libplacebo] [282] offset = ivec2(-1, -3);
[   0.792][d][vo/gpu-next/libplacebo] [283] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [284] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [285] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [286]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [287]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [288]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [289]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [290]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [291]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [292] idx = _200d * rel.y + rel.x + _200d * 2 + 5; 
[   0.792][d][vo/gpu-next/libplacebo] [293] offset = ivec2(0, -3);
[   0.792][d][vo/gpu-next/libplacebo] [294] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [295] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [296] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [297]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [298]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [299]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [300]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [301]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [302]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [303] idx = _200d * rel.y + rel.x + _200d * 2 + 6; 
[   0.792][d][vo/gpu-next/libplacebo] [304] offset = ivec2(1, -3);
[   0.792][d][vo/gpu-next/libplacebo] [305] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [306] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [307] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [308]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [309]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [310]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [311]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [312]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [313]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [314] idx = _200d * rel.y + rel.x + _200d * 2 + 7; 
[   0.792][d][vo/gpu-next/libplacebo] [315] offset = ivec2(2, -3);
[   0.792][d][vo/gpu-next/libplacebo] [316] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [317] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [318] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [319]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [320]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [321]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [322]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [323]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [324]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [325] idx = _200d * rel.y + rel.x + _200d * 2 + 8; 
[   0.792][d][vo/gpu-next/libplacebo] [326] offset = ivec2(3, -3);
[   0.792][d][vo/gpu-next/libplacebo] [327] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [328] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [329] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [330]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [331]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [332]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [333]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [334]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [335]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [336] idx = _200d * rel.y + rel.x + _200d * 2 + 9; 
[   0.792][d][vo/gpu-next/libplacebo] [337] offset = ivec2(4, -3);
[   0.792][d][vo/gpu-next/libplacebo] [338] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [339]     if (d < /*radius*/_200b) {
[   0.792][d][vo/gpu-next/libplacebo] [340] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [341] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [342]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [343]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [344]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [345]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [346]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [347]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [348]     }
[   0.792][d][vo/gpu-next/libplacebo] [349] idx = _200d * rel.y + rel.x + _200d * 2 + 10; 
[   0.792][d][vo/gpu-next/libplacebo] [350] offset = ivec2(5, -3);
[   0.792][d][vo/gpu-next/libplacebo] [351] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [352]     if (d < /*radius*/_200b) {
[   0.792][d][vo/gpu-next/libplacebo] [353] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [354] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [355]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [356]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [357]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [358]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [359]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [360]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [361]     }
[   0.792][d][vo/gpu-next/libplacebo] [362] idx = _200d * rel.y + rel.x + _200d * 2 + 11; 
[   0.792][d][vo/gpu-next/libplacebo] [363] idx = _200d * rel.y + rel.x + _200d * 3 + 0; 
[   0.792][d][vo/gpu-next/libplacebo] [364] idx = _200d * rel.y + rel.x + _200d * 3 + 1; 
[   0.792][d][vo/gpu-next/libplacebo] [365] offset = ivec2(-4, -2);
[   0.792][d][vo/gpu-next/libplacebo] [366] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [367]     if (d < /*radius*/_200b) {
[   0.792][d][vo/gpu-next/libplacebo] [368] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [369] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [370]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [371]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [372]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [373]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [374]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [375]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [376]     }
[   0.792][d][vo/gpu-next/libplacebo] [377] idx = _200d * rel.y + rel.x + _200d * 3 + 2; 
[   0.792][d][vo/gpu-next/libplacebo] [378] offset = ivec2(-3, -2);
[   0.792][d][vo/gpu-next/libplacebo] [379] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [380] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [381] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [382]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [383]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [384]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [385]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [386]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [387]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [388] idx = _200d * rel.y + rel.x + _200d * 3 + 3; 
[   0.792][d][vo/gpu-next/libplacebo] [389] offset = ivec2(-2, -2);
[   0.792][d][vo/gpu-next/libplacebo] [390] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [391] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [392] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [393]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [394]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [395]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [396]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [397]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [398]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [399] idx = _200d * rel.y + rel.x + _200d * 3 + 4; 
[   0.792][d][vo/gpu-next/libplacebo] [400] offset = ivec2(-1, -2);
[   0.792][d][vo/gpu-next/libplacebo] [401] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [402] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [403] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [404]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [405]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [406]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [407]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [408]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [409]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [410] idx = _200d * rel.y + rel.x + _200d * 3 + 5; 
[   0.792][d][vo/gpu-next/libplacebo] [411] offset = ivec2(0, -2);
[   0.792][d][vo/gpu-next/libplacebo] [412] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [413] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [414] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [415]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [416]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [417]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [418]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [419]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [420]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [421] idx = _200d * rel.y + rel.x + _200d * 3 + 6; 
[   0.792][d][vo/gpu-next/libplacebo] [422] offset = ivec2(1, -2);
[   0.792][d][vo/gpu-next/libplacebo] [423] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [424] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [425] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [426]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [427]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [428]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [429]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [430]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [431]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [432] idx = _200d * rel.y + rel.x + _200d * 3 + 7; 
[   0.792][d][vo/gpu-next/libplacebo] [433] offset = ivec2(2, -2);
[   0.792][d][vo/gpu-next/libplacebo] [434] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [435] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [436] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [437]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [438]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [439]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [440]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [441]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [442]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [443] idx = _200d * rel.y + rel.x + _200d * 3 + 8; 
[   0.792][d][vo/gpu-next/libplacebo] [444] offset = ivec2(3, -2);
[   0.792][d][vo/gpu-next/libplacebo] [445] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [446] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [447] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [448]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [449]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [450]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [451]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [452]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [453]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [454] idx = _200d * rel.y + rel.x + _200d * 3 + 9; 
[   0.792][d][vo/gpu-next/libplacebo] [455] offset = ivec2(4, -2);
[   0.792][d][vo/gpu-next/libplacebo] [456] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [457] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [458] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [459]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [460]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [461]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [462]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [463]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [464]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [465] idx = _200d * rel.y + rel.x + _200d * 3 + 10; 
[   0.792][d][vo/gpu-next/libplacebo] [466] offset = ivec2(5, -2);
[   0.792][d][vo/gpu-next/libplacebo] [467] d = length(vec2(offset) - fcoord);
[   0.792][d][vo/gpu-next/libplacebo] [468]     if (d < /*radius*/_200b) {
[   0.792][d][vo/gpu-next/libplacebo] [469] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.792][d][vo/gpu-next/libplacebo] [470] wsum += w;
[   0.792][d][vo/gpu-next/libplacebo] [471]         c[0] = /*in*/_200c_0[idx];
[   0.792][d][vo/gpu-next/libplacebo] [472]         c[1] = /*in*/_200c_1[idx];
[   0.792][d][vo/gpu-next/libplacebo] [473]         c[2] = /*in*/_200c_2[idx];
[   0.792][d][vo/gpu-next/libplacebo] [474]     color[0] += w * c[0];
[   0.792][d][vo/gpu-next/libplacebo] [475]     color[1] += w * c[1];
[   0.792][d][vo/gpu-next/libplacebo] [476]     color[2] += w * c[2];
[   0.792][d][vo/gpu-next/libplacebo] [477]     }
[   0.792][d][vo/gpu-next/libplacebo] [478] idx = _200d * rel.y + rel.x + _200d * 3 + 11; 
[   0.792][d][vo/gpu-next/libplacebo] [479] idx = _200d * rel.y + rel.x + _200d * 4 + 0; 
[   0.793][d][vo/gpu-next/libplacebo] [480] offset = ivec2(-5, -1);
[   0.793][d][vo/gpu-next/libplacebo] [481] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [482]     if (d < /*radius*/_200b) {
[   0.793][d][vo/gpu-next/libplacebo] [483] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [484] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [485]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [486]         c[1] = /*in*/_200c_1[idx];
[   0.793][d][vo/gpu-next/libplacebo] [487]         c[2] = /*in*/_200c_2[idx];
[   0.793][d][vo/gpu-next/libplacebo] [488]     color[0] += w * c[0];
[   0.793][d][vo/gpu-next/libplacebo] [489]     color[1] += w * c[1];
[   0.793][d][vo/gpu-next/libplacebo] [490]     color[2] += w * c[2];
[   0.793][d][vo/gpu-next/libplacebo] [491]     }
[   0.793][d][vo/gpu-next/libplacebo] [492] idx = _200d * rel.y + rel.x + _200d * 4 + 1; 
[   0.793][d][vo/gpu-next/libplacebo] [493] offset = ivec2(-4, -1);
[   0.793][d][vo/gpu-next/libplacebo] [494] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [495]     if (d < /*radius*/_200b) {
[   0.793][d][vo/gpu-next/libplacebo] [496] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [497] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [498]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [499]         c[1] = /*in*/_200c_1[idx];
[   0.793][d][vo/gpu-next/libplacebo] [500]         c[2] = /*in*/_200c_2[idx];
[   0.793][d][vo/gpu-next/libplacebo] [501]     color[0] += w * c[0];
[   0.793][d][vo/gpu-next/libplacebo] [502]     color[1] += w * c[1];
[   0.793][d][vo/gpu-next/libplacebo] [503]     color[2] += w * c[2];
[   0.793][d][vo/gpu-next/libplacebo] [504]     }
[   0.793][d][vo/gpu-next/libplacebo] [505] idx = _200d * rel.y + rel.x + _200d * 4 + 2; 
[   0.793][d][vo/gpu-next/libplacebo] [506] offset = ivec2(-3, -1);
[   0.793][d][vo/gpu-next/libplacebo] [507] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [508] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [509] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [510]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [511]         c[1] = /*in*/_200c_1[idx];
[   0.793][d][vo/gpu-next/libplacebo] [512]         c[2] = /*in*/_200c_2[idx];
[   0.793][d][vo/gpu-next/libplacebo] [513]     color[0] += w * c[0];
[   0.793][d][vo/gpu-next/libplacebo] [514]     color[1] += w * c[1];
[   0.793][d][vo/gpu-next/libplacebo] [515]     color[2] += w * c[2];
[   0.793][d][vo/gpu-next/libplacebo] [516] idx = _200d * rel.y + rel.x + _200d * 4 + 3; 
[   0.793][d][vo/gpu-next/libplacebo] [517] offset = ivec2(-2, -1);
[   0.793][d][vo/gpu-next/libplacebo] [518] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [519] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [520] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [521]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [522]         c[1] = /*in*/_200c_1[idx];
[   0.793][d][vo/gpu-next/libplacebo] [523]         c[2] = /*in*/_200c_2[idx];
[   0.793][d][vo/gpu-next/libplacebo] [524]     color[0] += w * c[0];
[   0.793][d][vo/gpu-next/libplacebo] [525]     color[1] += w * c[1];
[   0.793][d][vo/gpu-next/libplacebo] [526]     color[2] += w * c[2];
[   0.793][d][vo/gpu-next/libplacebo] [527] idx = _200d * rel.y + rel.x + _200d * 4 + 4; 
[   0.793][d][vo/gpu-next/libplacebo] [528] offset = ivec2(-1, -1);
[   0.793][d][vo/gpu-next/libplacebo] [529] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [530] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [531] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [532]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [533]         c[1] = /*in*/_200c_1[idx];
[   0.793][d][vo/gpu-next/libplacebo] [534]         c[2] = /*in*/_200c_2[idx];
[   0.793][d][vo/gpu-next/libplacebo] [535]     color[0] += w * c[0];
[   0.793][d][vo/gpu-next/libplacebo] [536]     color[1] += w * c[1];
[   0.793][d][vo/gpu-next/libplacebo] [537]     color[2] += w * c[2];
[   0.793][d][vo/gpu-next/libplacebo] [538] idx = _200d * rel.y + rel.x + _200d * 4 + 5; 
[   0.793][d][vo/gpu-next/libplacebo] [539] offset = ivec2(0, -1);
[   0.793][d][vo/gpu-next/libplacebo] [540] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [541] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [542] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [543]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [544]         c[1] = /*in*/_200c_1[idx];
[   0.793][d][vo/gpu-next/libplacebo] [545]         c[2] = /*in*/_200c_2[idx];
[   0.793][d][vo/gpu-next/libplacebo] [546]     color[0] += w * c[0];
[   0.793][d][vo/gpu-next/libplacebo] [547]     color[1] += w * c[1];
[   0.793][d][vo/gpu-next/libplacebo] [548]     color[2] += w * c[2];
[   0.793][d][vo/gpu-next/libplacebo] [549] idx = _200d * rel.y + rel.x + _200d * 4 + 6; 
[   0.793][d][vo/gpu-next/libplacebo] [550] offset = ivec2(1, -1);
[   0.793][d][vo/gpu-next/libplacebo] [551] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [552] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [553] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [554]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [555]         c[1] = /*in*/_200c_1[idx];
[   0.793][d][vo/gpu-next/libplacebo] [556]         c[2] = /*in*/_200c_2[idx];
[   0.793][d][vo/gpu-next/libplacebo] [557]     color[0] += w * c[0];
[   0.793][d][vo/gpu-next/libplacebo] [558]     color[1] += w * c[1];
[   0.793][d][vo/gpu-next/libplacebo] [559]     color[2] += w * c[2];
[   0.793][d][vo/gpu-next/libplacebo] [560] idx = _200d * rel.y + rel.x + _200d * 4 + 7; 
[   0.793][d][vo/gpu-next/libplacebo] [561] offset = ivec2(2, -1);
[   0.793][d][vo/gpu-next/libplacebo] [562] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [563] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [564] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [565]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [566]         c[1] = /*in*/_200c_1[idx];
[   0.793][d][vo/gpu-next/libplacebo] [567]         c[2] = /*in*/_200c_2[idx];
[   0.793][d][vo/gpu-next/libplacebo] [568]     color[0] += w * c[0];
[   0.793][d][vo/gpu-next/libplacebo] [569]     color[1] += w * c[1];
[   0.793][d][vo/gpu-next/libplacebo] [570]     color[2] += w * c[2];
[   0.793][d][vo/gpu-next/libplacebo] [571] idx = _200d * rel.y + rel.x + _200d * 4 + 8; 
[   0.793][d][vo/gpu-next/libplacebo] [572] offset = ivec2(3, -1);
[   0.793][d][vo/gpu-next/libplacebo] [573] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [574] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [575] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [576]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [577]         c[1] = /*in*/_200c_1[idx];
[   0.793][d][vo/gpu-next/libplacebo] [578]         c[2] = /*in*/_200c_2[idx];
[   0.793][d][vo/gpu-next/libplacebo] [579]     color[0] += w * c[0];
[   0.793][d][vo/gpu-next/libplacebo] [580]     color[1] += w * c[1];
[   0.793][d][vo/gpu-next/libplacebo] [581]     color[2] += w * c[2];
[   0.793][d][vo/gpu-next/libplacebo] [582] idx = _200d * rel.y + rel.x + _200d * 4 + 9; 
[   0.793][d][vo/gpu-next/libplacebo] [583] offset = ivec2(4, -1);
[   0.793][d][vo/gpu-next/libplacebo] [584] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [585] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [586] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [587]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [588]         c[1] = /*in*/_200c_1[idx];
[   0.793][d][vo/gpu-next/libplacebo] [589]         c[2] = /*in*/_200c_2[idx];
[   0.793][d][vo/gpu-next/libplacebo] [590]     color[0] += w * c[0];
[   0.793][d][vo/gpu-next/libplacebo] [591]     color[1] += w * c[1];
[   0.793][d][vo/gpu-next/libplacebo] [592]     color[2] += w * c[2];
[   0.793][d][vo/gpu-next/libplacebo] [593] idx = _200d * rel.y + rel.x + _200d * 4 + 10; 
[   0.793][d][vo/gpu-next/libplacebo] [594] offset = ivec2(5, -1);
[   0.793][d][vo/gpu-next/libplacebo] [595] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [596]     if (d < /*radius*/_200b) {
[   0.793][d][vo/gpu-next/libplacebo] [597] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [598] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [599]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [600]         c[1] = /*in*/_200c_1[idx];
[   0.793][d][vo/gpu-next/libplacebo] [601]         c[2] = /*in*/_200c_2[idx];
[   0.793][d][vo/gpu-next/libplacebo] [602]     color[0] += w * c[0];
[   0.793][d][vo/gpu-next/libplacebo] [603]     color[1] += w * c[1];
[   0.793][d][vo/gpu-next/libplacebo] [604]     color[2] += w * c[2];
[   0.793][d][vo/gpu-next/libplacebo] [605]     }
[   0.793][d][vo/gpu-next/libplacebo] [606] idx = _200d * rel.y + rel.x + _200d * 4 + 11; 
[   0.793][d][vo/gpu-next/libplacebo] [607] offset = ivec2(6, -1);
[   0.793][d][vo/gpu-next/libplacebo] [608] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [609]     if (d < /*radius*/_200b) {
[   0.793][d][vo/gpu-next/libplacebo] [610] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [611] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [612]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [613]         c[1] = /*in*/_200c_1[idx];
[   0.793][d][vo/gpu-next/libplacebo] [614]         c[2] = /*in*/_200c_2[idx];
[   0.793][d][vo/gpu-next/libplacebo] [615]     color[0] += w * c[0];
[   0.793][d][vo/gpu-next/libplacebo] [616]     color[1] += w * c[1];
[   0.793][d][vo/gpu-next/libplacebo] [617]     color[2] += w * c[2];
[   0.793][d][vo/gpu-next/libplacebo] [618]     }
[   0.793][d][vo/gpu-next/libplacebo] [619] idx = _200d * rel.y + rel.x + _200d * 5 + 0; 
[   0.793][d][vo/gpu-next/libplacebo] [620] offset = ivec2(-5, 0);
[   0.793][d][vo/gpu-next/libplacebo] [621] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [622]     if (d < /*radius*/_200b) {
[   0.793][d][vo/gpu-next/libplacebo] [623] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [624] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [625]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [626]         c[1] = /*in*/_200c_1[idx];
[   0.793][d][vo/gpu-next/libplacebo] [627]         c[2] = /*in*/_200c_2[idx];
[   0.793][d][vo/gpu-next/libplacebo] [628]     color[0] += w * c[0];
[   0.793][d][vo/gpu-next/libplacebo] [629]     color[1] += w * c[1];
[   0.793][d][vo/gpu-next/libplacebo] [630]     color[2] += w * c[2];
[   0.793][d][vo/gpu-next/libplacebo] [631]     }
[   0.793][d][vo/gpu-next/libplacebo] [632] idx = _200d * rel.y + rel.x + _200d * 5 + 1; 
[   0.793][d][vo/gpu-next/libplacebo] [633] offset = ivec2(-4, 0);
[   0.793][d][vo/gpu-next/libplacebo] [634] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [635]     if (d < /*radius*/_200b) {
[   0.793][d][vo/gpu-next/libplacebo] [636] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [637] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [638]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [639]         c[1] = /*in*/_200c_1[idx];
[   0.793][d][vo/gpu-next/libplacebo] [640]         c[2] = /*in*/_200c_2[idx];
[   0.793][d][vo/gpu-next/libplacebo] [641]     color[0] += w * c[0];
[   0.793][d][vo/gpu-next/libplacebo] [642]     color[1] += w * c[1];
[   0.793][d][vo/gpu-next/libplacebo] [643]     color[2] += w * c[2];
[   0.793][d][vo/gpu-next/libplacebo] [644]     }
[   0.793][d][vo/gpu-next/libplacebo] [645] idx = _200d * rel.y + rel.x + _200d * 5 + 2; 
[   0.793][d][vo/gpu-next/libplacebo] [646] offset = ivec2(-3, 0);
[   0.793][d][vo/gpu-next/libplacebo] [647] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [648] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [649] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [650]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [651]         c[1] = /*in*/_200c_1[idx];
[   0.793][d][vo/gpu-next/libplacebo] [652]         c[2] = /*in*/_200c_2[idx];
[   0.793][d][vo/gpu-next/libplacebo] [653]     color[0] += w * c[0];
[   0.793][d][vo/gpu-next/libplacebo] [654]     color[1] += w * c[1];
[   0.793][d][vo/gpu-next/libplacebo] [655]     color[2] += w * c[2];
[   0.793][d][vo/gpu-next/libplacebo] [656] idx = _200d * rel.y + rel.x + _200d * 5 + 3; 
[   0.793][d][vo/gpu-next/libplacebo] [657] offset = ivec2(-2, 0);
[   0.793][d][vo/gpu-next/libplacebo] [658] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [659] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [660] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [661]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [662]         c[1] = /*in*/_200c_1[idx];
[   0.793][d][vo/gpu-next/libplacebo] [663]         c[2] = /*in*/_200c_2[idx];
[   0.793][d][vo/gpu-next/libplacebo] [664]     color[0] += w * c[0];
[   0.793][d][vo/gpu-next/libplacebo] [665]     color[1] += w * c[1];
[   0.793][d][vo/gpu-next/libplacebo] [666]     color[2] += w * c[2];
[   0.793][d][vo/gpu-next/libplacebo] [667] idx = _200d * rel.y + rel.x + _200d * 5 + 4; 
[   0.793][d][vo/gpu-next/libplacebo] [668] offset = ivec2(-1, 0);
[   0.793][d][vo/gpu-next/libplacebo] [669] d = length(vec2(offset) - fcoord);
[   0.793][d][vo/gpu-next/libplacebo] [670] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.793][d][vo/gpu-next/libplacebo] [671] wsum += w;
[   0.793][d][vo/gpu-next/libplacebo] [672]         c[0] = /*in*/_200c_0[idx];
[   0.793][d][vo/gpu-next/libplacebo] [673]         c[1] = /*in*/_200c_1[idx];
[   0.794][d][vo/gpu-next/libplacebo] [674]         c[2] = /*in*/_200c_2[idx];
[   0.794][d][vo/gpu-next/libplacebo] [675]     color[0] += w * c[0];
[   0.794][d][vo/gpu-next/libplacebo] [676]     color[1] += w * c[1];
[   0.794][d][vo/gpu-next/libplacebo] [677]     color[2] += w * c[2];
[   0.794][d][vo/gpu-next/libplacebo] [678] idx = _200d * rel.y + rel.x + _200d * 5 + 5; 
[   0.794][d][vo/gpu-next/libplacebo] [679] offset = ivec2(0, 0);
[   0.794][d][vo/gpu-next/libplacebo] [680] d = length(vec2(offset) - fcoord);
[   0.794][d][vo/gpu-next/libplacebo] [681] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.794][d][vo/gpu-next/libplacebo] [682] wsum += w;
[   0.794][d][vo/gpu-next/libplacebo] [683]         c[0] = /*in*/_200c_0[idx];
[   0.794][d][vo/gpu-next/libplacebo] [684]         c[1] = /*in*/_200c_1[idx];
[   0.794][d][vo/gpu-next/libplacebo] [685]         c[2] = /*in*/_200c_2[idx];
[   0.794][d][vo/gpu-next/libplacebo] [686]     color[0] += w * c[0];
[   0.794][d][vo/gpu-next/libplacebo] [687]     color[1] += w * c[1];
[   0.794][d][vo/gpu-next/libplacebo] [688]     color[2] += w * c[2];
[   0.794][d][vo/gpu-next/libplacebo] [689] idx = _200d * rel.y + rel.x + _200d * 5 + 6; 
[   0.794][d][vo/gpu-next/libplacebo] [690] offset = ivec2(1, 0);
[   0.794][d][vo/gpu-next/libplacebo] [691] d = length(vec2(offset) - fcoord);
[   0.794][d][vo/gpu-next/libplacebo] [692] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.794][d][vo/gpu-next/libplacebo] [693] wsum += w;
[   0.794][d][vo/gpu-next/libplacebo] [694]         c[0] = /*in*/_200c_0[idx];
[   0.794][d][vo/gpu-next/libplacebo] [695]         c[1] = /*in*/_200c_1[idx];
[   0.794][d][vo/gpu-next/libplacebo] [696]         c[2] = /*in*/_200c_2[idx];
[   0.794][d][vo/gpu-next/libplacebo] [697]     color[0] += w * c[0];
[   0.794][d][vo/gpu-next/libplacebo] [698]     color[1] += w * c[1];
[   0.794][d][vo/gpu-next/libplacebo] [699]     color[2] += w * c[2];
[   0.794][d][vo/gpu-next/libplacebo] [700] idx = _200d * rel.y + rel.x + _200d * 5 + 7; 
[   0.794][d][vo/gpu-next/libplacebo] [701] offset = ivec2(2, 0);
[   0.794][d][vo/gpu-next/libplacebo] [702] d = length(vec2(offset) - fcoord);
[   0.794][d][vo/gpu-next/libplacebo] [703] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.794][d][vo/gpu-next/libplacebo] [704] wsum += w;
[   0.794][d][vo/gpu-next/libplacebo] [705]         c[0] = /*in*/_200c_0[idx];
[   0.794][d][vo/gpu-next/libplacebo] [706]         c[1] = /*in*/_200c_1[idx];
[   0.794][d][vo/gpu-next/libplacebo] [707]         c[2] = /*in*/_200c_2[idx];
[   0.794][d][vo/gpu-next/libplacebo] [708]     color[0] += w * c[0];
[   0.794][d][vo/gpu-next/libplacebo] [709]     color[1] += w * c[1];
[   0.794][d][vo/gpu-next/libplacebo] [710]     color[2] += w * c[2];
[   0.794][d][vo/gpu-next/libplacebo] [711] idx = _200d * rel.y + rel.x + _200d * 5 + 8; 
[   0.794][d][vo/gpu-next/libplacebo] [712] offset = ivec2(3, 0);
[   0.794][d][vo/gpu-next/libplacebo] [713] d = length(vec2(offset) - fcoord);
[   0.794][d][vo/gpu-next/libplacebo] [714] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.794][d][vo/gpu-next/libplacebo] [715] wsum += w;
[   0.794][d][vo/gpu-next/libplacebo] [716]         c[0] = /*in*/_200c_0[idx];
[   0.794][d][vo/gpu-next/libplacebo] [717]         c[1] = /*in*/_200c_1[idx];
[   0.794][d][vo/gpu-next/libplacebo] [718]         c[2] = /*in*/_200c_2[idx];
[   0.794][d][vo/gpu-next/libplacebo] [719]     color[0] += w * c[0];
[   0.794][d][vo/gpu-next/libplacebo] [720]     color[1] += w * c[1];
[   0.794][d][vo/gpu-next/libplacebo] [721]     color[2] += w * c[2];
[   0.794][d][vo/gpu-next/libplacebo] [722] idx = _200d * rel.y + rel.x + _200d * 5 + 9; 
[   0.794][d][vo/gpu-next/libplacebo] [723] offset = ivec2(4, 0);
[   0.794][d][vo/gpu-next/libplacebo] [724] d = length(vec2(offset) - fcoord);
[   0.794][d][vo/gpu-next/libplacebo] [725] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.794][d][vo/gpu-next/libplacebo] [726] wsum += w;
[   0.794][d][vo/gpu-next/libplacebo] [727]         c[0] = /*in*/_200c_0[idx];
[   0.794][d][vo/gpu-next/libplacebo] [728]         c[1] = /*in*/_200c_1[idx];
[   0.794][d][vo/gpu-next/libplacebo] [729]         c[2] = /*in*/_200c_2[idx];
[   0.794][d][vo/gpu-next/libplacebo] [730]     color[0] += w * c[0];
[   0.794][d][vo/gpu-next/libplacebo] [731]     color[1] += w * c[1];
[   0.794][d][vo/gpu-next/libplacebo] [732]     color[2] += w * c[2];
[   0.794][d][vo/gpu-next/libplacebo] [733] idx = _200d * rel.y + rel.x + _200d * 5 + 10; 
[   0.794][d][vo/gpu-next/libplacebo] [734] offset = ivec2(5, 0);
[   0.794][d][vo/gpu-next/libplacebo] [735] d = length(vec2(offset) - fcoord);
[   0.794][d][vo/gpu-next/libplacebo] [736]     if (d < /*radius*/_200b) {
[   0.794][d][vo/gpu-next/libplacebo] [737] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.794][d][vo/gpu-next/libplacebo] [738] wsum += w;
[   0.794][d][vo/gpu-next/libplacebo] [739]         c[0] = /*in*/_200c_0[idx];
[   0.794][d][vo/gpu-next/libplacebo] [740]         c[1] = /*in*/_200c_1[idx];
[   0.794][d][vo/gpu-next/libplacebo] [741]         c[2] = /*in*/_200c_2[idx];
[   0.794][d][vo/gpu-next/libplacebo] [742]     color[0] += w * c[0];
[   0.794][d][vo/gpu-next/libplacebo] [743]     color[1] += w * c[1];
[   0.794][d][vo/gpu-next/libplacebo] [744]     color[2] += w * c[2];
[   0.794][d][vo/gpu-next/libplacebo] [745]     }
[   0.794][d][vo/gpu-next/libplacebo] [746] idx = _200d * rel.y + rel.x + _200d * 5 + 11; 
[   0.794][d][vo/gpu-next/libplacebo] [747] offset = ivec2(6, 0);
[   0.794][d][vo/gpu-next/libplacebo] [748] d = length(vec2(offset) - fcoord);
[   0.794][d][vo/gpu-next/libplacebo] [749]     if (d < /*radius*/_200b) {
[   0.794][d][vo/gpu-next/libplacebo] [750] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.794][d][vo/gpu-next/libplacebo] [751] wsum += w;
[   0.794][d][vo/gpu-next/libplacebo] [752]         c[0] = /*in*/_200c_0[idx];
[   0.794][d][vo/gpu-next/libplacebo] [753]         c[1] = /*in*/_200c_1[idx];
[   0.794][d][vo/gpu-next/libplacebo] [754]         c[2] = /*in*/_200c_2[idx];
[   0.794][d][vo/gpu-next/libplacebo] [755]     color[0] += w * c[0];
[   0.794][d][vo/gpu-next/libplacebo] [756]     color[1] += w * c[1];
[   0.794][d][vo/gpu-next/libplacebo] [757]     color[2] += w * c[2];
[   0.794][d][vo/gpu-next/libplacebo] [758]     }
[   0.794][d][vo/gpu-next/libplacebo] [759] idx = _200d * rel.y + rel.x + _200d * 6 + 0; 
[   0.794][d][vo/gpu-next/libplacebo] [760] offset = ivec2(-5, 1);
[   0.794][d][vo/gpu-next/libplacebo] [761] d = length(vec2(offset) - fcoord);
[   0.794][d][vo/gpu-next/libplacebo] [762]     if (d < /*radius*/_200b) {
[   0.794][d][vo/gpu-next/libplacebo] [763] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.794][d][vo/gpu-next/libplacebo] [764] wsum += w;
[   0.794][d][vo/gpu-next/libplacebo] [765]         c[0] = /*in*/_200c_0[idx];
[   0.794][d][vo/gpu-next/libplacebo] [766]         c[1] = /*in*/_200c_1[idx];
[   0.794][d][vo/gpu-next/libplacebo] [767]         c[2] = /*in*/_200c_2[idx];
[   0.794][d][vo/gpu-next/libplacebo] [768]     color[0] += w * c[0];
[   0.794][d][vo/gpu-next/libplacebo] [769]     color[1] += w * c[1];
[   0.794][d][vo/gpu-next/libplacebo] [770]     color[2] += w * c[2];
[   0.794][d][vo/gpu-next/libplacebo] [771]     }
[   0.794][d][vo/gpu-next/libplacebo] [772] idx = _200d * rel.y + rel.x + _200d * 6 + 1; 
[   0.794][d][vo/gpu-next/libplacebo] [773] offset = ivec2(-4, 1);
[   0.794][d][vo/gpu-next/libplacebo] [774] d = length(vec2(offset) - fcoord);
[   0.794][d][vo/gpu-next/libplacebo] [775]     if (d < /*radius*/_200b) {
[   0.794][d][vo/gpu-next/libplacebo] [776] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.794][d][vo/gpu-next/libplacebo] [777] wsum += w;
[   0.794][d][vo/gpu-next/libplacebo] [778]         c[0] = /*in*/_200c_0[idx];
[   0.794][d][vo/gpu-next/libplacebo] [779]         c[1] = /*in*/_200c_1[idx];
[   0.794][d][vo/gpu-next/libplacebo] [780]         c[2] = /*in*/_200c_2[idx];
[   0.794][d][vo/gpu-next/libplacebo] [781]     color[0] += w * c[0];
[   0.794][d][vo/gpu-next/libplacebo] [782]     color[1] += w * c[1];
[   0.794][d][vo/gpu-next/libplacebo] [783]     color[2] += w * c[2];
[   0.794][d][vo/gpu-next/libplacebo] [784]     }
[   0.794][d][vo/gpu-next/libplacebo] [785] idx = _200d * rel.y + rel.x + _200d * 6 + 2; 
[   0.794][d][vo/gpu-next/libplacebo] [786] offset = ivec2(-3, 1);
[   0.794][d][vo/gpu-next/libplacebo] [787] d = length(vec2(offset) - fcoord);
[   0.794][d][vo/gpu-next/libplacebo] [788] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.794][d][vo/gpu-next/libplacebo] [789] wsum += w;
[   0.794][d][vo/gpu-next/libplacebo] [790]         c[0] = /*in*/_200c_0[idx];
[   0.794][d][vo/gpu-next/libplacebo] [791]         c[1] = /*in*/_200c_1[idx];
[   0.794][d][vo/gpu-next/libplacebo] [792]         c[2] = /*in*/_200c_2[idx];
[   0.794][d][vo/gpu-next/libplacebo] [793]     color[0] += w * c[0];
[   0.794][d][vo/gpu-next/libplacebo] [794]     color[1] += w * c[1];
[   0.794][d][vo/gpu-next/libplacebo] [795]     color[2] += w * c[2];
[   0.794][d][vo/gpu-next/libplacebo] [796] idx = _200d * rel.y + rel.x + _200d * 6 + 3; 
[   0.794][d][vo/gpu-next/libplacebo] [797] offset = ivec2(-2, 1);
[   0.794][d][vo/gpu-next/libplacebo] [798] d = length(vec2(offset) - fcoord);
[   0.794][d][vo/gpu-next/libplacebo] [799] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.794][d][vo/gpu-next/libplacebo] [800] wsum += w;
[   0.794][d][vo/gpu-next/libplacebo] [801]         c[0] = /*in*/_200c_0[idx];
[   0.794][d][vo/gpu-next/libplacebo] [802]         c[1] = /*in*/_200c_1[idx];
[   0.794][d][vo/gpu-next/libplacebo] [803]         c[2] = /*in*/_200c_2[idx];
[   0.794][d][vo/gpu-next/libplacebo] [804]     color[0] += w * c[0];
[   0.794][d][vo/gpu-next/libplacebo] [805]     color[1] += w * c[1];
[   0.794][d][vo/gpu-next/libplacebo] [806]     color[2] += w * c[2];
[   0.794][d][vo/gpu-next/libplacebo] [807] idx = _200d * rel.y + rel.x + _200d * 6 + 4; 
[   0.794][d][vo/gpu-next/libplacebo] [808] offset = ivec2(-1, 1);
[   0.794][d][vo/gpu-next/libplacebo] [809] d = length(vec2(offset) - fcoord);
[   0.794][d][vo/gpu-next/libplacebo] [810] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.794][d][vo/gpu-next/libplacebo] [811] wsum += w;
[   0.794][d][vo/gpu-next/libplacebo] [812]         c[0] = /*in*/_200c_0[idx];
[   0.794][d][vo/gpu-next/libplacebo] [813]         c[1] = /*in*/_200c_1[idx];
[   0.794][d][vo/gpu-next/libplacebo] [814]         c[2] = /*in*/_200c_2[idx];
[   0.794][d][vo/gpu-next/libplacebo] [815]     color[0] += w * c[0];
[   0.794][d][vo/gpu-next/libplacebo] [816]     color[1] += w * c[1];
[   0.794][d][vo/gpu-next/libplacebo] [817]     color[2] += w * c[2];
[   0.794][d][vo/gpu-next/libplacebo] [818] idx = _200d * rel.y + rel.x + _200d * 6 + 5; 
[   0.794][d][vo/gpu-next/libplacebo] [819] offset = ivec2(0, 1);
[   0.794][d][vo/gpu-next/libplacebo] [820] d = length(vec2(offset) - fcoord);
[   0.794][d][vo/gpu-next/libplacebo] [821] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.794][d][vo/gpu-next/libplacebo] [822] wsum += w;
[   0.794][d][vo/gpu-next/libplacebo] [823]         c[0] = /*in*/_200c_0[idx];
[   0.794][d][vo/gpu-next/libplacebo] [824]         c[1] = /*in*/_200c_1[idx];
[   0.794][d][vo/gpu-next/libplacebo] [825]         c[2] = /*in*/_200c_2[idx];
[   0.794][d][vo/gpu-next/libplacebo] [826]     color[0] += w * c[0];
[   0.794][d][vo/gpu-next/libplacebo] [827]     color[1] += w * c[1];
[   0.794][d][vo/gpu-next/libplacebo] [828]     color[2] += w * c[2];
[   0.794][d][vo/gpu-next/libplacebo] [829] idx = _200d * rel.y + rel.x + _200d * 6 + 6; 
[   0.794][d][vo/gpu-next/libplacebo] [830] offset = ivec2(1, 1);
[   0.794][d][vo/gpu-next/libplacebo] [831] d = length(vec2(offset) - fcoord);
[   0.794][d][vo/gpu-next/libplacebo] [832] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.794][d][vo/gpu-next/libplacebo] [833] wsum += w;
[   0.794][d][vo/gpu-next/libplacebo] [834]         c[0] = /*in*/_200c_0[idx];
[   0.794][d][vo/gpu-next/libplacebo] [835]         c[1] = /*in*/_200c_1[idx];
[   0.794][d][vo/gpu-next/libplacebo] [836]         c[2] = /*in*/_200c_2[idx];
[   0.794][d][vo/gpu-next/libplacebo] [837]     color[0] += w * c[0];
[   0.794][d][vo/gpu-next/libplacebo] [838]     color[1] += w * c[1];
[   0.794][d][vo/gpu-next/libplacebo] [839]     color[2] += w * c[2];
[   0.794][d][vo/gpu-next/libplacebo] [840] idx = _200d * rel.y + rel.x + _200d * 6 + 7; 
[   0.794][d][vo/gpu-next/libplacebo] [841] offset = ivec2(2, 1);
[   0.794][d][vo/gpu-next/libplacebo] [842] d = length(vec2(offset) - fcoord);
[   0.794][d][vo/gpu-next/libplacebo] [843] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.794][d][vo/gpu-next/libplacebo] [844] wsum += w;
[   0.794][d][vo/gpu-next/libplacebo] [845]         c[0] = /*in*/_200c_0[idx];
[   0.794][d][vo/gpu-next/libplacebo] [846]         c[1] = /*in*/_200c_1[idx];
[   0.794][d][vo/gpu-next/libplacebo] [847]         c[2] = /*in*/_200c_2[idx];
[   0.794][d][vo/gpu-next/libplacebo] [848]     color[0] += w * c[0];
[   0.794][d][vo/gpu-next/libplacebo] [849]     color[1] += w * c[1];
[   0.794][d][vo/gpu-next/libplacebo] [850]     color[2] += w * c[2];
[   0.794][d][vo/gpu-next/libplacebo] [851] idx = _200d * rel.y + rel.x + _200d * 6 + 8; 
[   0.795][d][vo/gpu-next/libplacebo] [852] offset = ivec2(3, 1);
[   0.795][d][vo/gpu-next/libplacebo] [853] d = length(vec2(offset) - fcoord);
[   0.795][d][vo/gpu-next/libplacebo] [854] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.795][d][vo/gpu-next/libplacebo] [855] wsum += w;
[   0.795][d][vo/gpu-next/libplacebo] [856]         c[0] = /*in*/_200c_0[idx];
[   0.795][d][vo/gpu-next/libplacebo] [857]         c[1] = /*in*/_200c_1[idx];
[   0.795][d][vo/gpu-next/libplacebo] [858]         c[2] = /*in*/_200c_2[idx];
[   0.795][d][vo/gpu-next/libplacebo] [859]     color[0] += w * c[0];
[   0.795][d][vo/gpu-next/libplacebo] [860]     color[1] += w * c[1];
[   0.795][d][vo/gpu-next/libplacebo] [861]     color[2] += w * c[2];
[   0.795][d][vo/gpu-next/libplacebo] [862] idx = _200d * rel.y + rel.x + _200d * 6 + 9; 
[   0.795][d][vo/gpu-next/libplacebo] [863] offset = ivec2(4, 1);
[   0.795][d][vo/gpu-next/libplacebo] [864] d = length(vec2(offset) - fcoord);
[   0.795][d][vo/gpu-next/libplacebo] [865] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.795][d][vo/gpu-next/libplacebo] [866] wsum += w;
[   0.795][d][vo/gpu-next/libplacebo] [867]         c[0] = /*in*/_200c_0[idx];
[   0.795][d][vo/gpu-next/libplacebo] [868]         c[1] = /*in*/_200c_1[idx];
[   0.795][d][vo/gpu-next/libplacebo] [869]         c[2] = /*in*/_200c_2[idx];
[   0.795][d][vo/gpu-next/libplacebo] [870]     color[0] += w * c[0];
[   0.795][d][vo/gpu-next/libplacebo] [871]     color[1] += w * c[1];
[   0.795][d][vo/gpu-next/libplacebo] [872]     color[2] += w * c[2];
[   0.795][d][vo/gpu-next/libplacebo] [873] idx = _200d * rel.y + rel.x + _200d * 6 + 10; 
[   0.795][d][vo/gpu-next/libplacebo] [874] offset = ivec2(5, 1);
[   0.795][d][vo/gpu-next/libplacebo] [875] d = length(vec2(offset) - fcoord);
[   0.795][d][vo/gpu-next/libplacebo] [876]     if (d < /*radius*/_200b) {
[   0.795][d][vo/gpu-next/libplacebo] [877] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.795][d][vo/gpu-next/libplacebo] [878] wsum += w;
[   0.795][d][vo/gpu-next/libplacebo] [879]         c[0] = /*in*/_200c_0[idx];
[   0.795][d][vo/gpu-next/libplacebo] [880]         c[1] = /*in*/_200c_1[idx];
[   0.795][d][vo/gpu-next/libplacebo] [881]         c[2] = /*in*/_200c_2[idx];
[   0.795][d][vo/gpu-next/libplacebo] [882]     color[0] += w * c[0];
[   0.795][d][vo/gpu-next/libplacebo] [883]     color[1] += w * c[1];
[   0.795][d][vo/gpu-next/libplacebo] [884]     color[2] += w * c[2];
[   0.795][d][vo/gpu-next/libplacebo] [885]     }
[   0.795][d][vo/gpu-next/libplacebo] [886] idx = _200d * rel.y + rel.x + _200d * 6 + 11; 
[   0.795][d][vo/gpu-next/libplacebo] [887] offset = ivec2(6, 1);
[   0.795][d][vo/gpu-next/libplacebo] [888] d = length(vec2(offset) - fcoord);
[   0.795][d][vo/gpu-next/libplacebo] [889]     if (d < /*radius*/_200b) {
[   0.795][d][vo/gpu-next/libplacebo] [890] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.795][d][vo/gpu-next/libplacebo] [891] wsum += w;
[   0.795][d][vo/gpu-next/libplacebo] [892]         c[0] = /*in*/_200c_0[idx];
[   0.795][d][vo/gpu-next/libplacebo] [893]         c[1] = /*in*/_200c_1[idx];
[   0.795][d][vo/gpu-next/libplacebo] [894]         c[2] = /*in*/_200c_2[idx];
[   0.795][d][vo/gpu-next/libplacebo] [895]     color[0] += w * c[0];
[   0.795][d][vo/gpu-next/libplacebo] [896]     color[1] += w * c[1];
[   0.795][d][vo/gpu-next/libplacebo] [897]     color[2] += w * c[2];
[   0.795][d][vo/gpu-next/libplacebo] [898]     }
[   0.795][d][vo/gpu-next/libplacebo] [899] idx = _200d * rel.y + rel.x + _200d * 7 + 0; 
[   0.795][d][vo/gpu-next/libplacebo] [900] offset = ivec2(-5, 2);
[   0.795][d][vo/gpu-next/libplacebo] [901] d = length(vec2(offset) - fcoord);
[   0.795][d][vo/gpu-next/libplacebo] [902]     if (d < /*radius*/_200b) {
[   0.795][d][vo/gpu-next/libplacebo] [903] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.795][d][vo/gpu-next/libplacebo] [904] wsum += w;
[   0.795][d][vo/gpu-next/libplacebo] [905]         c[0] = /*in*/_200c_0[idx];
[   0.795][d][vo/gpu-next/libplacebo] [906]         c[1] = /*in*/_200c_1[idx];
[   0.795][d][vo/gpu-next/libplacebo] [907]         c[2] = /*in*/_200c_2[idx];
[   0.795][d][vo/gpu-next/libplacebo] [908]     color[0] += w * c[0];
[   0.795][d][vo/gpu-next/libplacebo] [909]     color[1] += w * c[1];
[   0.795][d][vo/gpu-next/libplacebo] [910]     color[2] += w * c[2];
[   0.795][d][vo/gpu-next/libplacebo] [911]     }
[   0.795][d][vo/gpu-next/libplacebo] [912] idx = _200d * rel.y + rel.x + _200d * 7 + 1; 
[   0.795][d][vo/gpu-next/libplacebo] [913] offset = ivec2(-4, 2);
[   0.795][d][vo/gpu-next/libplacebo] [914] d = length(vec2(offset) - fcoord);
[   0.795][d][vo/gpu-next/libplacebo] [915]     if (d < /*radius*/_200b) {
[   0.795][d][vo/gpu-next/libplacebo] [916] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.795][d][vo/gpu-next/libplacebo] [917] wsum += w;
[   0.795][d][vo/gpu-next/libplacebo] [918]         c[0] = /*in*/_200c_0[idx];
[   0.795][d][vo/gpu-next/libplacebo] [919]         c[1] = /*in*/_200c_1[idx];
[   0.795][d][vo/gpu-next/libplacebo] [920]         c[2] = /*in*/_200c_2[idx];
[   0.795][d][vo/gpu-next/libplacebo] [921]     color[0] += w * c[0];
[   0.795][d][vo/gpu-next/libplacebo] [922]     color[1] += w * c[1];
[   0.795][d][vo/gpu-next/libplacebo] [923]     color[2] += w * c[2];
[   0.795][d][vo/gpu-next/libplacebo] [924]     }
[   0.795][d][vo/gpu-next/libplacebo] [925] idx = _200d * rel.y + rel.x + _200d * 7 + 2; 
[   0.795][d][vo/gpu-next/libplacebo] [926] offset = ivec2(-3, 2);
[   0.795][d][vo/gpu-next/libplacebo] [927] d = length(vec2(offset) - fcoord);
[   0.795][d][vo/gpu-next/libplacebo] [928] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.795][d][vo/gpu-next/libplacebo] [929] wsum += w;
[   0.795][d][vo/gpu-next/libplacebo] [930]         c[0] = /*in*/_200c_0[idx];
[   0.795][d][vo/gpu-next/libplacebo] [931]         c[1] = /*in*/_200c_1[idx];
[   0.795][d][vo/gpu-next/libplacebo] [932]         c[2] = /*in*/_200c_2[idx];
[   0.795][d][vo/gpu-next/libplacebo] [933]     color[0] += w * c[0];
[   0.795][d][vo/gpu-next/libplacebo] [934]     color[1] += w * c[1];
[   0.795][d][vo/gpu-next/libplacebo] [935]     color[2] += w * c[2];
[   0.795][d][vo/gpu-next/libplacebo] [936] idx = _200d * rel.y + rel.x + _200d * 7 + 3; 
[   0.795][d][vo/gpu-next/libplacebo] [937] offset = ivec2(-2, 2);
[   0.795][d][vo/gpu-next/libplacebo] [938] d = length(vec2(offset) - fcoord);
[   0.795][d][vo/gpu-next/libplacebo] [939] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.795][d][vo/gpu-next/libplacebo] [940] wsum += w;
[   0.795][d][vo/gpu-next/libplacebo] [941]         c[0] = /*in*/_200c_0[idx];
[   0.795][d][vo/gpu-next/libplacebo] [942]         c[1] = /*in*/_200c_1[idx];
[   0.795][d][vo/gpu-next/libplacebo] [943]         c[2] = /*in*/_200c_2[idx];
[   0.795][d][vo/gpu-next/libplacebo] [944]     color[0] += w * c[0];
[   0.795][d][vo/gpu-next/libplacebo] [945]     color[1] += w * c[1];
[   0.795][d][vo/gpu-next/libplacebo] [946]     color[2] += w * c[2];
[   0.795][d][vo/gpu-next/libplacebo] [947] idx = _200d * rel.y + rel.x + _200d * 7 + 4; 
[   0.795][d][vo/gpu-next/libplacebo] [948] offset = ivec2(-1, 2);
[   0.795][d][vo/gpu-next/libplacebo] [949] d = length(vec2(offset) - fcoord);
[   0.795][d][vo/gpu-next/libplacebo] [950] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.795][d][vo/gpu-next/libplacebo] [951] wsum += w;
[   0.795][d][vo/gpu-next/libplacebo] [952]         c[0] = /*in*/_200c_0[idx];
[   0.795][d][vo/gpu-next/libplacebo] [953]         c[1] = /*in*/_200c_1[idx];
[   0.795][d][vo/gpu-next/libplacebo] [954]         c[2] = /*in*/_200c_2[idx];
[   0.795][d][vo/gpu-next/libplacebo] [955]     color[0] += w * c[0];
[   0.795][d][vo/gpu-next/libplacebo] [956]     color[1] += w * c[1];
[   0.795][d][vo/gpu-next/libplacebo] [957]     color[2] += w * c[2];
[   0.795][d][vo/gpu-next/libplacebo] [958] idx = _200d * rel.y + rel.x + _200d * 7 + 5; 
[   0.795][d][vo/gpu-next/libplacebo] [959] offset = ivec2(0, 2);
[   0.795][d][vo/gpu-next/libplacebo] [960] d = length(vec2(offset) - fcoord);
[   0.795][d][vo/gpu-next/libplacebo] [961] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.795][d][vo/gpu-next/libplacebo] [962] wsum += w;
[   0.795][d][vo/gpu-next/libplacebo] [963]         c[0] = /*in*/_200c_0[idx];
[   0.795][d][vo/gpu-next/libplacebo] [964]         c[1] = /*in*/_200c_1[idx];
[   0.795][d][vo/gpu-next/libplacebo] [965]         c[2] = /*in*/_200c_2[idx];
[   0.795][d][vo/gpu-next/libplacebo] [966]     color[0] += w * c[0];
[   0.795][d][vo/gpu-next/libplacebo] [967]     color[1] += w * c[1];
[   0.795][d][vo/gpu-next/libplacebo] [968]     color[2] += w * c[2];
[   0.795][d][vo/gpu-next/libplacebo] [969] idx = _200d * rel.y + rel.x + _200d * 7 + 6; 
[   0.795][d][vo/gpu-next/libplacebo] [970] offset = ivec2(1, 2);
[   0.795][d][vo/gpu-next/libplacebo] [971] d = length(vec2(offset) - fcoord);
[   0.795][d][vo/gpu-next/libplacebo] [972] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.795][d][vo/gpu-next/libplacebo] [973] wsum += w;
[   0.795][d][vo/gpu-next/libplacebo] [974]         c[0] = /*in*/_200c_0[idx];
[   0.795][d][vo/gpu-next/libplacebo] [975]         c[1] = /*in*/_200c_1[idx];
[   0.795][d][vo/gpu-next/libplacebo] [976]         c[2] = /*in*/_200c_2[idx];
[   0.795][d][vo/gpu-next/libplacebo] [977]     color[0] += w * c[0];
[   0.795][d][vo/gpu-next/libplacebo] [978]     color[1] += w * c[1];
[   0.795][d][vo/gpu-next/libplacebo] [979]     color[2] += w * c[2];
[   0.795][d][vo/gpu-next/libplacebo] [980] idx = _200d * rel.y + rel.x + _200d * 7 + 7; 
[   0.795][d][vo/gpu-next/libplacebo] [981] offset = ivec2(2, 2);
[   0.795][d][vo/gpu-next/libplacebo] [982] d = length(vec2(offset) - fcoord);
[   0.795][d][vo/gpu-next/libplacebo] [983] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.795][d][vo/gpu-next/libplacebo] [984] wsum += w;
[   0.795][d][vo/gpu-next/libplacebo] [985]         c[0] = /*in*/_200c_0[idx];
[   0.795][d][vo/gpu-next/libplacebo] [986]         c[1] = /*in*/_200c_1[idx];
[   0.795][d][vo/gpu-next/libplacebo] [987]         c[2] = /*in*/_200c_2[idx];
[   0.795][d][vo/gpu-next/libplacebo] [988]     color[0] += w * c[0];
[   0.795][d][vo/gpu-next/libplacebo] [989]     color[1] += w * c[1];
[   0.795][d][vo/gpu-next/libplacebo] [990]     color[2] += w * c[2];
[   0.795][d][vo/gpu-next/libplacebo] [991] idx = _200d * rel.y + rel.x + _200d * 7 + 8; 
[   0.795][d][vo/gpu-next/libplacebo] [992] offset = ivec2(3, 2);
[   0.795][d][vo/gpu-next/libplacebo] [993] d = length(vec2(offset) - fcoord);
[   0.795][d][vo/gpu-next/libplacebo] [994] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.795][d][vo/gpu-next/libplacebo] [995] wsum += w;
[   0.795][d][vo/gpu-next/libplacebo] [996]         c[0] = /*in*/_200c_0[idx];
[   0.795][d][vo/gpu-next/libplacebo] [997]         c[1] = /*in*/_200c_1[idx];
[   0.795][d][vo/gpu-next/libplacebo] [998]         c[2] = /*in*/_200c_2[idx];
[   0.795][d][vo/gpu-next/libplacebo] [999]     color[0] += w * c[0];
[   0.795][d][vo/gpu-next/libplacebo] [1000]     color[1] += w * c[1];
[   0.795][d][vo/gpu-next/libplacebo] [1001]     color[2] += w * c[2];
[   0.795][d][vo/gpu-next/libplacebo] [1002] idx = _200d * rel.y + rel.x + _200d * 7 + 9; 
[   0.795][d][vo/gpu-next/libplacebo] [1003] offset = ivec2(4, 2);
[   0.795][d][vo/gpu-next/libplacebo] [1004] d = length(vec2(offset) - fcoord);
[   0.795][d][vo/gpu-next/libplacebo] [1005] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.795][d][vo/gpu-next/libplacebo] [1006] wsum += w;
[   0.795][d][vo/gpu-next/libplacebo] [1007]         c[0] = /*in*/_200c_0[idx];
[   0.795][d][vo/gpu-next/libplacebo] [1008]         c[1] = /*in*/_200c_1[idx];
[   0.795][d][vo/gpu-next/libplacebo] [1009]         c[2] = /*in*/_200c_2[idx];
[   0.795][d][vo/gpu-next/libplacebo] [1010]     color[0] += w * c[0];
[   0.795][d][vo/gpu-next/libplacebo] [1011]     color[1] += w * c[1];
[   0.795][d][vo/gpu-next/libplacebo] [1012]     color[2] += w * c[2];
[   0.795][d][vo/gpu-next/libplacebo] [1013] idx = _200d * rel.y + rel.x + _200d * 7 + 10; 
[   0.795][d][vo/gpu-next/libplacebo] [1014] offset = ivec2(5, 2);
[   0.796][d][vo/gpu-next/libplacebo] [1015] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1016]     if (d < /*radius*/_200b) {
[   0.796][d][vo/gpu-next/libplacebo] [1017] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1018] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1019]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1020]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1021]         c[2] = /*in*/_200c_2[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1022]     color[0] += w * c[0];
[   0.796][d][vo/gpu-next/libplacebo] [1023]     color[1] += w * c[1];
[   0.796][d][vo/gpu-next/libplacebo] [1024]     color[2] += w * c[2];
[   0.796][d][vo/gpu-next/libplacebo] [1025]     }
[   0.796][d][vo/gpu-next/libplacebo] [1026] idx = _200d * rel.y + rel.x + _200d * 7 + 11; 
[   0.796][d][vo/gpu-next/libplacebo] [1027] offset = ivec2(6, 2);
[   0.796][d][vo/gpu-next/libplacebo] [1028] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1029]     if (d < /*radius*/_200b) {
[   0.796][d][vo/gpu-next/libplacebo] [1030] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1031] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1032]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1033]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1034]         c[2] = /*in*/_200c_2[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1035]     color[0] += w * c[0];
[   0.796][d][vo/gpu-next/libplacebo] [1036]     color[1] += w * c[1];
[   0.796][d][vo/gpu-next/libplacebo] [1037]     color[2] += w * c[2];
[   0.796][d][vo/gpu-next/libplacebo] [1038]     }
[   0.796][d][vo/gpu-next/libplacebo] [1039] idx = _200d * rel.y + rel.x + _200d * 8 + 0; 
[   0.796][d][vo/gpu-next/libplacebo] [1040] idx = _200d * rel.y + rel.x + _200d * 8 + 1; 
[   0.796][d][vo/gpu-next/libplacebo] [1041] offset = ivec2(-4, 3);
[   0.796][d][vo/gpu-next/libplacebo] [1042] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1043]     if (d < /*radius*/_200b) {
[   0.796][d][vo/gpu-next/libplacebo] [1044] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1045] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1046]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1047]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1048]         c[2] = /*in*/_200c_2[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1049]     color[0] += w * c[0];
[   0.796][d][vo/gpu-next/libplacebo] [1050]     color[1] += w * c[1];
[   0.796][d][vo/gpu-next/libplacebo] [1051]     color[2] += w * c[2];
[   0.796][d][vo/gpu-next/libplacebo] [1052]     }
[   0.796][d][vo/gpu-next/libplacebo] [1053] idx = _200d * rel.y + rel.x + _200d * 8 + 2; 
[   0.796][d][vo/gpu-next/libplacebo] [1054] offset = ivec2(-3, 3);
[   0.796][d][vo/gpu-next/libplacebo] [1055] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1056] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1057] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1058]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1059]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1060]         c[2] = /*in*/_200c_2[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1061]     color[0] += w * c[0];
[   0.796][d][vo/gpu-next/libplacebo] [1062]     color[1] += w * c[1];
[   0.796][d][vo/gpu-next/libplacebo] [1063]     color[2] += w * c[2];
[   0.796][d][vo/gpu-next/libplacebo] [1064] idx = _200d * rel.y + rel.x + _200d * 8 + 3; 
[   0.796][d][vo/gpu-next/libplacebo] [1065] offset = ivec2(-2, 3);
[   0.796][d][vo/gpu-next/libplacebo] [1066] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1067] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1068] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1069]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1070]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1071]         c[2] = /*in*/_200c_2[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1072]     color[0] += w * c[0];
[   0.796][d][vo/gpu-next/libplacebo] [1073]     color[1] += w * c[1];
[   0.796][d][vo/gpu-next/libplacebo] [1074]     color[2] += w * c[2];
[   0.796][d][vo/gpu-next/libplacebo] [1075] idx = _200d * rel.y + rel.x + _200d * 8 + 4; 
[   0.796][d][vo/gpu-next/libplacebo] [1076] offset = ivec2(-1, 3);
[   0.796][d][vo/gpu-next/libplacebo] [1077] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1078] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1079] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1080]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1081]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1082]         c[2] = /*in*/_200c_2[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1083]     color[0] += w * c[0];
[   0.796][d][vo/gpu-next/libplacebo] [1084]     color[1] += w * c[1];
[   0.796][d][vo/gpu-next/libplacebo] [1085]     color[2] += w * c[2];
[   0.796][d][vo/gpu-next/libplacebo] [1086] idx = _200d * rel.y + rel.x + _200d * 8 + 5; 
[   0.796][d][vo/gpu-next/libplacebo] [1087] offset = ivec2(0, 3);
[   0.796][d][vo/gpu-next/libplacebo] [1088] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1089] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1090] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1091]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1092]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1093]         c[2] = /*in*/_200c_2[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1094]     color[0] += w * c[0];
[   0.796][d][vo/gpu-next/libplacebo] [1095]     color[1] += w * c[1];
[   0.796][d][vo/gpu-next/libplacebo] [1096]     color[2] += w * c[2];
[   0.796][d][vo/gpu-next/libplacebo] [1097] idx = _200d * rel.y + rel.x + _200d * 8 + 6; 
[   0.796][d][vo/gpu-next/libplacebo] [1098] offset = ivec2(1, 3);
[   0.796][d][vo/gpu-next/libplacebo] [1099] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1100] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1101] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1102]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1103]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1104]         c[2] = /*in*/_200c_2[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1105]     color[0] += w * c[0];
[   0.796][d][vo/gpu-next/libplacebo] [1106]     color[1] += w * c[1];
[   0.796][d][vo/gpu-next/libplacebo] [1107]     color[2] += w * c[2];
[   0.796][d][vo/gpu-next/libplacebo] [1108] idx = _200d * rel.y + rel.x + _200d * 8 + 7; 
[   0.796][d][vo/gpu-next/libplacebo] [1109] offset = ivec2(2, 3);
[   0.796][d][vo/gpu-next/libplacebo] [1110] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1111] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1112] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1113]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1114]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1115]         c[2] = /*in*/_200c_2[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1116]     color[0] += w * c[0];
[   0.796][d][vo/gpu-next/libplacebo] [1117]     color[1] += w * c[1];
[   0.796][d][vo/gpu-next/libplacebo] [1118]     color[2] += w * c[2];
[   0.796][d][vo/gpu-next/libplacebo] [1119] idx = _200d * rel.y + rel.x + _200d * 8 + 8; 
[   0.796][d][vo/gpu-next/libplacebo] [1120] offset = ivec2(3, 3);
[   0.796][d][vo/gpu-next/libplacebo] [1121] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1122] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1123] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1124]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1125]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1126]         c[2] = /*in*/_200c_2[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1127]     color[0] += w * c[0];
[   0.796][d][vo/gpu-next/libplacebo] [1128]     color[1] += w * c[1];
[   0.796][d][vo/gpu-next/libplacebo] [1129]     color[2] += w * c[2];
[   0.796][d][vo/gpu-next/libplacebo] [1130] idx = _200d * rel.y + rel.x + _200d * 8 + 9; 
[   0.796][d][vo/gpu-next/libplacebo] [1131] offset = ivec2(4, 3);
[   0.796][d][vo/gpu-next/libplacebo] [1132] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1133] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1134] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1135]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1136]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1137]         c[2] = /*in*/_200c_2[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1138]     color[0] += w * c[0];
[   0.796][d][vo/gpu-next/libplacebo] [1139]     color[1] += w * c[1];
[   0.796][d][vo/gpu-next/libplacebo] [1140]     color[2] += w * c[2];
[   0.796][d][vo/gpu-next/libplacebo] [1141] idx = _200d * rel.y + rel.x + _200d * 8 + 10; 
[   0.796][d][vo/gpu-next/libplacebo] [1142] offset = ivec2(5, 3);
[   0.796][d][vo/gpu-next/libplacebo] [1143] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1144]     if (d < /*radius*/_200b) {
[   0.796][d][vo/gpu-next/libplacebo] [1145] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1146] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1147]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1148]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1149]         c[2] = /*in*/_200c_2[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1150]     color[0] += w * c[0];
[   0.796][d][vo/gpu-next/libplacebo] [1151]     color[1] += w * c[1];
[   0.796][d][vo/gpu-next/libplacebo] [1152]     color[2] += w * c[2];
[   0.796][d][vo/gpu-next/libplacebo] [1153]     }
[   0.796][d][vo/gpu-next/libplacebo] [1154] idx = _200d * rel.y + rel.x + _200d * 8 + 11; 
[   0.796][d][vo/gpu-next/libplacebo] [1155] idx = _200d * rel.y + rel.x + _200d * 9 + 0; 
[   0.796][d][vo/gpu-next/libplacebo] [1156] idx = _200d * rel.y + rel.x + _200d * 9 + 1; 
[   0.796][d][vo/gpu-next/libplacebo] [1157] offset = ivec2(-4, 4);
[   0.796][d][vo/gpu-next/libplacebo] [1158] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1159]     if (d < /*radius*/_200b) {
[   0.796][d][vo/gpu-next/libplacebo] [1160] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1161] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1162]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1163]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1164]         c[2] = /*in*/_200c_2[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1165]     color[0] += w * c[0];
[   0.796][d][vo/gpu-next/libplacebo] [1166]     color[1] += w * c[1];
[   0.796][d][vo/gpu-next/libplacebo] [1167]     color[2] += w * c[2];
[   0.796][d][vo/gpu-next/libplacebo] [1168]     }
[   0.796][d][vo/gpu-next/libplacebo] [1169] idx = _200d * rel.y + rel.x + _200d * 9 + 2; 
[   0.796][d][vo/gpu-next/libplacebo] [1170] offset = ivec2(-3, 4);
[   0.796][d][vo/gpu-next/libplacebo] [1171] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1172]     if (d < /*radius*/_200b) {
[   0.796][d][vo/gpu-next/libplacebo] [1173] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1174] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1175]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1176]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1177]         c[2] = /*in*/_200c_2[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1178]     color[0] += w * c[0];
[   0.796][d][vo/gpu-next/libplacebo] [1179]     color[1] += w * c[1];
[   0.796][d][vo/gpu-next/libplacebo] [1180]     color[2] += w * c[2];
[   0.796][d][vo/gpu-next/libplacebo] [1181]     }
[   0.796][d][vo/gpu-next/libplacebo] [1182] idx = _200d * rel.y + rel.x + _200d * 9 + 3; 
[   0.796][d][vo/gpu-next/libplacebo] [1183] offset = ivec2(-2, 4);
[   0.796][d][vo/gpu-next/libplacebo] [1184] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1185] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1186] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1187]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1188]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1189]         c[2] = /*in*/_200c_2[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1190]     color[0] += w * c[0];
[   0.796][d][vo/gpu-next/libplacebo] [1191]     color[1] += w * c[1];
[   0.796][d][vo/gpu-next/libplacebo] [1192]     color[2] += w * c[2];
[   0.796][d][vo/gpu-next/libplacebo] [1193] idx = _200d * rel.y + rel.x + _200d * 9 + 4; 
[   0.796][d][vo/gpu-next/libplacebo] [1194] offset = ivec2(-1, 4);
[   0.796][d][vo/gpu-next/libplacebo] [1195] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1196] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1197] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1198]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1199]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1200]         c[2] = /*in*/_200c_2[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1201]     color[0] += w * c[0];
[   0.796][d][vo/gpu-next/libplacebo] [1202]     color[1] += w * c[1];
[   0.796][d][vo/gpu-next/libplacebo] [1203]     color[2] += w * c[2];
[   0.796][d][vo/gpu-next/libplacebo] [1204] idx = _200d * rel.y + rel.x + _200d * 9 + 5; 
[   0.796][d][vo/gpu-next/libplacebo] [1205] offset = ivec2(0, 4);
[   0.796][d][vo/gpu-next/libplacebo] [1206] d = length(vec2(offset) - fcoord);
[   0.796][d][vo/gpu-next/libplacebo] [1207] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.796][d][vo/gpu-next/libplacebo] [1208] wsum += w;
[   0.796][d][vo/gpu-next/libplacebo] [1209]         c[0] = /*in*/_200c_0[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1210]         c[1] = /*in*/_200c_1[idx];
[   0.796][d][vo/gpu-next/libplacebo] [1211]         c[2] = /*in*/_200c_2[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1212]     color[0] += w * c[0];
[   0.797][d][vo/gpu-next/libplacebo] [1213]     color[1] += w * c[1];
[   0.797][d][vo/gpu-next/libplacebo] [1214]     color[2] += w * c[2];
[   0.797][d][vo/gpu-next/libplacebo] [1215] idx = _200d * rel.y + rel.x + _200d * 9 + 6; 
[   0.797][d][vo/gpu-next/libplacebo] [1216] offset = ivec2(1, 4);
[   0.797][d][vo/gpu-next/libplacebo] [1217] d = length(vec2(offset) - fcoord);
[   0.797][d][vo/gpu-next/libplacebo] [1218] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.797][d][vo/gpu-next/libplacebo] [1219] wsum += w;
[   0.797][d][vo/gpu-next/libplacebo] [1220]         c[0] = /*in*/_200c_0[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1221]         c[1] = /*in*/_200c_1[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1222]         c[2] = /*in*/_200c_2[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1223]     color[0] += w * c[0];
[   0.797][d][vo/gpu-next/libplacebo] [1224]     color[1] += w * c[1];
[   0.797][d][vo/gpu-next/libplacebo] [1225]     color[2] += w * c[2];
[   0.797][d][vo/gpu-next/libplacebo] [1226] idx = _200d * rel.y + rel.x + _200d * 9 + 7; 
[   0.797][d][vo/gpu-next/libplacebo] [1227] offset = ivec2(2, 4);
[   0.797][d][vo/gpu-next/libplacebo] [1228] d = length(vec2(offset) - fcoord);
[   0.797][d][vo/gpu-next/libplacebo] [1229] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.797][d][vo/gpu-next/libplacebo] [1230] wsum += w;
[   0.797][d][vo/gpu-next/libplacebo] [1231]         c[0] = /*in*/_200c_0[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1232]         c[1] = /*in*/_200c_1[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1233]         c[2] = /*in*/_200c_2[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1234]     color[0] += w * c[0];
[   0.797][d][vo/gpu-next/libplacebo] [1235]     color[1] += w * c[1];
[   0.797][d][vo/gpu-next/libplacebo] [1236]     color[2] += w * c[2];
[   0.797][d][vo/gpu-next/libplacebo] [1237] idx = _200d * rel.y + rel.x + _200d * 9 + 8; 
[   0.797][d][vo/gpu-next/libplacebo] [1238] offset = ivec2(3, 4);
[   0.797][d][vo/gpu-next/libplacebo] [1239] d = length(vec2(offset) - fcoord);
[   0.797][d][vo/gpu-next/libplacebo] [1240] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.797][d][vo/gpu-next/libplacebo] [1241] wsum += w;
[   0.797][d][vo/gpu-next/libplacebo] [1242]         c[0] = /*in*/_200c_0[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1243]         c[1] = /*in*/_200c_1[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1244]         c[2] = /*in*/_200c_2[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1245]     color[0] += w * c[0];
[   0.797][d][vo/gpu-next/libplacebo] [1246]     color[1] += w * c[1];
[   0.797][d][vo/gpu-next/libplacebo] [1247]     color[2] += w * c[2];
[   0.797][d][vo/gpu-next/libplacebo] [1248] idx = _200d * rel.y + rel.x + _200d * 9 + 9; 
[   0.797][d][vo/gpu-next/libplacebo] [1249] offset = ivec2(4, 4);
[   0.797][d][vo/gpu-next/libplacebo] [1250] d = length(vec2(offset) - fcoord);
[   0.797][d][vo/gpu-next/libplacebo] [1251]     if (d < /*radius*/_200b) {
[   0.797][d][vo/gpu-next/libplacebo] [1252] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.797][d][vo/gpu-next/libplacebo] [1253] wsum += w;
[   0.797][d][vo/gpu-next/libplacebo] [1254]         c[0] = /*in*/_200c_0[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1255]         c[1] = /*in*/_200c_1[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1256]         c[2] = /*in*/_200c_2[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1257]     color[0] += w * c[0];
[   0.797][d][vo/gpu-next/libplacebo] [1258]     color[1] += w * c[1];
[   0.797][d][vo/gpu-next/libplacebo] [1259]     color[2] += w * c[2];
[   0.797][d][vo/gpu-next/libplacebo] [1260]     }
[   0.797][d][vo/gpu-next/libplacebo] [1261] idx = _200d * rel.y + rel.x + _200d * 9 + 10; 
[   0.797][d][vo/gpu-next/libplacebo] [1262] offset = ivec2(5, 4);
[   0.797][d][vo/gpu-next/libplacebo] [1263] d = length(vec2(offset) - fcoord);
[   0.797][d][vo/gpu-next/libplacebo] [1264]     if (d < /*radius*/_200b) {
[   0.797][d][vo/gpu-next/libplacebo] [1265] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.797][d][vo/gpu-next/libplacebo] [1266] wsum += w;
[   0.797][d][vo/gpu-next/libplacebo] [1267]         c[0] = /*in*/_200c_0[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1268]         c[1] = /*in*/_200c_1[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1269]         c[2] = /*in*/_200c_2[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1270]     color[0] += w * c[0];
[   0.797][d][vo/gpu-next/libplacebo] [1271]     color[1] += w * c[1];
[   0.797][d][vo/gpu-next/libplacebo] [1272]     color[2] += w * c[2];
[   0.797][d][vo/gpu-next/libplacebo] [1273]     }
[   0.797][d][vo/gpu-next/libplacebo] [1274] idx = _200d * rel.y + rel.x + _200d * 9 + 11; 
[   0.797][d][vo/gpu-next/libplacebo] [1275] idx = _200d * rel.y + rel.x + _200d * 10 + 0; 
[   0.797][d][vo/gpu-next/libplacebo] [1276] idx = _200d * rel.y + rel.x + _200d * 10 + 1; 
[   0.797][d][vo/gpu-next/libplacebo] [1277] idx = _200d * rel.y + rel.x + _200d * 10 + 2; 
[   0.797][d][vo/gpu-next/libplacebo] [1278] offset = ivec2(-3, 5);
[   0.797][d][vo/gpu-next/libplacebo] [1279] d = length(vec2(offset) - fcoord);
[   0.797][d][vo/gpu-next/libplacebo] [1280]     if (d < /*radius*/_200b) {
[   0.797][d][vo/gpu-next/libplacebo] [1281] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.797][d][vo/gpu-next/libplacebo] [1282] wsum += w;
[   0.797][d][vo/gpu-next/libplacebo] [1283]         c[0] = /*in*/_200c_0[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1284]         c[1] = /*in*/_200c_1[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1285]         c[2] = /*in*/_200c_2[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1286]     color[0] += w * c[0];
[   0.797][d][vo/gpu-next/libplacebo] [1287]     color[1] += w * c[1];
[   0.797][d][vo/gpu-next/libplacebo] [1288]     color[2] += w * c[2];
[   0.797][d][vo/gpu-next/libplacebo] [1289]     }
[   0.797][d][vo/gpu-next/libplacebo] [1290] idx = _200d * rel.y + rel.x + _200d * 10 + 3; 
[   0.797][d][vo/gpu-next/libplacebo] [1291] offset = ivec2(-2, 5);
[   0.797][d][vo/gpu-next/libplacebo] [1292] d = length(vec2(offset) - fcoord);
[   0.797][d][vo/gpu-next/libplacebo] [1293]     if (d < /*radius*/_200b) {
[   0.797][d][vo/gpu-next/libplacebo] [1294] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.797][d][vo/gpu-next/libplacebo] [1295] wsum += w;
[   0.797][d][vo/gpu-next/libplacebo] [1296]         c[0] = /*in*/_200c_0[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1297]         c[1] = /*in*/_200c_1[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1298]         c[2] = /*in*/_200c_2[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1299]     color[0] += w * c[0];
[   0.797][d][vo/gpu-next/libplacebo] [1300]     color[1] += w * c[1];
[   0.797][d][vo/gpu-next/libplacebo] [1301]     color[2] += w * c[2];
[   0.797][d][vo/gpu-next/libplacebo] [1302]     }
[   0.797][d][vo/gpu-next/libplacebo] [1303] idx = _200d * rel.y + rel.x + _200d * 10 + 4; 
[   0.797][d][vo/gpu-next/libplacebo] [1304] offset = ivec2(-1, 5);
[   0.797][d][vo/gpu-next/libplacebo] [1305] d = length(vec2(offset) - fcoord);
[   0.797][d][vo/gpu-next/libplacebo] [1306]     if (d < /*radius*/_200b) {
[   0.797][d][vo/gpu-next/libplacebo] [1307] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.797][d][vo/gpu-next/libplacebo] [1308] wsum += w;
[   0.797][d][vo/gpu-next/libplacebo] [1309]         c[0] = /*in*/_200c_0[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1310]         c[1] = /*in*/_200c_1[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1311]         c[2] = /*in*/_200c_2[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1312]     color[0] += w * c[0];
[   0.797][d][vo/gpu-next/libplacebo] [1313]     color[1] += w * c[1];
[   0.797][d][vo/gpu-next/libplacebo] [1314]     color[2] += w * c[2];
[   0.797][d][vo/gpu-next/libplacebo] [1315]     }
[   0.797][d][vo/gpu-next/libplacebo] [1316] idx = _200d * rel.y + rel.x + _200d * 10 + 5; 
[   0.797][d][vo/gpu-next/libplacebo] [1317] offset = ivec2(0, 5);
[   0.797][d][vo/gpu-next/libplacebo] [1318] d = length(vec2(offset) - fcoord);
[   0.797][d][vo/gpu-next/libplacebo] [1319]     if (d < /*radius*/_200b) {
[   0.797][d][vo/gpu-next/libplacebo] [1320] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.797][d][vo/gpu-next/libplacebo] [1321] wsum += w;
[   0.797][d][vo/gpu-next/libplacebo] [1322]         c[0] = /*in*/_200c_0[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1323]         c[1] = /*in*/_200c_1[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1324]         c[2] = /*in*/_200c_2[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1325]     color[0] += w * c[0];
[   0.797][d][vo/gpu-next/libplacebo] [1326]     color[1] += w * c[1];
[   0.797][d][vo/gpu-next/libplacebo] [1327]     color[2] += w * c[2];
[   0.797][d][vo/gpu-next/libplacebo] [1328]     }
[   0.797][d][vo/gpu-next/libplacebo] [1329] idx = _200d * rel.y + rel.x + _200d * 10 + 6; 
[   0.797][d][vo/gpu-next/libplacebo] [1330] offset = ivec2(1, 5);
[   0.797][d][vo/gpu-next/libplacebo] [1331] d = length(vec2(offset) - fcoord);
[   0.797][d][vo/gpu-next/libplacebo] [1332]     if (d < /*radius*/_200b) {
[   0.797][d][vo/gpu-next/libplacebo] [1333] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.797][d][vo/gpu-next/libplacebo] [1334] wsum += w;
[   0.797][d][vo/gpu-next/libplacebo] [1335]         c[0] = /*in*/_200c_0[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1336]         c[1] = /*in*/_200c_1[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1337]         c[2] = /*in*/_200c_2[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1338]     color[0] += w * c[0];
[   0.797][d][vo/gpu-next/libplacebo] [1339]     color[1] += w * c[1];
[   0.797][d][vo/gpu-next/libplacebo] [1340]     color[2] += w * c[2];
[   0.797][d][vo/gpu-next/libplacebo] [1341]     }
[   0.797][d][vo/gpu-next/libplacebo] [1342] idx = _200d * rel.y + rel.x + _200d * 10 + 7; 
[   0.797][d][vo/gpu-next/libplacebo] [1343] offset = ivec2(2, 5);
[   0.797][d][vo/gpu-next/libplacebo] [1344] d = length(vec2(offset) - fcoord);
[   0.797][d][vo/gpu-next/libplacebo] [1345]     if (d < /*radius*/_200b) {
[   0.797][d][vo/gpu-next/libplacebo] [1346] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.797][d][vo/gpu-next/libplacebo] [1347] wsum += w;
[   0.797][d][vo/gpu-next/libplacebo] [1348]         c[0] = /*in*/_200c_0[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1349]         c[1] = /*in*/_200c_1[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1350]         c[2] = /*in*/_200c_2[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1351]     color[0] += w * c[0];
[   0.797][d][vo/gpu-next/libplacebo] [1352]     color[1] += w * c[1];
[   0.797][d][vo/gpu-next/libplacebo] [1353]     color[2] += w * c[2];
[   0.797][d][vo/gpu-next/libplacebo] [1354]     }
[   0.797][d][vo/gpu-next/libplacebo] [1355] idx = _200d * rel.y + rel.x + _200d * 10 + 8; 
[   0.797][d][vo/gpu-next/libplacebo] [1356] offset = ivec2(3, 5);
[   0.797][d][vo/gpu-next/libplacebo] [1357] d = length(vec2(offset) - fcoord);
[   0.797][d][vo/gpu-next/libplacebo] [1358]     if (d < /*radius*/_200b) {
[   0.797][d][vo/gpu-next/libplacebo] [1359] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.797][d][vo/gpu-next/libplacebo] [1360] wsum += w;
[   0.797][d][vo/gpu-next/libplacebo] [1361]         c[0] = /*in*/_200c_0[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1362]         c[1] = /*in*/_200c_1[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1363]         c[2] = /*in*/_200c_2[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1364]     color[0] += w * c[0];
[   0.797][d][vo/gpu-next/libplacebo] [1365]     color[1] += w * c[1];
[   0.797][d][vo/gpu-next/libplacebo] [1366]     color[2] += w * c[2];
[   0.797][d][vo/gpu-next/libplacebo] [1367]     }
[   0.797][d][vo/gpu-next/libplacebo] [1368] idx = _200d * rel.y + rel.x + _200d * 10 + 9; 
[   0.797][d][vo/gpu-next/libplacebo] [1369] offset = ivec2(4, 5);
[   0.797][d][vo/gpu-next/libplacebo] [1370] d = length(vec2(offset) - fcoord);
[   0.797][d][vo/gpu-next/libplacebo] [1371]     if (d < /*radius*/_200b) {
[   0.797][d][vo/gpu-next/libplacebo] [1372] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.797][d][vo/gpu-next/libplacebo] [1373] wsum += w;
[   0.797][d][vo/gpu-next/libplacebo] [1374]         c[0] = /*in*/_200c_0[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1375]         c[1] = /*in*/_200c_1[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1376]         c[2] = /*in*/_200c_2[idx];
[   0.797][d][vo/gpu-next/libplacebo] [1377]     color[0] += w * c[0];
[   0.797][d][vo/gpu-next/libplacebo] [1378]     color[1] += w * c[1];
[   0.797][d][vo/gpu-next/libplacebo] [1379]     color[2] += w * c[2];
[   0.797][d][vo/gpu-next/libplacebo] [1380]     }
[   0.797][d][vo/gpu-next/libplacebo] [1381] idx = _200d * rel.y + rel.x + _200d * 10 + 10; 
[   0.798][d][vo/gpu-next/libplacebo] [1382] idx = _200d * rel.y + rel.x + _200d * 10 + 11; 
[   0.798][d][vo/gpu-next/libplacebo] [1383] idx = _200d * rel.y + rel.x + _200d * 11 + 0; 
[   0.798][d][vo/gpu-next/libplacebo] [1384] idx = _200d * rel.y + rel.x + _200d * 11 + 1; 
[   0.798][d][vo/gpu-next/libplacebo] [1385] idx = _200d * rel.y + rel.x + _200d * 11 + 2; 
[   0.798][d][vo/gpu-next/libplacebo] [1386] idx = _200d * rel.y + rel.x + _200d * 11 + 3; 
[   0.798][d][vo/gpu-next/libplacebo] [1387] idx = _200d * rel.y + rel.x + _200d * 11 + 4; 
[   0.798][d][vo/gpu-next/libplacebo] [1388] offset = ivec2(-1, 6);
[   0.798][d][vo/gpu-next/libplacebo] [1389] d = length(vec2(offset) - fcoord);
[   0.798][d][vo/gpu-next/libplacebo] [1390]     if (d < /*radius*/_200b) {
[   0.798][d][vo/gpu-next/libplacebo] [1391] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.798][d][vo/gpu-next/libplacebo] [1392] wsum += w;
[   0.798][d][vo/gpu-next/libplacebo] [1393]         c[0] = /*in*/_200c_0[idx];
[   0.798][d][vo/gpu-next/libplacebo] [1394]         c[1] = /*in*/_200c_1[idx];
[   0.798][d][vo/gpu-next/libplacebo] [1395]         c[2] = /*in*/_200c_2[idx];
[   0.798][d][vo/gpu-next/libplacebo] [1396]     color[0] += w * c[0];
[   0.798][d][vo/gpu-next/libplacebo] [1397]     color[1] += w * c[1];
[   0.798][d][vo/gpu-next/libplacebo] [1398]     color[2] += w * c[2];
[   0.798][d][vo/gpu-next/libplacebo] [1399]     }
[   0.798][d][vo/gpu-next/libplacebo] [1400] idx = _200d * rel.y + rel.x + _200d * 11 + 5; 
[   0.798][d][vo/gpu-next/libplacebo] [1401] offset = ivec2(0, 6);
[   0.798][d][vo/gpu-next/libplacebo] [1402] d = length(vec2(offset) - fcoord);
[   0.798][d][vo/gpu-next/libplacebo] [1403]     if (d < /*radius*/_200b) {
[   0.798][d][vo/gpu-next/libplacebo] [1404] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.798][d][vo/gpu-next/libplacebo] [1405] wsum += w;
[   0.798][d][vo/gpu-next/libplacebo] [1406]         c[0] = /*in*/_200c_0[idx];
[   0.798][d][vo/gpu-next/libplacebo] [1407]         c[1] = /*in*/_200c_1[idx];
[   0.798][d][vo/gpu-next/libplacebo] [1408]         c[2] = /*in*/_200c_2[idx];
[   0.798][d][vo/gpu-next/libplacebo] [1409]     color[0] += w * c[0];
[   0.798][d][vo/gpu-next/libplacebo] [1410]     color[1] += w * c[1];
[   0.798][d][vo/gpu-next/libplacebo] [1411]     color[2] += w * c[2];
[   0.798][d][vo/gpu-next/libplacebo] [1412]     }
[   0.798][d][vo/gpu-next/libplacebo] [1413] idx = _200d * rel.y + rel.x + _200d * 11 + 6; 
[   0.798][d][vo/gpu-next/libplacebo] [1414] offset = ivec2(1, 6);
[   0.798][d][vo/gpu-next/libplacebo] [1415] d = length(vec2(offset) - fcoord);
[   0.798][d][vo/gpu-next/libplacebo] [1416]     if (d < /*radius*/_200b) {
[   0.798][d][vo/gpu-next/libplacebo] [1417] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.798][d][vo/gpu-next/libplacebo] [1418] wsum += w;
[   0.798][d][vo/gpu-next/libplacebo] [1419]         c[0] = /*in*/_200c_0[idx];
[   0.798][d][vo/gpu-next/libplacebo] [1420]         c[1] = /*in*/_200c_1[idx];
[   0.798][d][vo/gpu-next/libplacebo] [1421]         c[2] = /*in*/_200c_2[idx];
[   0.798][d][vo/gpu-next/libplacebo] [1422]     color[0] += w * c[0];
[   0.798][d][vo/gpu-next/libplacebo] [1423]     color[1] += w * c[1];
[   0.798][d][vo/gpu-next/libplacebo] [1424]     color[2] += w * c[2];
[   0.798][d][vo/gpu-next/libplacebo] [1425]     }
[   0.798][d][vo/gpu-next/libplacebo] [1426] idx = _200d * rel.y + rel.x + _200d * 11 + 7; 
[   0.798][d][vo/gpu-next/libplacebo] [1427] offset = ivec2(2, 6);
[   0.798][d][vo/gpu-next/libplacebo] [1428] d = length(vec2(offset) - fcoord);
[   0.798][d][vo/gpu-next/libplacebo] [1429]     if (d < /*radius*/_200b) {
[   0.798][d][vo/gpu-next/libplacebo] [1430] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.798][d][vo/gpu-next/libplacebo] [1431] wsum += w;
[   0.798][d][vo/gpu-next/libplacebo] [1432]         c[0] = /*in*/_200c_0[idx];
[   0.798][d][vo/gpu-next/libplacebo] [1433]         c[1] = /*in*/_200c_1[idx];
[   0.798][d][vo/gpu-next/libplacebo] [1434]         c[2] = /*in*/_200c_2[idx];
[   0.798][d][vo/gpu-next/libplacebo] [1435]     color[0] += w * c[0];
[   0.798][d][vo/gpu-next/libplacebo] [1436]     color[1] += w * c[1];
[   0.798][d][vo/gpu-next/libplacebo] [1437]     color[2] += w * c[2];
[   0.798][d][vo/gpu-next/libplacebo] [1438]     }
[   0.798][d][vo/gpu-next/libplacebo] [1439] idx = _200d * rel.y + rel.x + _200d * 11 + 8; 
[   0.798][d][vo/gpu-next/libplacebo] [1440] idx = _200d * rel.y + rel.x + _200d * 11 + 9; 
[   0.798][d][vo/gpu-next/libplacebo] [1441] idx = _200d * rel.y + rel.x + _200d * 11 + 10; 
[   0.798][d][vo/gpu-next/libplacebo] [1442] idx = _200d * rel.y + rel.x + _200d * 11 + 11; 
[   0.798][d][vo/gpu-next/libplacebo] [1443] color = /*scale*/_2005 / wsum * color;
[   0.798][d][vo/gpu-next/libplacebo] [1444]     color.a = 1.0;
[   0.798][d][vo/gpu-next/libplacebo] [1445] }
[   0.798][d][vo/gpu-next/libplacebo] [1446] // pl_shader_delinearize 
[   0.798][d][vo/gpu-next/libplacebo] [1447] color.rgb = max(color.rgb, 0.0); 
[   0.798][d][vo/gpu-next/libplacebo] [1448] color.rgb = pow(_2012 * color.rgb, vec3(1.0/2.4)) - vec3(_2013); 
[   0.798][d][vo/gpu-next/libplacebo] [1449] // pl_shader_encode_color 
[   0.798][d][vo/gpu-next/libplacebo] [1450] { 
[   0.798][d][vo/gpu-next/libplacebo] [1451] color.rgb *= vec3(color.a); 
[   0.798][d][vo/gpu-next/libplacebo] [1452] }
[   0.798][d][vo/gpu-next/libplacebo] [1453] // pl_shader_dither 
[   0.798][d][vo/gpu-next/libplacebo] [1454] {                    
[   0.798][d][vo/gpu-next/libplacebo] [1455] float bias;          
[   0.798][d][vo/gpu-next/libplacebo] [1456] vec2 pos = fract(gl_FragCoord.xy * 1.0/_2016); 
[   0.798][d][vo/gpu-next/libplacebo] [1457] bias = _2014(ivec2(pos * _2017));
[   0.798][d][vo/gpu-next/libplacebo] [1458] const float scale = 255.0; 
[   0.798][d][vo/gpu-next/libplacebo] [1459] color = scale * color + vec4(bias);   
[   0.798][d][vo/gpu-next/libplacebo] [1460] color = floor(color) * (1.0 / scale); 
[   0.798][d][vo/gpu-next/libplacebo] [1461] } 
[   0.798][d][vo/gpu-next/libplacebo] [1462] color.rgba *= vec4(1.0 / _2018); 
[   0.798][d][vo/gpu-next/libplacebo] [1463] vec4 _2019 = color;                 
[   0.798][d][vo/gpu-next/libplacebo] [1464] color = vec4(0.0, 0.0, 0.0, 1.0); 
[   0.798][d][vo/gpu-next/libplacebo] [1465] color[0] = _2019[0]; 
[   0.798][d][vo/gpu-next/libplacebo] [1466] color[1] = _2019[1]; 
[   0.798][d][vo/gpu-next/libplacebo] [1467] color[2] = _2019[2]; 
[   0.798][d][vo/gpu-next/libplacebo] [1468] color[3] = _2019[3]; 
[   0.798][d][vo/gpu-next/libplacebo] [1469] ivec2 dir = ivec2(1, 1);
[   0.798][d][vo/gpu-next/libplacebo] [1470] ivec2 pos = _2020 + dir * ivec2(gl_GlobalInvocationID).xy;
[   0.798][d][vo/gpu-next/libplacebo] [1471] vec2 fpos = _201a * vec2(gl_GlobalInvocationID);
[   0.798][d][vo/gpu-next/libplacebo] [1472] if (fpos.x < 1.0 && fpos.y < 1.0) {
[   0.798][d][vo/gpu-next/libplacebo] [1473] imageStore(_201f, pos, color);
[   0.798][d][vo/gpu-next/libplacebo] [1474] }
[   0.798][d][vo/gpu-next/libplacebo] [1475] 
[   0.798][d][vo/gpu-next/libplacebo] [1476] }
[   0.798][d][vo/gpu-next/libplacebo] [1477] 
[   0.798][d][vo/gpu-next/libplacebo] [1478] void main() {
[   0.798][d][vo/gpu-next/libplacebo] [1479] _2001();
[   0.798][d][vo/gpu-next/libplacebo] [1480] }
[   0.798][d][vo/gpu-next] cache_load_obj: key(a62629033c800bd7), size(52805), load time(0.181 ms)
[   0.798][d][vo/gpu-next/libplacebo] Using cached DXBC shader
[   0.798][d][vo/gpu-next] cache_save_obj: key(a62629033c800bd7), size(52805)
[   0.806][v][cplayer] first video frame after restart shown
[   0.806][d][vo/gpu-next/libplacebo] (Re)creating 2332x1312x0 texture with format rgba16hf: src/renderer.c:3548
[   0.807][d][vo/gpu-next/libplacebo] compute shader source:
[   0.807][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.807][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_compute_shader : enable
[   0.807][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_shader_image_load_store : enable
[   0.807][d][vo/gpu-next/libplacebo] [  4] #extension GL_ARB_uniform_buffer_object : enable
[   0.807][d][vo/gpu-next/libplacebo] [  5] #extension GL_ARB_texture_gather : enable
[   0.807][d][vo/gpu-next/libplacebo] [  6] layout(binding=0) uniform  sampler2D _2002;
[   0.807][d][vo/gpu-next/libplacebo] [  7] layout(binding=1) uniform  sampler1D _2007;
[   0.807][d][vo/gpu-next/libplacebo] [  8] layout(binding=2, rgba16f) writeonly restrict uniform image2D _2019;
[   0.807][d][vo/gpu-next/libplacebo] [  9] layout(std140, binding=3) uniform _201b {
[   0.807][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=0) vec2 _2004;
[   0.807][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=8) vec2 _2014;
[   0.807][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=16) vec2 _2015;
[   0.807][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=24) vec2 _2016;
[   0.807][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=32) vec2 _2017;
[   0.807][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=40) vec2 _2018;
[   0.807][d][vo/gpu-next/libplacebo] [ 16]     layout(offset=48) ivec2 _201a;
[   0.807][d][vo/gpu-next/libplacebo] [ 17] };
[   0.807][d][vo/gpu-next/libplacebo] [ 18] layout (local_size_x = 32, local_size_y = 8) in;
[   0.807][d][vo/gpu-next/libplacebo] [ 19] #define frag_pos(id) (vec2(id) + vec2(0.5))  
[   0.807][d][vo/gpu-next/libplacebo] [ 20] #define frag_map(id) (_2014 * frag_pos(id))    
[   0.807][d][vo/gpu-next/libplacebo] [ 21] #define gl_FragCoord vec4(frag_pos(gl_GlobalInvocationID), 0.0, 1.0) 
[   0.807][d][vo/gpu-next/libplacebo] [ 22] #define _2003_map(id) (mix(mix(_2015, _2016, frag_map(id).x),      mix(_2017, _2018, frag_map(id).x), frag_map(id).y)) 
[   0.807][d][vo/gpu-next/libplacebo] [ 23] #define _2003 (_2003_map(gl_GlobalInvocationID)) 
[   0.807][d][vo/gpu-next/libplacebo] [ 24] 
[   0.807][d][vo/gpu-next/libplacebo] [ 25] const float _2005 = float(1); 
[   0.807][d][vo/gpu-next/libplacebo] [ 26] const float _2009 = float(0.99609375); 
[   0.807][d][vo/gpu-next/libplacebo] [ 27] const float _200a = float(0.001953125); 
[   0.807][d][vo/gpu-next/libplacebo] [ 28] #define _2008(x) (_2009 * (x) + _200a) 
[   0.807][d][vo/gpu-next/libplacebo] [ 29] #define _2006(pos) (textureLod(_2007, float(\
[   0.807][d][vo/gpu-next/libplacebo] [ 30]     _2008(float(pos))\
[   0.807][d][vo/gpu-next/libplacebo] [ 31]   ), 0.0).x)
[   0.807][d][vo/gpu-next/libplacebo] [ 32] const float _200b = float(5.105119228363037); 
[   0.807][d][vo/gpu-next/libplacebo] [ 33] shared vec2 _200c_base; 
[   0.807][d][vo/gpu-next/libplacebo] [ 34] const int _200d = 72; 
[   0.807][d][vo/gpu-next/libplacebo] [ 35] const int _200e = 32; 
[   0.807][d][vo/gpu-next/libplacebo] [ 36] const int _200f = 65; 
[   0.807][d][vo/gpu-next/libplacebo] [ 37] const int _2010 = 26; 
[   0.807][d][vo/gpu-next/libplacebo] [ 38] shared float _200c_0[_200e * _200d]; 
[   0.807][d][vo/gpu-next/libplacebo] [ 39] shared float _200c_1[_200e * _200d]; 
[   0.807][d][vo/gpu-next/libplacebo] [ 40] shared float _200c_2[_200e * _200d]; 
[   0.807][d][vo/gpu-next/libplacebo] [ 41] const float _2011 = float(0); 
[   0.807][d][vo/gpu-next/libplacebo] [ 42] const float _2012 = float(1.149015188217163); 
[   0.807][d][vo/gpu-next/libplacebo] [ 43] const float _2013 = float(0.0595848374068737); 
[   0.807][d][vo/gpu-next/libplacebo] [ 44] void _2001() {
[   0.807][d][vo/gpu-next/libplacebo] [ 45] // pl_shader_sample_polar                     
[   0.807][d][vo/gpu-next/libplacebo] [ 46] vec4 color = vec4(0.0);                       
[   0.807][d][vo/gpu-next/libplacebo] [ 47] {                                             
[   0.807][d][vo/gpu-next/libplacebo] [ 48] vec2 pos = _2003, pt = _2004;                     
[   0.807][d][vo/gpu-next/libplacebo] [ 49] vec2 size = vec2(textureSize(_2002, 0));        
[   0.807][d][vo/gpu-next/libplacebo] [ 50] vec2 fcoord = fract(pos * size - vec2(0.5));  
[   0.807][d][vo/gpu-next/libplacebo] [ 51] vec2 base = pos - pt * fcoord;                
[   0.807][d][vo/gpu-next/libplacebo] [ 52] vec2 center = base + pt * vec2(0.5);          
[   0.807][d][vo/gpu-next/libplacebo] [ 53] ivec2 offset;                                 
[   0.807][d][vo/gpu-next/libplacebo] [ 54] float w, d, wsum = 0.0;                       
[   0.807][d][vo/gpu-next/libplacebo] [ 55] int idx;                                      
[   0.807][d][vo/gpu-next/libplacebo] [ 56] vec4 c;                                       
[   0.807][d][vo/gpu-next/libplacebo] [ 57] uvec2 base_id = uvec2(0u); 
[   0.807][d][vo/gpu-next/libplacebo] [ 58] if (gl_LocalInvocationID.xy == base_id)               
[   0.807][d][vo/gpu-next/libplacebo] [ 59]     _200c_base = base;                                  
[   0.807][d][vo/gpu-next/libplacebo] [ 60] barrier();                                            
[   0.807][d][vo/gpu-next/libplacebo] [ 61] ivec2 rel = ivec2(round((base - _200c_base) * size));   
[   0.807][d][vo/gpu-next/libplacebo] [ 62] for (int y = int(gl_LocalInvocationID.y); y < _2010; y += 8) {     
[   0.807][d][vo/gpu-next/libplacebo] [ 63] for (int x = int(gl_LocalInvocationID.x); x < _200f; x += 32) {     
[   0.807][d][vo/gpu-next/libplacebo] [ 64] c = textureLod(_2002, _200c_base + pt * vec2(x - 5, y - 5), 0.0);   
[   0.807][d][vo/gpu-next/libplacebo] [ 65] _200c_0[_200d * y + x] = c[0]; 
[   0.807][d][vo/gpu-next/libplacebo] [ 66] _200c_1[_200d * y + x] = c[1]; 
[   0.807][d][vo/gpu-next/libplacebo] [ 67] _200c_2[_200d * y + x] = c[2]; 
[   0.807][d][vo/gpu-next/libplacebo] [ 68] }}                     
[   0.807][d][vo/gpu-next/libplacebo] [ 69] barrier();             
[   0.807][d][vo/gpu-next/libplacebo] [ 70] idx = _200d * rel.y + rel.x + _200d * 0 + 0; 
[   0.807][d][vo/gpu-next/libplacebo] [ 71] idx = _200d * rel.y + rel.x + _200d * 0 + 1; 
[   0.807][d][vo/gpu-next/libplacebo] [ 72] idx = _200d * rel.y + rel.x + _200d * 0 + 2; 
[   0.807][d][vo/gpu-next/libplacebo] [ 73] idx = _200d * rel.y + rel.x + _200d * 0 + 3; 
[   0.807][d][vo/gpu-next/libplacebo] [ 74] idx = _200d * rel.y + rel.x + _200d * 0 + 4; 
[   0.807][d][vo/gpu-next/libplacebo] [ 75] offset = ivec2(-1, -5);
[   0.807][d][vo/gpu-next/libplacebo] [ 76] d = length(vec2(offset) - fcoord);
[   0.807][d][vo/gpu-next/libplacebo] [ 77]     if (d < /*radius*/_200b) {
[   0.807][d][vo/gpu-next/libplacebo] [ 78] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.807][d][vo/gpu-next/libplacebo] [ 79] wsum += w;
[   0.807][d][vo/gpu-next/libplacebo] [ 80]         c[0] = /*in*/_200c_0[idx];
[   0.807][d][vo/gpu-next/libplacebo] [ 81]         c[1] = /*in*/_200c_1[idx];
[   0.807][d][vo/gpu-next/libplacebo] [ 82]         c[2] = /*in*/_200c_2[idx];
[   0.807][d][vo/gpu-next/libplacebo] [ 83]     color[0] += w * c[0];
[   0.807][d][vo/gpu-next/libplacebo] [ 84]     color[1] += w * c[1];
[   0.807][d][vo/gpu-next/libplacebo] [ 85]     color[2] += w * c[2];
[   0.807][d][vo/gpu-next/libplacebo] [ 86]     }
[   0.807][d][vo/gpu-next/libplacebo] [ 87] idx = _200d * rel.y + rel.x + _200d * 0 + 5; 
[   0.807][d][vo/gpu-next/libplacebo] [ 88] offset = ivec2(0, -5);
[   0.807][d][vo/gpu-next/libplacebo] [ 89] d = length(vec2(offset) - fcoord);
[   0.807][d][vo/gpu-next/libplacebo] [ 90]     if (d < /*radius*/_200b) {
[   0.807][d][vo/gpu-next/libplacebo] [ 91] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.807][d][vo/gpu-next/libplacebo] [ 92] wsum += w;
[   0.807][d][vo/gpu-next/libplacebo] [ 93]         c[0] = /*in*/_200c_0[idx];
[   0.807][d][vo/gpu-next/libplacebo] [ 94]         c[1] = /*in*/_200c_1[idx];
[   0.807][d][vo/gpu-next/libplacebo] [ 95]         c[2] = /*in*/_200c_2[idx];
[   0.807][d][vo/gpu-next/libplacebo] [ 96]     color[0] += w * c[0];
[   0.807][d][vo/gpu-next/libplacebo] [ 97]     color[1] += w * c[1];
[   0.807][d][vo/gpu-next/libplacebo] [ 98]     color[2] += w * c[2];
[   0.807][d][vo/gpu-next/libplacebo] [ 99]     }
[   0.807][d][vo/gpu-next/libplacebo] [100] idx = _200d * rel.y + rel.x + _200d * 0 + 6; 
[   0.807][d][vo/gpu-next/libplacebo] [101] offset = ivec2(1, -5);
[   0.807][d][vo/gpu-next/libplacebo] [102] d = length(vec2(offset) - fcoord);
[   0.807][d][vo/gpu-next/libplacebo] [103]     if (d < /*radius*/_200b) {
[   0.807][d][vo/gpu-next/libplacebo] [104] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.807][d][vo/gpu-next/libplacebo] [105] wsum += w;
[   0.807][d][vo/gpu-next/libplacebo] [106]         c[0] = /*in*/_200c_0[idx];
[   0.807][d][vo/gpu-next/libplacebo] [107]         c[1] = /*in*/_200c_1[idx];
[   0.807][d][vo/gpu-next/libplacebo] [108]         c[2] = /*in*/_200c_2[idx];
[   0.807][d][vo/gpu-next/libplacebo] [109]     color[0] += w * c[0];
[   0.807][d][vo/gpu-next/libplacebo] [110]     color[1] += w * c[1];
[   0.807][d][vo/gpu-next/libplacebo] [111]     color[2] += w * c[2];
[   0.807][d][vo/gpu-next/libplacebo] [112]     }
[   0.807][d][vo/gpu-next/libplacebo] [113] idx = _200d * rel.y + rel.x + _200d * 0 + 7; 
[   0.807][d][vo/gpu-next/libplacebo] [114] offset = ivec2(2, -5);
[   0.807][d][vo/gpu-next/libplacebo] [115] d = length(vec2(offset) - fcoord);
[   0.807][d][vo/gpu-next/libplacebo] [116]     if (d < /*radius*/_200b) {
[   0.807][d][vo/gpu-next/libplacebo] [117] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.807][d][vo/gpu-next/libplacebo] [118] wsum += w;
[   0.807][d][vo/gpu-next/libplacebo] [119]         c[0] = /*in*/_200c_0[idx];
[   0.807][d][vo/gpu-next/libplacebo] [120]         c[1] = /*in*/_200c_1[idx];
[   0.807][d][vo/gpu-next/libplacebo] [121]         c[2] = /*in*/_200c_2[idx];
[   0.807][d][vo/gpu-next/libplacebo] [122]     color[0] += w * c[0];
[   0.807][d][vo/gpu-next/libplacebo] [123]     color[1] += w * c[1];
[   0.807][d][vo/gpu-next/libplacebo] [124]     color[2] += w * c[2];
[   0.807][d][vo/gpu-next/libplacebo] [125]     }
[   0.807][d][vo/gpu-next/libplacebo] [126] idx = _200d * rel.y + rel.x + _200d * 0 + 8; 
[   0.807][d][vo/gpu-next/libplacebo] [127] idx = _200d * rel.y + rel.x + _200d * 0 + 9; 
[   0.807][d][vo/gpu-next/libplacebo] [128] idx = _200d * rel.y + rel.x + _200d * 0 + 10; 
[   0.807][d][vo/gpu-next/libplacebo] [129] idx = _200d * rel.y + rel.x + _200d * 0 + 11; 
[   0.807][d][vo/gpu-next/libplacebo] [130] idx = _200d * rel.y + rel.x + _200d * 1 + 0; 
[   0.807][d][vo/gpu-next/libplacebo] [131] idx = _200d * rel.y + rel.x + _200d * 1 + 1; 
[   0.807][d][vo/gpu-next/libplacebo] [132] idx = _200d * rel.y + rel.x + _200d * 1 + 2; 
[   0.807][d][vo/gpu-next/libplacebo] [133] offset = ivec2(-3, -4);
[   0.807][d][vo/gpu-next/libplacebo] [134] d = length(vec2(offset) - fcoord);
[   0.807][d][vo/gpu-next/libplacebo] [135]     if (d < /*radius*/_200b) {
[   0.807][d][vo/gpu-next/libplacebo] [136] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.807][d][vo/gpu-next/libplacebo] [137] wsum += w;
[   0.807][d][vo/gpu-next/libplacebo] [138]         c[0] = /*in*/_200c_0[idx];
[   0.807][d][vo/gpu-next/libplacebo] [139]         c[1] = /*in*/_200c_1[idx];
[   0.807][d][vo/gpu-next/libplacebo] [140]         c[2] = /*in*/_200c_2[idx];
[   0.807][d][vo/gpu-next/libplacebo] [141]     color[0] += w * c[0];
[   0.807][d][vo/gpu-next/libplacebo] [142]     color[1] += w * c[1];
[   0.807][d][vo/gpu-next/libplacebo] [143]     color[2] += w * c[2];
[   0.807][d][vo/gpu-next/libplacebo] [144]     }
[   0.807][d][vo/gpu-next/libplacebo] [145] idx = _200d * rel.y + rel.x + _200d * 1 + 3; 
[   0.807][d][vo/gpu-next/libplacebo] [146] offset = ivec2(-2, -4);
[   0.807][d][vo/gpu-next/libplacebo] [147] d = length(vec2(offset) - fcoord);
[   0.807][d][vo/gpu-next/libplacebo] [148]     if (d < /*radius*/_200b) {
[   0.807][d][vo/gpu-next/libplacebo] [149] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.807][d][vo/gpu-next/libplacebo] [150] wsum += w;
[   0.807][d][vo/gpu-next/libplacebo] [151]         c[0] = /*in*/_200c_0[idx];
[   0.807][d][vo/gpu-next/libplacebo] [152]         c[1] = /*in*/_200c_1[idx];
[   0.807][d][vo/gpu-next/libplacebo] [153]         c[2] = /*in*/_200c_2[idx];
[   0.807][d][vo/gpu-next/libplacebo] [154]     color[0] += w * c[0];
[   0.807][d][vo/gpu-next/libplacebo] [155]     color[1] += w * c[1];
[   0.807][d][vo/gpu-next/libplacebo] [156]     color[2] += w * c[2];
[   0.807][d][vo/gpu-next/libplacebo] [157]     }
[   0.807][d][vo/gpu-next/libplacebo] [158] idx = _200d * rel.y + rel.x + _200d * 1 + 4; 
[   0.807][d][vo/gpu-next/libplacebo] [159] offset = ivec2(-1, -4);
[   0.807][d][vo/gpu-next/libplacebo] [160] d = length(vec2(offset) - fcoord);
[   0.807][d][vo/gpu-next/libplacebo] [161]     if (d < /*radius*/_200b) {
[   0.807][d][vo/gpu-next/libplacebo] [162] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [163] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [164]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [165]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [166]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [167]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [168]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [169]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [170]     }
[   0.808][d][vo/gpu-next/libplacebo] [171] idx = _200d * rel.y + rel.x + _200d * 1 + 5; 
[   0.808][d][vo/gpu-next/libplacebo] [172] offset = ivec2(0, -4);
[   0.808][d][vo/gpu-next/libplacebo] [173] d = length(vec2(offset) - fcoord);
[   0.808][d][vo/gpu-next/libplacebo] [174]     if (d < /*radius*/_200b) {
[   0.808][d][vo/gpu-next/libplacebo] [175] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [176] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [177]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [178]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [179]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [180]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [181]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [182]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [183]     }
[   0.808][d][vo/gpu-next/libplacebo] [184] idx = _200d * rel.y + rel.x + _200d * 1 + 6; 
[   0.808][d][vo/gpu-next/libplacebo] [185] offset = ivec2(1, -4);
[   0.808][d][vo/gpu-next/libplacebo] [186] d = length(vec2(offset) - fcoord);
[   0.808][d][vo/gpu-next/libplacebo] [187]     if (d < /*radius*/_200b) {
[   0.808][d][vo/gpu-next/libplacebo] [188] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [189] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [190]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [191]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [192]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [193]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [194]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [195]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [196]     }
[   0.808][d][vo/gpu-next/libplacebo] [197] idx = _200d * rel.y + rel.x + _200d * 1 + 7; 
[   0.808][d][vo/gpu-next/libplacebo] [198] offset = ivec2(2, -4);
[   0.808][d][vo/gpu-next/libplacebo] [199] d = length(vec2(offset) - fcoord);
[   0.808][d][vo/gpu-next/libplacebo] [200]     if (d < /*radius*/_200b) {
[   0.808][d][vo/gpu-next/libplacebo] [201] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [202] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [203]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [204]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [205]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [206]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [207]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [208]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [209]     }
[   0.808][d][vo/gpu-next/libplacebo] [210] idx = _200d * rel.y + rel.x + _200d * 1 + 8; 
[   0.808][d][vo/gpu-next/libplacebo] [211] offset = ivec2(3, -4);
[   0.808][d][vo/gpu-next/libplacebo] [212] d = length(vec2(offset) - fcoord);
[   0.808][d][vo/gpu-next/libplacebo] [213]     if (d < /*radius*/_200b) {
[   0.808][d][vo/gpu-next/libplacebo] [214] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [215] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [216]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [217]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [218]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [219]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [220]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [221]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [222]     }
[   0.808][d][vo/gpu-next/libplacebo] [223] idx = _200d * rel.y + rel.x + _200d * 1 + 9; 
[   0.808][d][vo/gpu-next/libplacebo] [224] offset = ivec2(4, -4);
[   0.808][d][vo/gpu-next/libplacebo] [225] d = length(vec2(offset) - fcoord);
[   0.808][d][vo/gpu-next/libplacebo] [226]     if (d < /*radius*/_200b) {
[   0.808][d][vo/gpu-next/libplacebo] [227] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [228] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [229]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [230]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [231]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [232]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [233]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [234]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [235]     }
[   0.808][d][vo/gpu-next/libplacebo] [236] idx = _200d * rel.y + rel.x + _200d * 1 + 10; 
[   0.808][d][vo/gpu-next/libplacebo] [237] idx = _200d * rel.y + rel.x + _200d * 1 + 11; 
[   0.808][d][vo/gpu-next/libplacebo] [238] idx = _200d * rel.y + rel.x + _200d * 2 + 0; 
[   0.808][d][vo/gpu-next/libplacebo] [239] idx = _200d * rel.y + rel.x + _200d * 2 + 1; 
[   0.808][d][vo/gpu-next/libplacebo] [240] offset = ivec2(-4, -3);
[   0.808][d][vo/gpu-next/libplacebo] [241] d = length(vec2(offset) - fcoord);
[   0.808][d][vo/gpu-next/libplacebo] [242]     if (d < /*radius*/_200b) {
[   0.808][d][vo/gpu-next/libplacebo] [243] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [244] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [245]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [246]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [247]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [248]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [249]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [250]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [251]     }
[   0.808][d][vo/gpu-next/libplacebo] [252] idx = _200d * rel.y + rel.x + _200d * 2 + 2; 
[   0.808][d][vo/gpu-next/libplacebo] [253] offset = ivec2(-3, -3);
[   0.808][d][vo/gpu-next/libplacebo] [254] d = length(vec2(offset) - fcoord);
[   0.808][d][vo/gpu-next/libplacebo] [255]     if (d < /*radius*/_200b) {
[   0.808][d][vo/gpu-next/libplacebo] [256] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [257] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [258]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [259]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [260]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [261]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [262]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [263]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [264]     }
[   0.808][d][vo/gpu-next/libplacebo] [265] idx = _200d * rel.y + rel.x + _200d * 2 + 3; 
[   0.808][d][vo/gpu-next/libplacebo] [266] offset = ivec2(-2, -3);
[   0.808][d][vo/gpu-next/libplacebo] [267] d = length(vec2(offset) - fcoord);
[   0.808][d][vo/gpu-next/libplacebo] [268] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [269] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [270]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [271]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [272]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [273]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [274]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [275]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [276] idx = _200d * rel.y + rel.x + _200d * 2 + 4; 
[   0.808][d][vo/gpu-next/libplacebo] [277] offset = ivec2(-1, -3);
[   0.808][d][vo/gpu-next/libplacebo] [278] d = length(vec2(offset) - fcoord);
[   0.808][d][vo/gpu-next/libplacebo] [279] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [280] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [281]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [282]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [283]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [284]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [285]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [286]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [287] idx = _200d * rel.y + rel.x + _200d * 2 + 5; 
[   0.808][d][vo/gpu-next/libplacebo] [288] offset = ivec2(0, -3);
[   0.808][d][vo/gpu-next/libplacebo] [289] d = length(vec2(offset) - fcoord);
[   0.808][d][vo/gpu-next/libplacebo] [290] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [291] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [292]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [293]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [294]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [295]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [296]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [297]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [298] idx = _200d * rel.y + rel.x + _200d * 2 + 6; 
[   0.808][d][vo/gpu-next/libplacebo] [299] offset = ivec2(1, -3);
[   0.808][d][vo/gpu-next/libplacebo] [300] d = length(vec2(offset) - fcoord);
[   0.808][d][vo/gpu-next/libplacebo] [301] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [302] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [303]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [304]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [305]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [306]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [307]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [308]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [309] idx = _200d * rel.y + rel.x + _200d * 2 + 7; 
[   0.808][d][vo/gpu-next/libplacebo] [310] offset = ivec2(2, -3);
[   0.808][d][vo/gpu-next/libplacebo] [311] d = length(vec2(offset) - fcoord);
[   0.808][d][vo/gpu-next/libplacebo] [312] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [313] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [314]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [315]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [316]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [317]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [318]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [319]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [320] idx = _200d * rel.y + rel.x + _200d * 2 + 8; 
[   0.808][d][vo/gpu-next/libplacebo] [321] offset = ivec2(3, -3);
[   0.808][d][vo/gpu-next/libplacebo] [322] d = length(vec2(offset) - fcoord);
[   0.808][d][vo/gpu-next/libplacebo] [323] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [324] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [325]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [326]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [327]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [328]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [329]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [330]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [331] idx = _200d * rel.y + rel.x + _200d * 2 + 9; 
[   0.808][d][vo/gpu-next/libplacebo] [332] offset = ivec2(4, -3);
[   0.808][d][vo/gpu-next/libplacebo] [333] d = length(vec2(offset) - fcoord);
[   0.808][d][vo/gpu-next/libplacebo] [334]     if (d < /*radius*/_200b) {
[   0.808][d][vo/gpu-next/libplacebo] [335] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [336] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [337]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [338]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [339]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [340]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [341]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [342]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [343]     }
[   0.808][d][vo/gpu-next/libplacebo] [344] idx = _200d * rel.y + rel.x + _200d * 2 + 10; 
[   0.808][d][vo/gpu-next/libplacebo] [345] offset = ivec2(5, -3);
[   0.808][d][vo/gpu-next/libplacebo] [346] d = length(vec2(offset) - fcoord);
[   0.808][d][vo/gpu-next/libplacebo] [347]     if (d < /*radius*/_200b) {
[   0.808][d][vo/gpu-next/libplacebo] [348] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [349] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [350]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [351]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [352]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [353]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [354]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [355]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [356]     }
[   0.808][d][vo/gpu-next/libplacebo] [357] idx = _200d * rel.y + rel.x + _200d * 2 + 11; 
[   0.808][d][vo/gpu-next/libplacebo] [358] idx = _200d * rel.y + rel.x + _200d * 3 + 0; 
[   0.808][d][vo/gpu-next/libplacebo] [359] idx = _200d * rel.y + rel.x + _200d * 3 + 1; 
[   0.808][d][vo/gpu-next/libplacebo] [360] offset = ivec2(-4, -2);
[   0.808][d][vo/gpu-next/libplacebo] [361] d = length(vec2(offset) - fcoord);
[   0.808][d][vo/gpu-next/libplacebo] [362]     if (d < /*radius*/_200b) {
[   0.808][d][vo/gpu-next/libplacebo] [363] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.808][d][vo/gpu-next/libplacebo] [364] wsum += w;
[   0.808][d][vo/gpu-next/libplacebo] [365]         c[0] = /*in*/_200c_0[idx];
[   0.808][d][vo/gpu-next/libplacebo] [366]         c[1] = /*in*/_200c_1[idx];
[   0.808][d][vo/gpu-next/libplacebo] [367]         c[2] = /*in*/_200c_2[idx];
[   0.808][d][vo/gpu-next/libplacebo] [368]     color[0] += w * c[0];
[   0.808][d][vo/gpu-next/libplacebo] [369]     color[1] += w * c[1];
[   0.808][d][vo/gpu-next/libplacebo] [370]     color[2] += w * c[2];
[   0.808][d][vo/gpu-next/libplacebo] [371]     }
[   0.808][d][vo/gpu-next/libplacebo] [372] idx = _200d * rel.y + rel.x + _200d * 3 + 2; 
[   0.808][d][vo/gpu-next/libplacebo] [373] offset = ivec2(-3, -2);
[   0.809][d][vo/gpu-next/libplacebo] [374] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [375] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [376] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [377]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [378]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [379]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [380]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [381]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [382]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [383] idx = _200d * rel.y + rel.x + _200d * 3 + 3; 
[   0.809][d][vo/gpu-next/libplacebo] [384] offset = ivec2(-2, -2);
[   0.809][d][vo/gpu-next/libplacebo] [385] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [386] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [387] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [388]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [389]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [390]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [391]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [392]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [393]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [394] idx = _200d * rel.y + rel.x + _200d * 3 + 4; 
[   0.809][d][vo/gpu-next/libplacebo] [395] offset = ivec2(-1, -2);
[   0.809][d][vo/gpu-next/libplacebo] [396] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [397] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [398] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [399]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [400]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [401]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [402]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [403]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [404]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [405] idx = _200d * rel.y + rel.x + _200d * 3 + 5; 
[   0.809][d][vo/gpu-next/libplacebo] [406] offset = ivec2(0, -2);
[   0.809][d][vo/gpu-next/libplacebo] [407] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [408] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [409] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [410]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [411]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [412]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [413]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [414]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [415]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [416] idx = _200d * rel.y + rel.x + _200d * 3 + 6; 
[   0.809][d][vo/gpu-next/libplacebo] [417] offset = ivec2(1, -2);
[   0.809][d][vo/gpu-next/libplacebo] [418] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [419] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [420] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [421]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [422]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [423]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [424]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [425]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [426]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [427] idx = _200d * rel.y + rel.x + _200d * 3 + 7; 
[   0.809][d][vo/gpu-next/libplacebo] [428] offset = ivec2(2, -2);
[   0.809][d][vo/gpu-next/libplacebo] [429] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [430] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [431] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [432]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [433]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [434]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [435]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [436]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [437]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [438] idx = _200d * rel.y + rel.x + _200d * 3 + 8; 
[   0.809][d][vo/gpu-next/libplacebo] [439] offset = ivec2(3, -2);
[   0.809][d][vo/gpu-next/libplacebo] [440] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [441] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [442] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [443]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [444]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [445]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [446]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [447]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [448]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [449] idx = _200d * rel.y + rel.x + _200d * 3 + 9; 
[   0.809][d][vo/gpu-next/libplacebo] [450] offset = ivec2(4, -2);
[   0.809][d][vo/gpu-next/libplacebo] [451] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [452] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [453] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [454]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [455]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [456]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [457]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [458]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [459]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [460] idx = _200d * rel.y + rel.x + _200d * 3 + 10; 
[   0.809][d][vo/gpu-next/libplacebo] [461] offset = ivec2(5, -2);
[   0.809][d][vo/gpu-next/libplacebo] [462] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [463]     if (d < /*radius*/_200b) {
[   0.809][d][vo/gpu-next/libplacebo] [464] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [465] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [466]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [467]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [468]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [469]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [470]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [471]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [472]     }
[   0.809][d][vo/gpu-next/libplacebo] [473] idx = _200d * rel.y + rel.x + _200d * 3 + 11; 
[   0.809][d][vo/gpu-next/libplacebo] [474] idx = _200d * rel.y + rel.x + _200d * 4 + 0; 
[   0.809][d][vo/gpu-next/libplacebo] [475] offset = ivec2(-5, -1);
[   0.809][d][vo/gpu-next/libplacebo] [476] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [477]     if (d < /*radius*/_200b) {
[   0.809][d][vo/gpu-next/libplacebo] [478] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [479] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [480]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [481]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [482]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [483]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [484]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [485]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [486]     }
[   0.809][d][vo/gpu-next/libplacebo] [487] idx = _200d * rel.y + rel.x + _200d * 4 + 1; 
[   0.809][d][vo/gpu-next/libplacebo] [488] offset = ivec2(-4, -1);
[   0.809][d][vo/gpu-next/libplacebo] [489] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [490]     if (d < /*radius*/_200b) {
[   0.809][d][vo/gpu-next/libplacebo] [491] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [492] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [493]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [494]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [495]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [496]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [497]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [498]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [499]     }
[   0.809][d][vo/gpu-next/libplacebo] [500] idx = _200d * rel.y + rel.x + _200d * 4 + 2; 
[   0.809][d][vo/gpu-next/libplacebo] [501] offset = ivec2(-3, -1);
[   0.809][d][vo/gpu-next/libplacebo] [502] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [503] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [504] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [505]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [506]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [507]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [508]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [509]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [510]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [511] idx = _200d * rel.y + rel.x + _200d * 4 + 3; 
[   0.809][d][vo/gpu-next/libplacebo] [512] offset = ivec2(-2, -1);
[   0.809][d][vo/gpu-next/libplacebo] [513] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [514] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [515] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [516]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [517]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [518]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [519]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [520]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [521]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [522] idx = _200d * rel.y + rel.x + _200d * 4 + 4; 
[   0.809][d][vo/gpu-next/libplacebo] [523] offset = ivec2(-1, -1);
[   0.809][d][vo/gpu-next/libplacebo] [524] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [525] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [526] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [527]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [528]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [529]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [530]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [531]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [532]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [533] idx = _200d * rel.y + rel.x + _200d * 4 + 5; 
[   0.809][d][vo/gpu-next/libplacebo] [534] offset = ivec2(0, -1);
[   0.809][d][vo/gpu-next/libplacebo] [535] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [536] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [537] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [538]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [539]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [540]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [541]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [542]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [543]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [544] idx = _200d * rel.y + rel.x + _200d * 4 + 6; 
[   0.809][d][vo/gpu-next/libplacebo] [545] offset = ivec2(1, -1);
[   0.809][d][vo/gpu-next/libplacebo] [546] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [547] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [548] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [549]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [550]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [551]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [552]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [553]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [554]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [555] idx = _200d * rel.y + rel.x + _200d * 4 + 7; 
[   0.809][d][vo/gpu-next/libplacebo] [556] offset = ivec2(2, -1);
[   0.809][d][vo/gpu-next/libplacebo] [557] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [558] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [559] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [560]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [561]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [562]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [563]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [564]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [565]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [566] idx = _200d * rel.y + rel.x + _200d * 4 + 8; 
[   0.809][d][vo/gpu-next/libplacebo] [567] offset = ivec2(3, -1);
[   0.809][d][vo/gpu-next/libplacebo] [568] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [569] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [570] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [571]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [572]         c[1] = /*in*/_200c_1[idx];
[   0.809][d][vo/gpu-next/libplacebo] [573]         c[2] = /*in*/_200c_2[idx];
[   0.809][d][vo/gpu-next/libplacebo] [574]     color[0] += w * c[0];
[   0.809][d][vo/gpu-next/libplacebo] [575]     color[1] += w * c[1];
[   0.809][d][vo/gpu-next/libplacebo] [576]     color[2] += w * c[2];
[   0.809][d][vo/gpu-next/libplacebo] [577] idx = _200d * rel.y + rel.x + _200d * 4 + 9; 
[   0.809][d][vo/gpu-next/libplacebo] [578] offset = ivec2(4, -1);
[   0.809][d][vo/gpu-next/libplacebo] [579] d = length(vec2(offset) - fcoord);
[   0.809][d][vo/gpu-next/libplacebo] [580] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.809][d][vo/gpu-next/libplacebo] [581] wsum += w;
[   0.809][d][vo/gpu-next/libplacebo] [582]         c[0] = /*in*/_200c_0[idx];
[   0.809][d][vo/gpu-next/libplacebo] [583]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [584]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [585]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [586]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [587]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [588] idx = _200d * rel.y + rel.x + _200d * 4 + 10; 
[   0.810][d][vo/gpu-next/libplacebo] [589] offset = ivec2(5, -1);
[   0.810][d][vo/gpu-next/libplacebo] [590] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [591]     if (d < /*radius*/_200b) {
[   0.810][d][vo/gpu-next/libplacebo] [592] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [593] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [594]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [595]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [596]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [597]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [598]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [599]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [600]     }
[   0.810][d][vo/gpu-next/libplacebo] [601] idx = _200d * rel.y + rel.x + _200d * 4 + 11; 
[   0.810][d][vo/gpu-next/libplacebo] [602] offset = ivec2(6, -1);
[   0.810][d][vo/gpu-next/libplacebo] [603] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [604]     if (d < /*radius*/_200b) {
[   0.810][d][vo/gpu-next/libplacebo] [605] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [606] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [607]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [608]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [609]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [610]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [611]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [612]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [613]     }
[   0.810][d][vo/gpu-next/libplacebo] [614] idx = _200d * rel.y + rel.x + _200d * 5 + 0; 
[   0.810][d][vo/gpu-next/libplacebo] [615] offset = ivec2(-5, 0);
[   0.810][d][vo/gpu-next/libplacebo] [616] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [617]     if (d < /*radius*/_200b) {
[   0.810][d][vo/gpu-next/libplacebo] [618] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [619] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [620]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [621]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [622]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [623]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [624]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [625]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [626]     }
[   0.810][d][vo/gpu-next/libplacebo] [627] idx = _200d * rel.y + rel.x + _200d * 5 + 1; 
[   0.810][d][vo/gpu-next/libplacebo] [628] offset = ivec2(-4, 0);
[   0.810][d][vo/gpu-next/libplacebo] [629] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [630]     if (d < /*radius*/_200b) {
[   0.810][d][vo/gpu-next/libplacebo] [631] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [632] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [633]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [634]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [635]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [636]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [637]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [638]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [639]     }
[   0.810][d][vo/gpu-next/libplacebo] [640] idx = _200d * rel.y + rel.x + _200d * 5 + 2; 
[   0.810][d][vo/gpu-next/libplacebo] [641] offset = ivec2(-3, 0);
[   0.810][d][vo/gpu-next/libplacebo] [642] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [643] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [644] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [645]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [646]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [647]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [648]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [649]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [650]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [651] idx = _200d * rel.y + rel.x + _200d * 5 + 3; 
[   0.810][d][vo/gpu-next/libplacebo] [652] offset = ivec2(-2, 0);
[   0.810][d][vo/gpu-next/libplacebo] [653] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [654] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [655] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [656]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [657]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [658]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [659]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [660]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [661]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [662] idx = _200d * rel.y + rel.x + _200d * 5 + 4; 
[   0.810][d][vo/gpu-next/libplacebo] [663] offset = ivec2(-1, 0);
[   0.810][d][vo/gpu-next/libplacebo] [664] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [665] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [666] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [667]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [668]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [669]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [670]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [671]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [672]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [673] idx = _200d * rel.y + rel.x + _200d * 5 + 5; 
[   0.810][d][vo/gpu-next/libplacebo] [674] offset = ivec2(0, 0);
[   0.810][d][vo/gpu-next/libplacebo] [675] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [676] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [677] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [678]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [679]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [680]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [681]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [682]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [683]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [684] idx = _200d * rel.y + rel.x + _200d * 5 + 6; 
[   0.810][d][vo/gpu-next/libplacebo] [685] offset = ivec2(1, 0);
[   0.810][d][vo/gpu-next/libplacebo] [686] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [687] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [688] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [689]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [690]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [691]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [692]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [693]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [694]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [695] idx = _200d * rel.y + rel.x + _200d * 5 + 7; 
[   0.810][d][vo/gpu-next/libplacebo] [696] offset = ivec2(2, 0);
[   0.810][d][vo/gpu-next/libplacebo] [697] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [698] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [699] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [700]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [701]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [702]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [703]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [704]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [705]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [706] idx = _200d * rel.y + rel.x + _200d * 5 + 8; 
[   0.810][d][vo/gpu-next/libplacebo] [707] offset = ivec2(3, 0);
[   0.810][d][vo/gpu-next/libplacebo] [708] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [709] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [710] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [711]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [712]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [713]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [714]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [715]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [716]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [717] idx = _200d * rel.y + rel.x + _200d * 5 + 9; 
[   0.810][d][vo/gpu-next/libplacebo] [718] offset = ivec2(4, 0);
[   0.810][d][vo/gpu-next/libplacebo] [719] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [720] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [721] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [722]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [723]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [724]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [725]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [726]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [727]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [728] idx = _200d * rel.y + rel.x + _200d * 5 + 10; 
[   0.810][d][vo/gpu-next/libplacebo] [729] offset = ivec2(5, 0);
[   0.810][d][vo/gpu-next/libplacebo] [730] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [731]     if (d < /*radius*/_200b) {
[   0.810][d][vo/gpu-next/libplacebo] [732] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [733] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [734]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [735]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [736]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [737]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [738]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [739]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [740]     }
[   0.810][d][vo/gpu-next/libplacebo] [741] idx = _200d * rel.y + rel.x + _200d * 5 + 11; 
[   0.810][d][vo/gpu-next/libplacebo] [742] offset = ivec2(6, 0);
[   0.810][d][vo/gpu-next/libplacebo] [743] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [744]     if (d < /*radius*/_200b) {
[   0.810][d][vo/gpu-next/libplacebo] [745] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [746] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [747]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [748]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [749]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [750]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [751]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [752]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [753]     }
[   0.810][d][vo/gpu-next/libplacebo] [754] idx = _200d * rel.y + rel.x + _200d * 6 + 0; 
[   0.810][d][vo/gpu-next/libplacebo] [755] offset = ivec2(-5, 1);
[   0.810][d][vo/gpu-next/libplacebo] [756] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [757]     if (d < /*radius*/_200b) {
[   0.810][d][vo/gpu-next/libplacebo] [758] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [759] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [760]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [761]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [762]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [763]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [764]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [765]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [766]     }
[   0.810][d][vo/gpu-next/libplacebo] [767] idx = _200d * rel.y + rel.x + _200d * 6 + 1; 
[   0.810][d][vo/gpu-next/libplacebo] [768] offset = ivec2(-4, 1);
[   0.810][d][vo/gpu-next/libplacebo] [769] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [770]     if (d < /*radius*/_200b) {
[   0.810][d][vo/gpu-next/libplacebo] [771] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [772] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [773]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [774]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [775]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [776]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [777]     color[1] += w * c[1];
[   0.810][d][vo/gpu-next/libplacebo] [778]     color[2] += w * c[2];
[   0.810][d][vo/gpu-next/libplacebo] [779]     }
[   0.810][d][vo/gpu-next/libplacebo] [780] idx = _200d * rel.y + rel.x + _200d * 6 + 2; 
[   0.810][d][vo/gpu-next/libplacebo] [781] offset = ivec2(-3, 1);
[   0.810][d][vo/gpu-next/libplacebo] [782] d = length(vec2(offset) - fcoord);
[   0.810][d][vo/gpu-next/libplacebo] [783] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.810][d][vo/gpu-next/libplacebo] [784] wsum += w;
[   0.810][d][vo/gpu-next/libplacebo] [785]         c[0] = /*in*/_200c_0[idx];
[   0.810][d][vo/gpu-next/libplacebo] [786]         c[1] = /*in*/_200c_1[idx];
[   0.810][d][vo/gpu-next/libplacebo] [787]         c[2] = /*in*/_200c_2[idx];
[   0.810][d][vo/gpu-next/libplacebo] [788]     color[0] += w * c[0];
[   0.810][d][vo/gpu-next/libplacebo] [789]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [790]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [791] idx = _200d * rel.y + rel.x + _200d * 6 + 3; 
[   0.811][d][vo/gpu-next/libplacebo] [792] offset = ivec2(-2, 1);
[   0.811][d][vo/gpu-next/libplacebo] [793] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [794] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [795] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [796]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [797]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [798]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [799]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [800]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [801]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [802] idx = _200d * rel.y + rel.x + _200d * 6 + 4; 
[   0.811][d][vo/gpu-next/libplacebo] [803] offset = ivec2(-1, 1);
[   0.811][d][vo/gpu-next/libplacebo] [804] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [805] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [806] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [807]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [808]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [809]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [810]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [811]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [812]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [813] idx = _200d * rel.y + rel.x + _200d * 6 + 5; 
[   0.811][d][vo/gpu-next/libplacebo] [814] offset = ivec2(0, 1);
[   0.811][d][vo/gpu-next/libplacebo] [815] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [816] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [817] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [818]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [819]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [820]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [821]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [822]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [823]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [824] idx = _200d * rel.y + rel.x + _200d * 6 + 6; 
[   0.811][d][vo/gpu-next/libplacebo] [825] offset = ivec2(1, 1);
[   0.811][d][vo/gpu-next/libplacebo] [826] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [827] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [828] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [829]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [830]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [831]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [832]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [833]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [834]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [835] idx = _200d * rel.y + rel.x + _200d * 6 + 7; 
[   0.811][d][vo/gpu-next/libplacebo] [836] offset = ivec2(2, 1);
[   0.811][d][vo/gpu-next/libplacebo] [837] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [838] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [839] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [840]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [841]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [842]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [843]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [844]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [845]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [846] idx = _200d * rel.y + rel.x + _200d * 6 + 8; 
[   0.811][d][vo/gpu-next/libplacebo] [847] offset = ivec2(3, 1);
[   0.811][d][vo/gpu-next/libplacebo] [848] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [849] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [850] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [851]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [852]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [853]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [854]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [855]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [856]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [857] idx = _200d * rel.y + rel.x + _200d * 6 + 9; 
[   0.811][d][vo/gpu-next/libplacebo] [858] offset = ivec2(4, 1);
[   0.811][d][vo/gpu-next/libplacebo] [859] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [860] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [861] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [862]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [863]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [864]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [865]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [866]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [867]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [868] idx = _200d * rel.y + rel.x + _200d * 6 + 10; 
[   0.811][d][vo/gpu-next/libplacebo] [869] offset = ivec2(5, 1);
[   0.811][d][vo/gpu-next/libplacebo] [870] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [871]     if (d < /*radius*/_200b) {
[   0.811][d][vo/gpu-next/libplacebo] [872] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [873] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [874]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [875]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [876]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [877]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [878]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [879]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [880]     }
[   0.811][d][vo/gpu-next/libplacebo] [881] idx = _200d * rel.y + rel.x + _200d * 6 + 11; 
[   0.811][d][vo/gpu-next/libplacebo] [882] offset = ivec2(6, 1);
[   0.811][d][vo/gpu-next/libplacebo] [883] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [884]     if (d < /*radius*/_200b) {
[   0.811][d][vo/gpu-next/libplacebo] [885] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [886] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [887]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [888]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [889]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [890]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [891]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [892]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [893]     }
[   0.811][d][vo/gpu-next/libplacebo] [894] idx = _200d * rel.y + rel.x + _200d * 7 + 0; 
[   0.811][d][vo/gpu-next/libplacebo] [895] offset = ivec2(-5, 2);
[   0.811][d][vo/gpu-next/libplacebo] [896] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [897]     if (d < /*radius*/_200b) {
[   0.811][d][vo/gpu-next/libplacebo] [898] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [899] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [900]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [901]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [902]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [903]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [904]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [905]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [906]     }
[   0.811][d][vo/gpu-next/libplacebo] [907] idx = _200d * rel.y + rel.x + _200d * 7 + 1; 
[   0.811][d][vo/gpu-next/libplacebo] [908] offset = ivec2(-4, 2);
[   0.811][d][vo/gpu-next/libplacebo] [909] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [910]     if (d < /*radius*/_200b) {
[   0.811][d][vo/gpu-next/libplacebo] [911] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [912] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [913]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [914]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [915]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [916]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [917]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [918]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [919]     }
[   0.811][d][vo/gpu-next/libplacebo] [920] idx = _200d * rel.y + rel.x + _200d * 7 + 2; 
[   0.811][d][vo/gpu-next/libplacebo] [921] offset = ivec2(-3, 2);
[   0.811][d][vo/gpu-next/libplacebo] [922] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [923] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [924] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [925]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [926]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [927]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [928]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [929]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [930]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [931] idx = _200d * rel.y + rel.x + _200d * 7 + 3; 
[   0.811][d][vo/gpu-next/libplacebo] [932] offset = ivec2(-2, 2);
[   0.811][d][vo/gpu-next/libplacebo] [933] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [934] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [935] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [936]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [937]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [938]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [939]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [940]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [941]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [942] idx = _200d * rel.y + rel.x + _200d * 7 + 4; 
[   0.811][d][vo/gpu-next/libplacebo] [943] offset = ivec2(-1, 2);
[   0.811][d][vo/gpu-next/libplacebo] [944] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [945] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [946] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [947]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [948]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [949]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [950]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [951]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [952]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [953] idx = _200d * rel.y + rel.x + _200d * 7 + 5; 
[   0.811][d][vo/gpu-next/libplacebo] [954] offset = ivec2(0, 2);
[   0.811][d][vo/gpu-next/libplacebo] [955] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [956] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [957] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [958]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [959]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [960]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [961]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [962]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [963]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [964] idx = _200d * rel.y + rel.x + _200d * 7 + 6; 
[   0.811][d][vo/gpu-next/libplacebo] [965] offset = ivec2(1, 2);
[   0.811][d][vo/gpu-next/libplacebo] [966] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [967] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [968] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [969]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [970]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [971]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [972]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [973]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [974]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [975] idx = _200d * rel.y + rel.x + _200d * 7 + 7; 
[   0.811][d][vo/gpu-next/libplacebo] [976] offset = ivec2(2, 2);
[   0.811][d][vo/gpu-next/libplacebo] [977] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [978] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [979] wsum += w;
[   0.811][d][vo/gpu-next/libplacebo] [980]         c[0] = /*in*/_200c_0[idx];
[   0.811][d][vo/gpu-next/libplacebo] [981]         c[1] = /*in*/_200c_1[idx];
[   0.811][d][vo/gpu-next/libplacebo] [982]         c[2] = /*in*/_200c_2[idx];
[   0.811][d][vo/gpu-next/libplacebo] [983]     color[0] += w * c[0];
[   0.811][d][vo/gpu-next/libplacebo] [984]     color[1] += w * c[1];
[   0.811][d][vo/gpu-next/libplacebo] [985]     color[2] += w * c[2];
[   0.811][d][vo/gpu-next/libplacebo] [986] idx = _200d * rel.y + rel.x + _200d * 7 + 8; 
[   0.811][d][vo/gpu-next/libplacebo] [987] offset = ivec2(3, 2);
[   0.811][d][vo/gpu-next/libplacebo] [988] d = length(vec2(offset) - fcoord);
[   0.811][d][vo/gpu-next/libplacebo] [989] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.811][d][vo/gpu-next/libplacebo] [990] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [991]         c[0] = /*in*/_200c_0[idx];
[   0.812][d][vo/gpu-next/libplacebo] [992]         c[1] = /*in*/_200c_1[idx];
[   0.812][d][vo/gpu-next/libplacebo] [993]         c[2] = /*in*/_200c_2[idx];
[   0.812][d][vo/gpu-next/libplacebo] [994]     color[0] += w * c[0];
[   0.812][d][vo/gpu-next/libplacebo] [995]     color[1] += w * c[1];
[   0.812][d][vo/gpu-next/libplacebo] [996]     color[2] += w * c[2];
[   0.812][d][vo/gpu-next/libplacebo] [997] idx = _200d * rel.y + rel.x + _200d * 7 + 9; 
[   0.812][d][vo/gpu-next/libplacebo] [998] offset = ivec2(4, 2);
[   0.812][d][vo/gpu-next/libplacebo] [999] d = length(vec2(offset) - fcoord);
[   0.812][d][vo/gpu-next/libplacebo] [1000] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.812][d][vo/gpu-next/libplacebo] [1001] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [1002]         c[0] = /*in*/_200c_0[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1003]         c[1] = /*in*/_200c_1[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1004]         c[2] = /*in*/_200c_2[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1005]     color[0] += w * c[0];
[   0.812][d][vo/gpu-next/libplacebo] [1006]     color[1] += w * c[1];
[   0.812][d][vo/gpu-next/libplacebo] [1007]     color[2] += w * c[2];
[   0.812][d][vo/gpu-next/libplacebo] [1008] idx = _200d * rel.y + rel.x + _200d * 7 + 10; 
[   0.812][d][vo/gpu-next/libplacebo] [1009] offset = ivec2(5, 2);
[   0.812][d][vo/gpu-next/libplacebo] [1010] d = length(vec2(offset) - fcoord);
[   0.812][d][vo/gpu-next/libplacebo] [1011]     if (d < /*radius*/_200b) {
[   0.812][d][vo/gpu-next/libplacebo] [1012] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.812][d][vo/gpu-next/libplacebo] [1013] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [1014]         c[0] = /*in*/_200c_0[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1015]         c[1] = /*in*/_200c_1[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1016]         c[2] = /*in*/_200c_2[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1017]     color[0] += w * c[0];
[   0.812][d][vo/gpu-next/libplacebo] [1018]     color[1] += w * c[1];
[   0.812][d][vo/gpu-next/libplacebo] [1019]     color[2] += w * c[2];
[   0.812][d][vo/gpu-next/libplacebo] [1020]     }
[   0.812][d][vo/gpu-next/libplacebo] [1021] idx = _200d * rel.y + rel.x + _200d * 7 + 11; 
[   0.812][d][vo/gpu-next/libplacebo] [1022] offset = ivec2(6, 2);
[   0.812][d][vo/gpu-next/libplacebo] [1023] d = length(vec2(offset) - fcoord);
[   0.812][d][vo/gpu-next/libplacebo] [1024]     if (d < /*radius*/_200b) {
[   0.812][d][vo/gpu-next/libplacebo] [1025] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.812][d][vo/gpu-next/libplacebo] [1026] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [1027]         c[0] = /*in*/_200c_0[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1028]         c[1] = /*in*/_200c_1[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1029]         c[2] = /*in*/_200c_2[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1030]     color[0] += w * c[0];
[   0.812][d][vo/gpu-next/libplacebo] [1031]     color[1] += w * c[1];
[   0.812][d][vo/gpu-next/libplacebo] [1032]     color[2] += w * c[2];
[   0.812][d][vo/gpu-next/libplacebo] [1033]     }
[   0.812][d][vo/gpu-next/libplacebo] [1034] idx = _200d * rel.y + rel.x + _200d * 8 + 0; 
[   0.812][d][vo/gpu-next/libplacebo] [1035] idx = _200d * rel.y + rel.x + _200d * 8 + 1; 
[   0.812][d][vo/gpu-next/libplacebo] [1036] offset = ivec2(-4, 3);
[   0.812][d][vo/gpu-next/libplacebo] [1037] d = length(vec2(offset) - fcoord);
[   0.812][d][vo/gpu-next/libplacebo] [1038]     if (d < /*radius*/_200b) {
[   0.812][d][vo/gpu-next/libplacebo] [1039] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.812][d][vo/gpu-next/libplacebo] [1040] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [1041]         c[0] = /*in*/_200c_0[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1042]         c[1] = /*in*/_200c_1[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1043]         c[2] = /*in*/_200c_2[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1044]     color[0] += w * c[0];
[   0.812][d][vo/gpu-next/libplacebo] [1045]     color[1] += w * c[1];
[   0.812][d][vo/gpu-next/libplacebo] [1046]     color[2] += w * c[2];
[   0.812][d][vo/gpu-next/libplacebo] [1047]     }
[   0.812][d][vo/gpu-next/libplacebo] [1048] idx = _200d * rel.y + rel.x + _200d * 8 + 2; 
[   0.812][d][vo/gpu-next/libplacebo] [1049] offset = ivec2(-3, 3);
[   0.812][d][vo/gpu-next/libplacebo] [1050] d = length(vec2(offset) - fcoord);
[   0.812][d][vo/gpu-next/libplacebo] [1051] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.812][d][vo/gpu-next/libplacebo] [1052] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [1053]         c[0] = /*in*/_200c_0[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1054]         c[1] = /*in*/_200c_1[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1055]         c[2] = /*in*/_200c_2[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1056]     color[0] += w * c[0];
[   0.812][d][vo/gpu-next/libplacebo] [1057]     color[1] += w * c[1];
[   0.812][d][vo/gpu-next/libplacebo] [1058]     color[2] += w * c[2];
[   0.812][d][vo/gpu-next/libplacebo] [1059] idx = _200d * rel.y + rel.x + _200d * 8 + 3; 
[   0.812][d][vo/gpu-next/libplacebo] [1060] offset = ivec2(-2, 3);
[   0.812][d][vo/gpu-next/libplacebo] [1061] d = length(vec2(offset) - fcoord);
[   0.812][d][vo/gpu-next/libplacebo] [1062] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.812][d][vo/gpu-next/libplacebo] [1063] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [1064]         c[0] = /*in*/_200c_0[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1065]         c[1] = /*in*/_200c_1[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1066]         c[2] = /*in*/_200c_2[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1067]     color[0] += w * c[0];
[   0.812][d][vo/gpu-next/libplacebo] [1068]     color[1] += w * c[1];
[   0.812][d][vo/gpu-next/libplacebo] [1069]     color[2] += w * c[2];
[   0.812][d][vo/gpu-next/libplacebo] [1070] idx = _200d * rel.y + rel.x + _200d * 8 + 4; 
[   0.812][d][vo/gpu-next/libplacebo] [1071] offset = ivec2(-1, 3);
[   0.812][d][vo/gpu-next/libplacebo] [1072] d = length(vec2(offset) - fcoord);
[   0.812][d][vo/gpu-next/libplacebo] [1073] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.812][d][vo/gpu-next/libplacebo] [1074] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [1075]         c[0] = /*in*/_200c_0[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1076]         c[1] = /*in*/_200c_1[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1077]         c[2] = /*in*/_200c_2[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1078]     color[0] += w * c[0];
[   0.812][d][vo/gpu-next/libplacebo] [1079]     color[1] += w * c[1];
[   0.812][d][vo/gpu-next/libplacebo] [1080]     color[2] += w * c[2];
[   0.812][d][vo/gpu-next/libplacebo] [1081] idx = _200d * rel.y + rel.x + _200d * 8 + 5; 
[   0.812][d][vo/gpu-next/libplacebo] [1082] offset = ivec2(0, 3);
[   0.812][d][vo/gpu-next/libplacebo] [1083] d = length(vec2(offset) - fcoord);
[   0.812][d][vo/gpu-next/libplacebo] [1084] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.812][d][vo/gpu-next/libplacebo] [1085] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [1086]         c[0] = /*in*/_200c_0[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1087]         c[1] = /*in*/_200c_1[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1088]         c[2] = /*in*/_200c_2[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1089]     color[0] += w * c[0];
[   0.812][d][vo/gpu-next/libplacebo] [1090]     color[1] += w * c[1];
[   0.812][d][vo/gpu-next/libplacebo] [1091]     color[2] += w * c[2];
[   0.812][d][vo/gpu-next/libplacebo] [1092] idx = _200d * rel.y + rel.x + _200d * 8 + 6; 
[   0.812][d][vo/gpu-next/libplacebo] [1093] offset = ivec2(1, 3);
[   0.812][d][vo/gpu-next/libplacebo] [1094] d = length(vec2(offset) - fcoord);
[   0.812][d][vo/gpu-next/libplacebo] [1095] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.812][d][vo/gpu-next/libplacebo] [1096] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [1097]         c[0] = /*in*/_200c_0[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1098]         c[1] = /*in*/_200c_1[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1099]         c[2] = /*in*/_200c_2[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1100]     color[0] += w * c[0];
[   0.812][d][vo/gpu-next/libplacebo] [1101]     color[1] += w * c[1];
[   0.812][d][vo/gpu-next/libplacebo] [1102]     color[2] += w * c[2];
[   0.812][d][vo/gpu-next/libplacebo] [1103] idx = _200d * rel.y + rel.x + _200d * 8 + 7; 
[   0.812][d][vo/gpu-next/libplacebo] [1104] offset = ivec2(2, 3);
[   0.812][d][vo/gpu-next/libplacebo] [1105] d = length(vec2(offset) - fcoord);
[   0.812][d][vo/gpu-next/libplacebo] [1106] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.812][d][vo/gpu-next/libplacebo] [1107] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [1108]         c[0] = /*in*/_200c_0[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1109]         c[1] = /*in*/_200c_1[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1110]         c[2] = /*in*/_200c_2[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1111]     color[0] += w * c[0];
[   0.812][d][vo/gpu-next/libplacebo] [1112]     color[1] += w * c[1];
[   0.812][d][vo/gpu-next/libplacebo] [1113]     color[2] += w * c[2];
[   0.812][d][vo/gpu-next/libplacebo] [1114] idx = _200d * rel.y + rel.x + _200d * 8 + 8; 
[   0.812][d][vo/gpu-next/libplacebo] [1115] offset = ivec2(3, 3);
[   0.812][d][vo/gpu-next/libplacebo] [1116] d = length(vec2(offset) - fcoord);
[   0.812][d][vo/gpu-next/libplacebo] [1117] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.812][d][vo/gpu-next/libplacebo] [1118] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [1119]         c[0] = /*in*/_200c_0[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1120]         c[1] = /*in*/_200c_1[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1121]         c[2] = /*in*/_200c_2[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1122]     color[0] += w * c[0];
[   0.812][d][vo/gpu-next/libplacebo] [1123]     color[1] += w * c[1];
[   0.812][d][vo/gpu-next/libplacebo] [1124]     color[2] += w * c[2];
[   0.812][d][vo/gpu-next/libplacebo] [1125] idx = _200d * rel.y + rel.x + _200d * 8 + 9; 
[   0.812][d][vo/gpu-next/libplacebo] [1126] offset = ivec2(4, 3);
[   0.812][d][vo/gpu-next/libplacebo] [1127] d = length(vec2(offset) - fcoord);
[   0.812][d][vo/gpu-next/libplacebo] [1128] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.812][d][vo/gpu-next/libplacebo] [1129] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [1130]         c[0] = /*in*/_200c_0[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1131]         c[1] = /*in*/_200c_1[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1132]         c[2] = /*in*/_200c_2[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1133]     color[0] += w * c[0];
[   0.812][d][vo/gpu-next/libplacebo] [1134]     color[1] += w * c[1];
[   0.812][d][vo/gpu-next/libplacebo] [1135]     color[2] += w * c[2];
[   0.812][d][vo/gpu-next/libplacebo] [1136] idx = _200d * rel.y + rel.x + _200d * 8 + 10; 
[   0.812][d][vo/gpu-next/libplacebo] [1137] offset = ivec2(5, 3);
[   0.812][d][vo/gpu-next/libplacebo] [1138] d = length(vec2(offset) - fcoord);
[   0.812][d][vo/gpu-next/libplacebo] [1139]     if (d < /*radius*/_200b) {
[   0.812][d][vo/gpu-next/libplacebo] [1140] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.812][d][vo/gpu-next/libplacebo] [1141] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [1142]         c[0] = /*in*/_200c_0[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1143]         c[1] = /*in*/_200c_1[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1144]         c[2] = /*in*/_200c_2[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1145]     color[0] += w * c[0];
[   0.812][d][vo/gpu-next/libplacebo] [1146]     color[1] += w * c[1];
[   0.812][d][vo/gpu-next/libplacebo] [1147]     color[2] += w * c[2];
[   0.812][d][vo/gpu-next/libplacebo] [1148]     }
[   0.812][d][vo/gpu-next/libplacebo] [1149] idx = _200d * rel.y + rel.x + _200d * 8 + 11; 
[   0.812][d][vo/gpu-next/libplacebo] [1150] idx = _200d * rel.y + rel.x + _200d * 9 + 0; 
[   0.812][d][vo/gpu-next/libplacebo] [1151] idx = _200d * rel.y + rel.x + _200d * 9 + 1; 
[   0.812][d][vo/gpu-next/libplacebo] [1152] offset = ivec2(-4, 4);
[   0.812][d][vo/gpu-next/libplacebo] [1153] d = length(vec2(offset) - fcoord);
[   0.812][d][vo/gpu-next/libplacebo] [1154]     if (d < /*radius*/_200b) {
[   0.812][d][vo/gpu-next/libplacebo] [1155] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.812][d][vo/gpu-next/libplacebo] [1156] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [1157]         c[0] = /*in*/_200c_0[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1158]         c[1] = /*in*/_200c_1[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1159]         c[2] = /*in*/_200c_2[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1160]     color[0] += w * c[0];
[   0.812][d][vo/gpu-next/libplacebo] [1161]     color[1] += w * c[1];
[   0.812][d][vo/gpu-next/libplacebo] [1162]     color[2] += w * c[2];
[   0.812][d][vo/gpu-next/libplacebo] [1163]     }
[   0.812][d][vo/gpu-next/libplacebo] [1164] idx = _200d * rel.y + rel.x + _200d * 9 + 2; 
[   0.812][d][vo/gpu-next/libplacebo] [1165] offset = ivec2(-3, 4);
[   0.812][d][vo/gpu-next/libplacebo] [1166] d = length(vec2(offset) - fcoord);
[   0.812][d][vo/gpu-next/libplacebo] [1167]     if (d < /*radius*/_200b) {
[   0.812][d][vo/gpu-next/libplacebo] [1168] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.812][d][vo/gpu-next/libplacebo] [1169] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [1170]         c[0] = /*in*/_200c_0[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1171]         c[1] = /*in*/_200c_1[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1172]         c[2] = /*in*/_200c_2[idx];
[   0.812][d][vo/gpu-next/libplacebo] [1173]     color[0] += w * c[0];
[   0.812][d][vo/gpu-next/libplacebo] [1174]     color[1] += w * c[1];
[   0.812][d][vo/gpu-next/libplacebo] [1175]     color[2] += w * c[2];
[   0.812][d][vo/gpu-next/libplacebo] [1176]     }
[   0.812][d][vo/gpu-next/libplacebo] [1177] idx = _200d * rel.y + rel.x + _200d * 9 + 3; 
[   0.812][d][vo/gpu-next/libplacebo] [1178] offset = ivec2(-2, 4);
[   0.812][d][vo/gpu-next/libplacebo] [1179] d = length(vec2(offset) - fcoord);
[   0.812][d][vo/gpu-next/libplacebo] [1180] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.812][d][vo/gpu-next/libplacebo] [1181] wsum += w;
[   0.812][d][vo/gpu-next/libplacebo] [1182]         c[0] = /*in*/_200c_0[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1183]         c[1] = /*in*/_200c_1[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1184]         c[2] = /*in*/_200c_2[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1185]     color[0] += w * c[0];
[   0.813][d][vo/gpu-next/libplacebo] [1186]     color[1] += w * c[1];
[   0.813][d][vo/gpu-next/libplacebo] [1187]     color[2] += w * c[2];
[   0.813][d][vo/gpu-next/libplacebo] [1188] idx = _200d * rel.y + rel.x + _200d * 9 + 4; 
[   0.813][d][vo/gpu-next/libplacebo] [1189] offset = ivec2(-1, 4);
[   0.813][d][vo/gpu-next/libplacebo] [1190] d = length(vec2(offset) - fcoord);
[   0.813][d][vo/gpu-next/libplacebo] [1191] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.813][d][vo/gpu-next/libplacebo] [1192] wsum += w;
[   0.813][d][vo/gpu-next/libplacebo] [1193]         c[0] = /*in*/_200c_0[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1194]         c[1] = /*in*/_200c_1[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1195]         c[2] = /*in*/_200c_2[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1196]     color[0] += w * c[0];
[   0.813][d][vo/gpu-next/libplacebo] [1197]     color[1] += w * c[1];
[   0.813][d][vo/gpu-next/libplacebo] [1198]     color[2] += w * c[2];
[   0.813][d][vo/gpu-next/libplacebo] [1199] idx = _200d * rel.y + rel.x + _200d * 9 + 5; 
[   0.813][d][vo/gpu-next/libplacebo] [1200] offset = ivec2(0, 4);
[   0.813][d][vo/gpu-next/libplacebo] [1201] d = length(vec2(offset) - fcoord);
[   0.813][d][vo/gpu-next/libplacebo] [1202] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.813][d][vo/gpu-next/libplacebo] [1203] wsum += w;
[   0.813][d][vo/gpu-next/libplacebo] [1204]         c[0] = /*in*/_200c_0[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1205]         c[1] = /*in*/_200c_1[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1206]         c[2] = /*in*/_200c_2[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1207]     color[0] += w * c[0];
[   0.813][d][vo/gpu-next/libplacebo] [1208]     color[1] += w * c[1];
[   0.813][d][vo/gpu-next/libplacebo] [1209]     color[2] += w * c[2];
[   0.813][d][vo/gpu-next/libplacebo] [1210] idx = _200d * rel.y + rel.x + _200d * 9 + 6; 
[   0.813][d][vo/gpu-next/libplacebo] [1211] offset = ivec2(1, 4);
[   0.813][d][vo/gpu-next/libplacebo] [1212] d = length(vec2(offset) - fcoord);
[   0.813][d][vo/gpu-next/libplacebo] [1213] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.813][d][vo/gpu-next/libplacebo] [1214] wsum += w;
[   0.813][d][vo/gpu-next/libplacebo] [1215]         c[0] = /*in*/_200c_0[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1216]         c[1] = /*in*/_200c_1[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1217]         c[2] = /*in*/_200c_2[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1218]     color[0] += w * c[0];
[   0.813][d][vo/gpu-next/libplacebo] [1219]     color[1] += w * c[1];
[   0.813][d][vo/gpu-next/libplacebo] [1220]     color[2] += w * c[2];
[   0.813][d][vo/gpu-next/libplacebo] [1221] idx = _200d * rel.y + rel.x + _200d * 9 + 7; 
[   0.813][d][vo/gpu-next/libplacebo] [1222] offset = ivec2(2, 4);
[   0.813][d][vo/gpu-next/libplacebo] [1223] d = length(vec2(offset) - fcoord);
[   0.813][d][vo/gpu-next/libplacebo] [1224] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.813][d][vo/gpu-next/libplacebo] [1225] wsum += w;
[   0.813][d][vo/gpu-next/libplacebo] [1226]         c[0] = /*in*/_200c_0[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1227]         c[1] = /*in*/_200c_1[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1228]         c[2] = /*in*/_200c_2[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1229]     color[0] += w * c[0];
[   0.813][d][vo/gpu-next/libplacebo] [1230]     color[1] += w * c[1];
[   0.813][d][vo/gpu-next/libplacebo] [1231]     color[2] += w * c[2];
[   0.813][d][vo/gpu-next/libplacebo] [1232] idx = _200d * rel.y + rel.x + _200d * 9 + 8; 
[   0.813][d][vo/gpu-next/libplacebo] [1233] offset = ivec2(3, 4);
[   0.813][d][vo/gpu-next/libplacebo] [1234] d = length(vec2(offset) - fcoord);
[   0.813][d][vo/gpu-next/libplacebo] [1235] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.813][d][vo/gpu-next/libplacebo] [1236] wsum += w;
[   0.813][d][vo/gpu-next/libplacebo] [1237]         c[0] = /*in*/_200c_0[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1238]         c[1] = /*in*/_200c_1[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1239]         c[2] = /*in*/_200c_2[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1240]     color[0] += w * c[0];
[   0.813][d][vo/gpu-next/libplacebo] [1241]     color[1] += w * c[1];
[   0.813][d][vo/gpu-next/libplacebo] [1242]     color[2] += w * c[2];
[   0.813][d][vo/gpu-next/libplacebo] [1243] idx = _200d * rel.y + rel.x + _200d * 9 + 9; 
[   0.813][d][vo/gpu-next/libplacebo] [1244] offset = ivec2(4, 4);
[   0.813][d][vo/gpu-next/libplacebo] [1245] d = length(vec2(offset) - fcoord);
[   0.813][d][vo/gpu-next/libplacebo] [1246]     if (d < /*radius*/_200b) {
[   0.813][d][vo/gpu-next/libplacebo] [1247] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.813][d][vo/gpu-next/libplacebo] [1248] wsum += w;
[   0.813][d][vo/gpu-next/libplacebo] [1249]         c[0] = /*in*/_200c_0[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1250]         c[1] = /*in*/_200c_1[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1251]         c[2] = /*in*/_200c_2[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1252]     color[0] += w * c[0];
[   0.813][d][vo/gpu-next/libplacebo] [1253]     color[1] += w * c[1];
[   0.813][d][vo/gpu-next/libplacebo] [1254]     color[2] += w * c[2];
[   0.813][d][vo/gpu-next/libplacebo] [1255]     }
[   0.813][d][vo/gpu-next/libplacebo] [1256] idx = _200d * rel.y + rel.x + _200d * 9 + 10; 
[   0.813][d][vo/gpu-next/libplacebo] [1257] offset = ivec2(5, 4);
[   0.813][d][vo/gpu-next/libplacebo] [1258] d = length(vec2(offset) - fcoord);
[   0.813][d][vo/gpu-next/libplacebo] [1259]     if (d < /*radius*/_200b) {
[   0.813][d][vo/gpu-next/libplacebo] [1260] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.813][d][vo/gpu-next/libplacebo] [1261] wsum += w;
[   0.813][d][vo/gpu-next/libplacebo] [1262]         c[0] = /*in*/_200c_0[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1263]         c[1] = /*in*/_200c_1[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1264]         c[2] = /*in*/_200c_2[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1265]     color[0] += w * c[0];
[   0.813][d][vo/gpu-next/libplacebo] [1266]     color[1] += w * c[1];
[   0.813][d][vo/gpu-next/libplacebo] [1267]     color[2] += w * c[2];
[   0.813][d][vo/gpu-next/libplacebo] [1268]     }
[   0.813][d][vo/gpu-next/libplacebo] [1269] idx = _200d * rel.y + rel.x + _200d * 9 + 11; 
[   0.813][d][vo/gpu-next/libplacebo] [1270] idx = _200d * rel.y + rel.x + _200d * 10 + 0; 
[   0.813][d][vo/gpu-next/libplacebo] [1271] idx = _200d * rel.y + rel.x + _200d * 10 + 1; 
[   0.813][d][vo/gpu-next/libplacebo] [1272] idx = _200d * rel.y + rel.x + _200d * 10 + 2; 
[   0.813][d][vo/gpu-next/libplacebo] [1273] offset = ivec2(-3, 5);
[   0.813][d][vo/gpu-next/libplacebo] [1274] d = length(vec2(offset) - fcoord);
[   0.813][d][vo/gpu-next/libplacebo] [1275]     if (d < /*radius*/_200b) {
[   0.813][d][vo/gpu-next/libplacebo] [1276] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.813][d][vo/gpu-next/libplacebo] [1277] wsum += w;
[   0.813][d][vo/gpu-next/libplacebo] [1278]         c[0] = /*in*/_200c_0[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1279]         c[1] = /*in*/_200c_1[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1280]         c[2] = /*in*/_200c_2[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1281]     color[0] += w * c[0];
[   0.813][d][vo/gpu-next/libplacebo] [1282]     color[1] += w * c[1];
[   0.813][d][vo/gpu-next/libplacebo] [1283]     color[2] += w * c[2];
[   0.813][d][vo/gpu-next/libplacebo] [1284]     }
[   0.813][d][vo/gpu-next/libplacebo] [1285] idx = _200d * rel.y + rel.x + _200d * 10 + 3; 
[   0.813][d][vo/gpu-next/libplacebo] [1286] offset = ivec2(-2, 5);
[   0.813][d][vo/gpu-next/libplacebo] [1287] d = length(vec2(offset) - fcoord);
[   0.813][d][vo/gpu-next/libplacebo] [1288]     if (d < /*radius*/_200b) {
[   0.813][d][vo/gpu-next/libplacebo] [1289] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.813][d][vo/gpu-next/libplacebo] [1290] wsum += w;
[   0.813][d][vo/gpu-next/libplacebo] [1291]         c[0] = /*in*/_200c_0[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1292]         c[1] = /*in*/_200c_1[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1293]         c[2] = /*in*/_200c_2[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1294]     color[0] += w * c[0];
[   0.813][d][vo/gpu-next/libplacebo] [1295]     color[1] += w * c[1];
[   0.813][d][vo/gpu-next/libplacebo] [1296]     color[2] += w * c[2];
[   0.813][d][vo/gpu-next/libplacebo] [1297]     }
[   0.813][d][vo/gpu-next/libplacebo] [1298] idx = _200d * rel.y + rel.x + _200d * 10 + 4; 
[   0.813][d][vo/gpu-next/libplacebo] [1299] offset = ivec2(-1, 5);
[   0.813][d][vo/gpu-next/libplacebo] [1300] d = length(vec2(offset) - fcoord);
[   0.813][d][vo/gpu-next/libplacebo] [1301]     if (d < /*radius*/_200b) {
[   0.813][d][vo/gpu-next/libplacebo] [1302] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.813][d][vo/gpu-next/libplacebo] [1303] wsum += w;
[   0.813][d][vo/gpu-next/libplacebo] [1304]         c[0] = /*in*/_200c_0[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1305]         c[1] = /*in*/_200c_1[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1306]         c[2] = /*in*/_200c_2[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1307]     color[0] += w * c[0];
[   0.813][d][vo/gpu-next/libplacebo] [1308]     color[1] += w * c[1];
[   0.813][d][vo/gpu-next/libplacebo] [1309]     color[2] += w * c[2];
[   0.813][d][vo/gpu-next/libplacebo] [1310]     }
[   0.813][d][vo/gpu-next/libplacebo] [1311] idx = _200d * rel.y + rel.x + _200d * 10 + 5; 
[   0.813][d][vo/gpu-next/libplacebo] [1312] offset = ivec2(0, 5);
[   0.813][d][vo/gpu-next/libplacebo] [1313] d = length(vec2(offset) - fcoord);
[   0.813][d][vo/gpu-next/libplacebo] [1314]     if (d < /*radius*/_200b) {
[   0.813][d][vo/gpu-next/libplacebo] [1315] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.813][d][vo/gpu-next/libplacebo] [1316] wsum += w;
[   0.813][d][vo/gpu-next/libplacebo] [1317]         c[0] = /*in*/_200c_0[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1318]         c[1] = /*in*/_200c_1[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1319]         c[2] = /*in*/_200c_2[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1320]     color[0] += w * c[0];
[   0.813][d][vo/gpu-next/libplacebo] [1321]     color[1] += w * c[1];
[   0.813][d][vo/gpu-next/libplacebo] [1322]     color[2] += w * c[2];
[   0.813][d][vo/gpu-next/libplacebo] [1323]     }
[   0.813][d][vo/gpu-next/libplacebo] [1324] idx = _200d * rel.y + rel.x + _200d * 10 + 6; 
[   0.813][d][vo/gpu-next/libplacebo] [1325] offset = ivec2(1, 5);
[   0.813][d][vo/gpu-next/libplacebo] [1326] d = length(vec2(offset) - fcoord);
[   0.813][d][vo/gpu-next/libplacebo] [1327]     if (d < /*radius*/_200b) {
[   0.813][d][vo/gpu-next/libplacebo] [1328] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.813][d][vo/gpu-next/libplacebo] [1329] wsum += w;
[   0.813][d][vo/gpu-next/libplacebo] [1330]         c[0] = /*in*/_200c_0[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1331]         c[1] = /*in*/_200c_1[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1332]         c[2] = /*in*/_200c_2[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1333]     color[0] += w * c[0];
[   0.813][d][vo/gpu-next/libplacebo] [1334]     color[1] += w * c[1];
[   0.813][d][vo/gpu-next/libplacebo] [1335]     color[2] += w * c[2];
[   0.813][d][vo/gpu-next/libplacebo] [1336]     }
[   0.813][d][vo/gpu-next/libplacebo] [1337] idx = _200d * rel.y + rel.x + _200d * 10 + 7; 
[   0.813][d][vo/gpu-next/libplacebo] [1338] offset = ivec2(2, 5);
[   0.813][d][vo/gpu-next/libplacebo] [1339] d = length(vec2(offset) - fcoord);
[   0.813][d][vo/gpu-next/libplacebo] [1340]     if (d < /*radius*/_200b) {
[   0.813][d][vo/gpu-next/libplacebo] [1341] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.813][d][vo/gpu-next/libplacebo] [1342] wsum += w;
[   0.813][d][vo/gpu-next/libplacebo] [1343]         c[0] = /*in*/_200c_0[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1344]         c[1] = /*in*/_200c_1[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1345]         c[2] = /*in*/_200c_2[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1346]     color[0] += w * c[0];
[   0.813][d][vo/gpu-next/libplacebo] [1347]     color[1] += w * c[1];
[   0.813][d][vo/gpu-next/libplacebo] [1348]     color[2] += w * c[2];
[   0.813][d][vo/gpu-next/libplacebo] [1349]     }
[   0.813][d][vo/gpu-next/libplacebo] [1350] idx = _200d * rel.y + rel.x + _200d * 10 + 8; 
[   0.813][d][vo/gpu-next/libplacebo] [1351] offset = ivec2(3, 5);
[   0.813][d][vo/gpu-next/libplacebo] [1352] d = length(vec2(offset) - fcoord);
[   0.813][d][vo/gpu-next/libplacebo] [1353]     if (d < /*radius*/_200b) {
[   0.813][d][vo/gpu-next/libplacebo] [1354] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.813][d][vo/gpu-next/libplacebo] [1355] wsum += w;
[   0.813][d][vo/gpu-next/libplacebo] [1356]         c[0] = /*in*/_200c_0[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1357]         c[1] = /*in*/_200c_1[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1358]         c[2] = /*in*/_200c_2[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1359]     color[0] += w * c[0];
[   0.813][d][vo/gpu-next/libplacebo] [1360]     color[1] += w * c[1];
[   0.813][d][vo/gpu-next/libplacebo] [1361]     color[2] += w * c[2];
[   0.813][d][vo/gpu-next/libplacebo] [1362]     }
[   0.813][d][vo/gpu-next/libplacebo] [1363] idx = _200d * rel.y + rel.x + _200d * 10 + 9; 
[   0.813][d][vo/gpu-next/libplacebo] [1364] offset = ivec2(4, 5);
[   0.813][d][vo/gpu-next/libplacebo] [1365] d = length(vec2(offset) - fcoord);
[   0.813][d][vo/gpu-next/libplacebo] [1366]     if (d < /*radius*/_200b) {
[   0.813][d][vo/gpu-next/libplacebo] [1367] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.813][d][vo/gpu-next/libplacebo] [1368] wsum += w;
[   0.813][d][vo/gpu-next/libplacebo] [1369]         c[0] = /*in*/_200c_0[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1370]         c[1] = /*in*/_200c_1[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1371]         c[2] = /*in*/_200c_2[idx];
[   0.813][d][vo/gpu-next/libplacebo] [1372]     color[0] += w * c[0];
[   0.814][d][vo/gpu-next/libplacebo] [1373]     color[1] += w * c[1];
[   0.814][d][vo/gpu-next/libplacebo] [1374]     color[2] += w * c[2];
[   0.814][d][vo/gpu-next/libplacebo] [1375]     }
[   0.814][d][vo/gpu-next/libplacebo] [1376] idx = _200d * rel.y + rel.x + _200d * 10 + 10; 
[   0.814][d][vo/gpu-next/libplacebo] [1377] idx = _200d * rel.y + rel.x + _200d * 10 + 11; 
[   0.814][d][vo/gpu-next/libplacebo] [1378] idx = _200d * rel.y + rel.x + _200d * 11 + 0; 
[   0.814][d][vo/gpu-next/libplacebo] [1379] idx = _200d * rel.y + rel.x + _200d * 11 + 1; 
[   0.814][d][vo/gpu-next/libplacebo] [1380] idx = _200d * rel.y + rel.x + _200d * 11 + 2; 
[   0.814][d][vo/gpu-next/libplacebo] [1381] idx = _200d * rel.y + rel.x + _200d * 11 + 3; 
[   0.814][d][vo/gpu-next/libplacebo] [1382] idx = _200d * rel.y + rel.x + _200d * 11 + 4; 
[   0.814][d][vo/gpu-next/libplacebo] [1383] offset = ivec2(-1, 6);
[   0.814][d][vo/gpu-next/libplacebo] [1384] d = length(vec2(offset) - fcoord);
[   0.814][d][vo/gpu-next/libplacebo] [1385]     if (d < /*radius*/_200b) {
[   0.814][d][vo/gpu-next/libplacebo] [1386] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.814][d][vo/gpu-next/libplacebo] [1387] wsum += w;
[   0.814][d][vo/gpu-next/libplacebo] [1388]         c[0] = /*in*/_200c_0[idx];
[   0.814][d][vo/gpu-next/libplacebo] [1389]         c[1] = /*in*/_200c_1[idx];
[   0.814][d][vo/gpu-next/libplacebo] [1390]         c[2] = /*in*/_200c_2[idx];
[   0.814][d][vo/gpu-next/libplacebo] [1391]     color[0] += w * c[0];
[   0.814][d][vo/gpu-next/libplacebo] [1392]     color[1] += w * c[1];
[   0.814][d][vo/gpu-next/libplacebo] [1393]     color[2] += w * c[2];
[   0.814][d][vo/gpu-next/libplacebo] [1394]     }
[   0.814][d][vo/gpu-next/libplacebo] [1395] idx = _200d * rel.y + rel.x + _200d * 11 + 5; 
[   0.814][d][vo/gpu-next/libplacebo] [1396] offset = ivec2(0, 6);
[   0.814][d][vo/gpu-next/libplacebo] [1397] d = length(vec2(offset) - fcoord);
[   0.814][d][vo/gpu-next/libplacebo] [1398]     if (d < /*radius*/_200b) {
[   0.814][d][vo/gpu-next/libplacebo] [1399] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.814][d][vo/gpu-next/libplacebo] [1400] wsum += w;
[   0.814][d][vo/gpu-next/libplacebo] [1401]         c[0] = /*in*/_200c_0[idx];
[   0.814][d][vo/gpu-next/libplacebo] [1402]         c[1] = /*in*/_200c_1[idx];
[   0.814][d][vo/gpu-next/libplacebo] [1403]         c[2] = /*in*/_200c_2[idx];
[   0.814][d][vo/gpu-next/libplacebo] [1404]     color[0] += w * c[0];
[   0.814][d][vo/gpu-next/libplacebo] [1405]     color[1] += w * c[1];
[   0.814][d][vo/gpu-next/libplacebo] [1406]     color[2] += w * c[2];
[   0.814][d][vo/gpu-next/libplacebo] [1407]     }
[   0.814][d][vo/gpu-next/libplacebo] [1408] idx = _200d * rel.y + rel.x + _200d * 11 + 6; 
[   0.814][d][vo/gpu-next/libplacebo] [1409] offset = ivec2(1, 6);
[   0.814][d][vo/gpu-next/libplacebo] [1410] d = length(vec2(offset) - fcoord);
[   0.814][d][vo/gpu-next/libplacebo] [1411]     if (d < /*radius*/_200b) {
[   0.814][d][vo/gpu-next/libplacebo] [1412] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.814][d][vo/gpu-next/libplacebo] [1413] wsum += w;
[   0.814][d][vo/gpu-next/libplacebo] [1414]         c[0] = /*in*/_200c_0[idx];
[   0.814][d][vo/gpu-next/libplacebo] [1415]         c[1] = /*in*/_200c_1[idx];
[   0.814][d][vo/gpu-next/libplacebo] [1416]         c[2] = /*in*/_200c_2[idx];
[   0.814][d][vo/gpu-next/libplacebo] [1417]     color[0] += w * c[0];
[   0.814][d][vo/gpu-next/libplacebo] [1418]     color[1] += w * c[1];
[   0.814][d][vo/gpu-next/libplacebo] [1419]     color[2] += w * c[2];
[   0.814][d][vo/gpu-next/libplacebo] [1420]     }
[   0.814][d][vo/gpu-next/libplacebo] [1421] idx = _200d * rel.y + rel.x + _200d * 11 + 7; 
[   0.814][d][vo/gpu-next/libplacebo] [1422] offset = ivec2(2, 6);
[   0.814][d][vo/gpu-next/libplacebo] [1423] d = length(vec2(offset) - fcoord);
[   0.814][d][vo/gpu-next/libplacebo] [1424]     if (d < /*radius*/_200b) {
[   0.814][d][vo/gpu-next/libplacebo] [1425] w = /*lut*/_2006(d * 1.0 / /*radius*/_200b);
[   0.814][d][vo/gpu-next/libplacebo] [1426] wsum += w;
[   0.814][d][vo/gpu-next/libplacebo] [1427]         c[0] = /*in*/_200c_0[idx];
[   0.814][d][vo/gpu-next/libplacebo] [1428]         c[1] = /*in*/_200c_1[idx];
[   0.814][d][vo/gpu-next/libplacebo] [1429]         c[2] = /*in*/_200c_2[idx];
[   0.814][d][vo/gpu-next/libplacebo] [1430]     color[0] += w * c[0];
[   0.814][d][vo/gpu-next/libplacebo] [1431]     color[1] += w * c[1];
[   0.814][d][vo/gpu-next/libplacebo] [1432]     color[2] += w * c[2];
[   0.814][d][vo/gpu-next/libplacebo] [1433]     }
[   0.814][d][vo/gpu-next/libplacebo] [1434] idx = _200d * rel.y + rel.x + _200d * 11 + 8; 
[   0.814][d][vo/gpu-next/libplacebo] [1435] idx = _200d * rel.y + rel.x + _200d * 11 + 9; 
[   0.814][d][vo/gpu-next/libplacebo] [1436] idx = _200d * rel.y + rel.x + _200d * 11 + 10; 
[   0.814][d][vo/gpu-next/libplacebo] [1437] idx = _200d * rel.y + rel.x + _200d * 11 + 11; 
[   0.814][d][vo/gpu-next/libplacebo] [1438] color = /*scale*/_2005 / wsum * color;
[   0.814][d][vo/gpu-next/libplacebo] [1439]     color.a = 1.0;
[   0.814][d][vo/gpu-next/libplacebo] [1440] }
[   0.814][d][vo/gpu-next/libplacebo] [1441] // pl_shader_delinearize 
[   0.814][d][vo/gpu-next/libplacebo] [1442] color.rgb = max(color.rgb, 0.0); 
[   0.814][d][vo/gpu-next/libplacebo] [1443] color.rgb = pow(_2012 * color.rgb, vec3(1.0/2.4)) - vec3(_2013); 
[   0.814][d][vo/gpu-next/libplacebo] [1444] ivec2 dir = ivec2(1, 1);
[   0.814][d][vo/gpu-next/libplacebo] [1445] ivec2 pos = _201a + dir * ivec2(gl_GlobalInvocationID).xy;
[   0.814][d][vo/gpu-next/libplacebo] [1446] vec2 fpos = _2014 * vec2(gl_GlobalInvocationID);
[   0.814][d][vo/gpu-next/libplacebo] [1447] if (fpos.x < 1.0 && fpos.y < 1.0) {
[   0.814][d][vo/gpu-next/libplacebo] [1448] imageStore(_2019, pos, color);
[   0.814][d][vo/gpu-next/libplacebo] [1449] }
[   0.814][d][vo/gpu-next/libplacebo] [1450] 
[   0.814][d][vo/gpu-next/libplacebo] [1451] }
[   0.814][d][vo/gpu-next/libplacebo] [1452] 
[   0.814][d][vo/gpu-next/libplacebo] [1453] void main() {
[   0.814][d][vo/gpu-next/libplacebo] [1454] _2001();
[   0.814][d][vo/gpu-next/libplacebo] [1455] }
[   0.814][d][vo/gpu-next] cache_load_obj: key(f538942c348953f1), size(52449), load time(0.197 ms)
[   0.814][d][vo/gpu-next/libplacebo] Using cached DXBC shader
[   0.814][d][vo/gpu-next] cache_save_obj: key(f538942c348953f1), size(52449)
[   0.814][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.814][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.814][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.814][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.814][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.814][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _6;
[   0.814][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _c {
[   0.814][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) float _4;
[   0.814][d][vo/gpu-next/libplacebo] [  8] };
[   0.814][d][vo/gpu-next/libplacebo] [  9] layout(location=0) in vec2 _d;
[   0.814][d][vo/gpu-next/libplacebo] [ 10] layout(location=0) out vec2 _3;
[   0.814][d][vo/gpu-next/libplacebo] [ 11] layout(location=1) in vec2 _e;
[   0.814][d][vo/gpu-next/libplacebo] [ 12] void main() {
[   0.814][d][vo/gpu-next/libplacebo] [ 13] _3 = _d;
[   0.814][d][vo/gpu-next/libplacebo] [ 14] vec2 va_pos = _e; 
[   0.814][d][vo/gpu-next/libplacebo] [ 15] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.814][d][vo/gpu-next/libplacebo] [ 16] }
[   0.814][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.814][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.814][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.814][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.814][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.814][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _6;
[   0.814][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _c {
[   0.814][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) float _4;
[   0.814][d][vo/gpu-next/libplacebo] [  8] };
[   0.814][d][vo/gpu-next/libplacebo] [  9] layout(location=0) in vec2 _3;
[   0.814][d][vo/gpu-next/libplacebo] [ 10] layout(location=0) out vec4 out_color;
[   0.814][d][vo/gpu-next/libplacebo] [ 11] 
[   0.814][d][vo/gpu-next/libplacebo] [ 12] #define _5(pos) (texelFetch(_6, ivec2(pos), 0).x)
[   0.814][d][vo/gpu-next/libplacebo] [ 13] const float _7 = float(64); 
[   0.814][d][vo/gpu-next/libplacebo] [ 14] const float _8 = float(64); 
[   0.814][d][vo/gpu-next/libplacebo] [ 15] const float _9 = float(1); 
[   0.814][d][vo/gpu-next/libplacebo] [ 16] vec4 _1() {
[   0.814][d][vo/gpu-next/libplacebo] [ 17] vec4 color;                   
[   0.814][d][vo/gpu-next/libplacebo] [ 18] // pl_render_image_mix        
[   0.814][d][vo/gpu-next/libplacebo] [ 19] {                             
[   0.814][d][vo/gpu-next/libplacebo] [ 20] vec4 mix_color = vec4(0.0);   
[   0.814][d][vo/gpu-next/libplacebo] [ 21] color = textureLod(_2, _3, 0.0); 
[   0.814][d][vo/gpu-next/libplacebo] [ 22] mix_color += vec4(_4) * color; 
[   0.814][d][vo/gpu-next/libplacebo] [ 23] color = mix_color; 
[   0.814][d][vo/gpu-next/libplacebo] [ 24] }                  
[   0.814][d][vo/gpu-next/libplacebo] [ 25] // pl_shader_encode_color 
[   0.814][d][vo/gpu-next/libplacebo] [ 26] { 
[   0.814][d][vo/gpu-next/libplacebo] [ 27] color.rgb *= vec3(color.a); 
[   0.814][d][vo/gpu-next/libplacebo] [ 28] }
[   0.814][d][vo/gpu-next/libplacebo] [ 29] // pl_shader_dither 
[   0.814][d][vo/gpu-next/libplacebo] [ 30] {                    
[   0.814][d][vo/gpu-next/libplacebo] [ 31] float bias;          
[   0.814][d][vo/gpu-next/libplacebo] [ 32] vec2 pos = fract(gl_FragCoord.xy * 1.0/_7); 
[   0.814][d][vo/gpu-next/libplacebo] [ 33] bias = _5(ivec2(pos * _8));
[   0.814][d][vo/gpu-next/libplacebo] [ 34] const float scale = 255.0; 
[   0.814][d][vo/gpu-next/libplacebo] [ 35] color = scale * color + vec4(bias);   
[   0.814][d][vo/gpu-next/libplacebo] [ 36] color = floor(color) * (1.0 / scale); 
[   0.814][d][vo/gpu-next/libplacebo] [ 37] } 
[   0.814][d][vo/gpu-next/libplacebo] [ 38] color.rgba *= vec4(1.0 / _9); 
[   0.814][d][vo/gpu-next/libplacebo] [ 39] vec4 _a = color;                 
[   0.814][d][vo/gpu-next/libplacebo] [ 40] color = vec4(0.0, 0.0, 0.0, 1.0); 
[   0.814][d][vo/gpu-next/libplacebo] [ 41] color[0] = _a[0]; 
[   0.814][d][vo/gpu-next/libplacebo] [ 42] color[1] = _a[1]; 
[   0.814][d][vo/gpu-next/libplacebo] [ 43] color[2] = _a[2]; 
[   0.814][d][vo/gpu-next/libplacebo] [ 44] color[3] = _a[3]; 
[   0.814][d][vo/gpu-next/libplacebo] [ 45] return color;
[   0.814][d][vo/gpu-next/libplacebo] [ 46] }
[   0.814][d][vo/gpu-next/libplacebo] [ 47] 
[   0.814][d][vo/gpu-next/libplacebo] [ 48] void main() {
[   0.814][d][vo/gpu-next/libplacebo] [ 49] out_color = _1();
[   0.814][d][vo/gpu-next/libplacebo] [ 50] }
[   0.814][d][vo/gpu-next] cache_load_obj: key(e6530c21ec2ce354), size(1977), load time(0.128 ms)
[   0.814][d][vo/gpu-next/libplacebo] Using cached DXBC shaders
[   0.814][d][vo/gpu-next] cache_save_obj: key(e6530c21ec2ce354), size(1977)
[   0.823][v][cplayer] Set property: sub-pos=82 -> 1
[   0.823][d][modernz] osc_init
[   0.823][v][cplayer] audio ready
[   0.823][d][cplayer] starting video playback
[   0.823][v][cplayer] starting audio playback
[   0.823][v][cplayer] playback restart complete @ 9661.827711, audio=playing, video=playing
[   0.823][d][ao/wasapi] Thread Resume
[   0.823][d][ao/wasapi] Thread Reset
[   0.823][d][ao/wasapi] Thread Pause
[   0.823][d][ao/wasapi] Thread Unpause
[   0.828][v][cplayer] Change display sync audio drift: -1
[   0.828][v][cplayer] Video sync mode enabled.
[   0.828][d][vo/gpu-next/libplacebo] (Re)creating 3840x2160x0 texture with format r8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   0.829][d][vo/gpu-next/libplacebo] (Re)creating 1920x1080x0 texture with format rg8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   0.830][d][vo/gpu-next/libplacebo] (Re)creating 3840x2160x0 texture with format r8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   0.832][v][cplayer] Set property: user-data/osc/margins={"r":0,"t":0,"l":0,"b":0} -> 1
[   0.832][d][vo/gpu-next/libplacebo] (Re)creating 1920x1080x0 texture with format rg8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   0.834][d][vo/gpu-next/libplacebo] (Re)creating 2332x1312x0 texture with format rgba16hf: src/renderer.c:3548
[   0.846][d][vo/gpu-next/libplacebo] (Re)creating 2332x1312x0 texture with format rgba16hf: src/renderer.c:3548
[   0.847][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.847][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.847][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.847][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.847][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.847][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _5;
[   0.847][d][vo/gpu-next/libplacebo] [  6] layout(binding=2) uniform  sampler2D _9;
[   0.847][d][vo/gpu-next/libplacebo] [  7] layout(std140, binding=3) uniform _f {
[   0.847][d][vo/gpu-next/libplacebo] [  8]     layout(offset=0) float _4;
[   0.847][d][vo/gpu-next/libplacebo] [  9]     layout(offset=4) float _7;
[   0.847][d][vo/gpu-next/libplacebo] [ 10] };
[   0.847][d][vo/gpu-next/libplacebo] [ 11] layout(location=0) in vec2 _10;
[   0.847][d][vo/gpu-next/libplacebo] [ 12] layout(location=0) out vec2 _3;
[   0.847][d][vo/gpu-next/libplacebo] [ 13] layout(location=1) in vec2 _11;
[   0.847][d][vo/gpu-next/libplacebo] [ 14] layout(location=1) out vec2 _6;
[   0.847][d][vo/gpu-next/libplacebo] [ 15] layout(location=2) in vec2 _12;
[   0.847][d][vo/gpu-next/libplacebo] [ 16] void main() {
[   0.847][d][vo/gpu-next/libplacebo] [ 17] _3 = _10;
[   0.847][d][vo/gpu-next/libplacebo] [ 18] _6 = _11;
[   0.847][d][vo/gpu-next/libplacebo] [ 19] vec2 va_pos = _12; 
[   0.847][d][vo/gpu-next/libplacebo] [ 20] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.847][d][vo/gpu-next/libplacebo] [ 21] }
[   0.847][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.847][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.847][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.847][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.847][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.847][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _5;
[   0.847][d][vo/gpu-next/libplacebo] [  6] layout(binding=2) uniform  sampler2D _9;
[   0.847][d][vo/gpu-next/libplacebo] [  7] layout(std140, binding=3) uniform _f {
[   0.847][d][vo/gpu-next/libplacebo] [  8]     layout(offset=0) float _4;
[   0.847][d][vo/gpu-next/libplacebo] [  9]     layout(offset=4) float _7;
[   0.847][d][vo/gpu-next/libplacebo] [ 10] };
[   0.847][d][vo/gpu-next/libplacebo] [ 11] layout(location=0) in vec2 _3;
[   0.847][d][vo/gpu-next/libplacebo] [ 12] layout(location=1) in vec2 _6;
[   0.847][d][vo/gpu-next/libplacebo] [ 13] layout(location=0) out vec4 out_color;
[   0.847][d][vo/gpu-next/libplacebo] [ 14] 
[   0.847][d][vo/gpu-next/libplacebo] [ 15] #define _8(pos) (texelFetch(_9, ivec2(pos), 0).x)
[   0.847][d][vo/gpu-next/libplacebo] [ 16] const float _a = float(64); 
[   0.847][d][vo/gpu-next/libplacebo] [ 17] const float _b = float(64); 
[   0.847][d][vo/gpu-next/libplacebo] [ 18] const float _c = float(1); 
[   0.847][d][vo/gpu-next/libplacebo] [ 19] vec4 _1() {
[   0.847][d][vo/gpu-next/libplacebo] [ 20] vec4 color;                   
[   0.847][d][vo/gpu-next/libplacebo] [ 21] // pl_render_image_mix        
[   0.847][d][vo/gpu-next/libplacebo] [ 22] {                             
[   0.847][d][vo/gpu-next/libplacebo] [ 23] vec4 mix_color = vec4(0.0);   
[   0.847][d][vo/gpu-next/libplacebo] [ 24] color = textureLod(_2, _3, 0.0); 
[   0.847][d][vo/gpu-next/libplacebo] [ 25] mix_color += vec4(_4) * color; 
[   0.847][d][vo/gpu-next/libplacebo] [ 26] color = textureLod(_5, _6, 0.0); 
[   0.847][d][vo/gpu-next/libplacebo] [ 27] mix_color += vec4(_7) * color; 
[   0.847][d][vo/gpu-next/libplacebo] [ 28] color = mix_color; 
[   0.847][d][vo/gpu-next/libplacebo] [ 29] }                  
[   0.847][d][vo/gpu-next/libplacebo] [ 30] // pl_shader_encode_color 
[   0.847][d][vo/gpu-next/libplacebo] [ 31] { 
[   0.847][d][vo/gpu-next/libplacebo] [ 32] color.rgb *= vec3(color.a); 
[   0.847][d][vo/gpu-next/libplacebo] [ 33] }
[   0.847][d][vo/gpu-next/libplacebo] [ 34] // pl_shader_dither 
[   0.847][d][vo/gpu-next/libplacebo] [ 35] {                    
[   0.847][d][vo/gpu-next/libplacebo] [ 36] float bias;          
[   0.847][d][vo/gpu-next/libplacebo] [ 37] vec2 pos = fract(gl_FragCoord.xy * 1.0/_a); 
[   0.847][d][vo/gpu-next/libplacebo] [ 38] bias = _8(ivec2(pos * _b));
[   0.847][d][vo/gpu-next/libplacebo] [ 39] const float scale = 255.0; 
[   0.847][d][vo/gpu-next/libplacebo] [ 40] color = scale * color + vec4(bias);   
[   0.847][d][vo/gpu-next/libplacebo] [ 41] color = floor(color) * (1.0 / scale); 
[   0.847][d][vo/gpu-next/libplacebo] [ 42] } 
[   0.847][d][vo/gpu-next/libplacebo] [ 43] color.rgba *= vec4(1.0 / _c); 
[   0.847][d][vo/gpu-next/libplacebo] [ 44] vec4 _d = color;                 
[   0.847][d][vo/gpu-next/libplacebo] [ 45] color = vec4(0.0, 0.0, 0.0, 1.0); 
[   0.847][d][vo/gpu-next/libplacebo] [ 46] color[0] = _d[0]; 
[   0.847][d][vo/gpu-next/libplacebo] [ 47] color[1] = _d[1]; 
[   0.847][d][vo/gpu-next/libplacebo] [ 48] color[2] = _d[2]; 
[   0.847][d][vo/gpu-next/libplacebo] [ 49] color[3] = _d[3]; 
[   0.847][d][vo/gpu-next/libplacebo] [ 50] return color;
[   0.847][d][vo/gpu-next/libplacebo] [ 51] }
[   0.847][d][vo/gpu-next/libplacebo] [ 52] 
[   0.847][d][vo/gpu-next/libplacebo] [ 53] void main() {
[   0.847][d][vo/gpu-next/libplacebo] [ 54] out_color = _1();
[   0.847][d][vo/gpu-next/libplacebo] [ 55] }
[   0.847][d][vo/gpu-next] cache_load_obj: key(4f5b8c7b53603f67), size(2365), load time(0.184 ms)
[   0.847][d][vo/gpu-next/libplacebo] Using cached DXBC shaders
[   0.847][d][vo/gpu-next] cache_save_obj: key(4f5b8c7b53603f67), size(2365)
[   0.851][v][vo/gpu-next/libplacebo] Detected fps ratio 0.0093 below threshold 0.0100, disabling interpolation
[   0.851][v][vo/gpu-next/libplacebo] Estimated source FPS: 59.940, display FPS: 59.381
[   0.851][d][vo/gpu-next] Render queue underrun.
[   0.935][v][cplayer] Change display sync audio drift: 1
[   0.985][d][vo/gpu-next/libplacebo] (Re)creating 3840x2160x0 texture with format r8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   0.987][d][vo/gpu-next/libplacebo] (Re)creating 1920x1080x0 texture with format rg8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   1.754][v][sub/ass] fontselect: (Microsoft YaHei, 400, 0) -> MicrosoftYaHei, 0, MicrosoftYaHei
[   1.764][d][osd] Spent 12.032 ms in osd_render (slow!)
[   1.764][d][vo/gpu-next/libplacebo] (Re)creating 140x185x0 texture with format r8: unknown
[   1.767][d][vo/gpu-next/libplacebo] vertex shader source:
[   1.767][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.767][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.767][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.767][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.767][d][vo/gpu-next/libplacebo] [  5] layout(std140, binding=1) uniform _d {
[   1.767][d][vo/gpu-next/libplacebo] [  6]     layout(offset=0) mat3 _5;
[   1.767][d][vo/gpu-next/libplacebo] [  7]     layout(offset=48) mat3 _6;
[   1.767][d][vo/gpu-next/libplacebo] [  8] };
[   1.767][d][vo/gpu-next/libplacebo] [  9] layout(location=0) in vec2 _e;
[   1.767][d][vo/gpu-next/libplacebo] [ 10] layout(location=1) in vec2 _f;
[   1.767][d][vo/gpu-next/libplacebo] [ 11] layout(location=1) out vec2 _b;
[   1.767][d][vo/gpu-next/libplacebo] [ 12] layout(location=2) in vec4 _10;
[   1.767][d][vo/gpu-next/libplacebo] [ 13] layout(location=2) out vec4 _c;
[   1.767][d][vo/gpu-next/libplacebo] [ 14] void main() {
[   1.767][d][vo/gpu-next/libplacebo] [ 15] vec2 va_pos = _e; 
[   1.767][d][vo/gpu-next/libplacebo] [ 16] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   1.767][d][vo/gpu-next/libplacebo] [ 17] _b = _f;
[   1.767][d][vo/gpu-next/libplacebo] [ 18] _c = _10;
[   1.767][d][vo/gpu-next/libplacebo] [ 19] }
[   1.767][d][vo/gpu-next/libplacebo] fragment shader source:
[   1.767][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.767][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.767][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.767][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.767][d][vo/gpu-next/libplacebo] [  5] layout(std140, binding=1) uniform _d {
[   1.768][d][vo/gpu-next/libplacebo] [  6]     layout(offset=0) mat3 _5;
[   1.768][d][vo/gpu-next/libplacebo] [  7]     layout(offset=48) mat3 _6;
[   1.768][d][vo/gpu-next/libplacebo] [  8] };
[   1.768][d][vo/gpu-next/libplacebo] [  9] layout(location=1) in vec2 _b;
[   1.768][d][vo/gpu-next/libplacebo] [ 10] layout(location=2) in vec4 _c;
[   1.768][d][vo/gpu-next/libplacebo] [ 11] layout(location=0) out vec4 out_color;
[   1.768][d][vo/gpu-next/libplacebo] [ 12] #define pos _a
[   1.768][d][vo/gpu-next/libplacebo] [ 13] #define coord _b
[   1.768][d][vo/gpu-next/libplacebo] [ 14] #define osd_color _c
[   1.768][d][vo/gpu-next/libplacebo] [ 15] 
[   1.768][d][vo/gpu-next/libplacebo] [ 16] const float _3 = float(0.9990000128746033); 
[   1.768][d][vo/gpu-next/libplacebo] [ 17] const float _4 = float(0.0009999999310821295); 
[   1.768][d][vo/gpu-next/libplacebo] [ 18] const float _7 = float(1.149015188217163); 
[   1.768][d][vo/gpu-next/libplacebo] [ 19] const float _8 = float(0.0595848374068737); 
[   1.768][d][vo/gpu-next/libplacebo] [ 20] vec4 _1() {
[   1.768][d][vo/gpu-next/libplacebo] [ 21] // overlay 
[   1.768][d][vo/gpu-next/libplacebo] [ 22] vec4 color = osd_color; 
[   1.768][d][vo/gpu-next/libplacebo] [ 23] // pl_shader_decode_color 
[   1.768][d][vo/gpu-next/libplacebo] [ 24] { 
[   1.768][d][vo/gpu-next/libplacebo] [ 25] }
[   1.768][d][vo/gpu-next/libplacebo] [ 26] // pl_shader_color_map 
[   1.768][d][vo/gpu-next/libplacebo] [ 27] {                      
[   1.768][d][vo/gpu-next/libplacebo] [ 28] // pl_shader_linearize           
[   1.768][d][vo/gpu-next/libplacebo] [ 29] color.rgb = max(color.rgb, 0.0); 
[   1.768][d][vo/gpu-next/libplacebo] [ 30] color.rgb = mix(color.rgb * vec3(1.0/12.92),               
[   1.768][d][vo/gpu-next/libplacebo] [ 31]                 pow((color.rgb + vec3(0.055))/vec3(1.055), 
[   1.768][d][vo/gpu-next/libplacebo] [ 32]                     vec3(2.4)),                            
[   1.768][d][vo/gpu-next/libplacebo] [ 33]                 lessThan(vec3(0.04045), color.rgb));       
[   1.768][d][vo/gpu-next/libplacebo] [ 34] color.rgb = _3 * color.rgb + vec3(_4); 
[   1.768][d][vo/gpu-next/libplacebo] [ 35] // pl_shader_delinearize 
[   1.768][d][vo/gpu-next/libplacebo] [ 36] color.rgb = max(color.rgb, 0.0); 
[   1.768][d][vo/gpu-next/libplacebo] [ 37] color.rgb = pow(_7 * color.rgb, vec3(1.0/2.4)) - vec3(_8); 
[   1.768][d][vo/gpu-next/libplacebo] [ 38] }
[   1.768][d][vo/gpu-next/libplacebo] [ 39] // pl_shader_encode_color 
[   1.768][d][vo/gpu-next/libplacebo] [ 40] { 
[   1.768][d][vo/gpu-next/libplacebo] [ 41] color.rgb *= vec3(color.a); 
[   1.768][d][vo/gpu-next/libplacebo] [ 42] }
[   1.768][d][vo/gpu-next/libplacebo] [ 43] color.rgba *= textureLod(_2, coord, 0.0).r; 
[   1.768][d][vo/gpu-next/libplacebo] [ 44] vec4 _9 = color;                 
[   1.768][d][vo/gpu-next/libplacebo] [ 45] color = vec4(0.0, 0.0, 0.0, 1.0); 
[   1.768][d][vo/gpu-next/libplacebo] [ 46] color[0] = _9[0]; 
[   1.768][d][vo/gpu-next/libplacebo] [ 47] color[1] = _9[1]; 
[   1.768][d][vo/gpu-next/libplacebo] [ 48] color[2] = _9[2]; 
[   1.768][d][vo/gpu-next/libplacebo] [ 49] color[3] = _9[3]; 
[   1.768][d][vo/gpu-next/libplacebo] [ 50] color.a = _9.a; 
[   1.768][d][vo/gpu-next/libplacebo] [ 51] return color;
[   1.768][d][vo/gpu-next/libplacebo] [ 52] }
[   1.768][d][vo/gpu-next/libplacebo] [ 53] 
[   1.768][d][vo/gpu-next/libplacebo] [ 54] void main() {
[   1.768][d][vo/gpu-next/libplacebo] [ 55] out_color = _1();
[   1.768][d][vo/gpu-next/libplacebo] [ 56] }
[   1.768][d][vo/gpu-next] cache_load_obj: key(3360a918d5e18f7e), size(2077), load time(0.139 ms)
[   1.768][d][vo/gpu-next/libplacebo] Using cached DXBC shaders
[   1.768][d][vo/gpu-next] cache_save_obj: key(3360a918d5e18f7e), size(2077)
[   2.691][v][cplayer] Set property: user-data/osc/margins={"r":0,"t":0,"l":0,"b":0} -> 1
[   2.708][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[   2.712][d][modernz] osc_init
[   2.713][v][cplayer] Set property: user-data/osc/margins={"r":0,"t":0,"l":0,"b":0} -> 1
[   2.723][v][osd/libass] fontselect: (sans-serif, 400, 0) -> ArialMT, 0, ArialMT
[   2.734][v][osd/libass] fontselect: (Material Design Icons, 400, 0) -> MaterialDesignIcons, 0, MaterialDesignIcons
[   2.734][v][osd/libass] fontselect: (mpv-osd-symbols, 400, 0) -> mpv-osd-symbols-Regular, 0, mpv-osd-symbols-Regular
[   2.734][v][osd/libass] Glyph 0x30 not found, selecting one more font for (mpv-osd-symbols, 400, 0)
[   2.734][i][osd/libass] fontselect: Using default font family: (mpv-osd-symbols, 400, 0) -> ArialMT, 0, ArialMT
[   2.734][v][osd/libass] fontselect: (mpv-osd-symbols, 400, 0) -> ArialMT, 0, ArialMT
[   2.738][d][osd] Spent 19.447 ms in osd_render (slow!)
[   2.738][d][vo/gpu-next/libplacebo] (Re)creating 3880x1290x0 texture with format r8: unknown
[   2.892][d][osd] Spent 5.726 ms in osd_render (slow!)
[   8.308][d][vo/gpu-next/libplacebo] (Re)creating 317x192x0 texture with format r8: unknown
[   8.367][d][cplayer] Run command: script-binding, flags=73, args=[name="modernz/__keybinding4", arg=""]
[   8.735][d][lavf] stream 1: resize index to 256
[  10.109][v][cplayer] Set property: user-data/osc/margins={"r":0,"t":0,"l":0,"b":0} -> 1
[  10.109][v][cplayer] Set property: sub-pos=82 -> 1
[  10.113][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[  11.381][v][cplayer] Set property: user-data/osc/margins={"r":0,"t":0,"l":0,"b":0} -> 1
[  11.389][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[  13.202][v][cplayer] Set property: user-data/osc/margins={"r":0,"t":0,"l":0,"b":0} -> 1
[  13.202][v][cplayer] Set property: sub-pos=82 -> 1
[  13.202][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[  13.479][v][cplayer] Change display sync audio drift: 0
[  13.479][v][cplayer] Compensation factor: 0.999971
[  19.623][d][cplayer] Run command: quit, flags=73, args=[code="0"]
[  19.624][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[  19.624][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[  19.625][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[  19.625][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[  19.625][i][cplayer] Saving state.
[  19.627][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[  19.627][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[  19.628][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[  19.628][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[  19.629][d][global] config path: 'watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[  19.630][d][global] user path: '~~/watch_later/' -> 'C:\Users\feng\AppData\Roaming/mpv/watch_later/'
[  19.630][v][cplayer] EOF code: 5  
[  19.630][d][ad] Uninit decoder.
[  19.630][d][ao/wasapi] Thread Reset
[  19.630][d][ao/wasapi] Thread Pause
[  19.631][d][vd] Uninit decoder.
[  19.668][d][cplayer] Terminating demuxers...
[  19.671][d][cplayer] Done terminating demuxers.
[  19.671][v][cplayer] finished playback, success (reason 3)
[  19.671][v][cplayer] Running hook: ytdl_hook/on_after_end_file
[  19.672][d][cplayer] Run command: del, flags=64, args=[name="user-data/mpv/ytdl/json-subprocess-result"]
[  19.672][i][cplayer] Exiting... (Quit)
[  19.672][d][vo/gpu-next/libplacebo] First frame received with non-zero PTS 9680.646422
[  19.672][d][cplayer] Run command: del, flags=64, args=[name="user-data/mpv/console"]
[  19.673][d][console] Destroying client handle...
[  19.673][d][ytdl_hook] Destroying client handle...
[  19.673][d][positioning] Destroying client handle...
[  19.673][d][select] Destroying client handle...
[  19.673][d][stats] Destroying client handle...
[  19.673][d][commands] Destroying client handle...
[  19.673][d][display_time] Destroying client handle...
[  19.673][d][menu] Destroying client handle...
[  19.673][d][playlistmanager] Destroying client handle...
[  19.676][d][modernz] Destroying client handle...
[  19.677][d][SystemMediaTransportControls] Destroying client handle...
[  19.677][d][ao/wasapi] Uninit wasapi
[  19.677][d][ao/wasapi] Thread Reset
[  19.677][d][ao/wasapi] Thread Pause
[  19.677][d][ao/wasapi] Thread shutdown
[  19.677][d][ao/wasapi] Thread uninit done
[  19.677][d][ao/wasapi] Thread return
[  19.678][d][ao/wasapi] Uninit wasapi done
[  19.706][v][vo/gpu-next/win32] uninit
